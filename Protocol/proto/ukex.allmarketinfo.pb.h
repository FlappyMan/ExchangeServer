// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.allmarketinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2eallmarketinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2eallmarketinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2eallmarketinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2eallmarketinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2eallmarketinfo_2eproto;
namespace ukex {
class allmarketinfo;
class allmarketinfoDefaultTypeInternal;
extern allmarketinfoDefaultTypeInternal _allmarketinfo_default_instance_;
class allmarketinfo_Data;
class allmarketinfo_DataDefaultTypeInternal;
extern allmarketinfo_DataDefaultTypeInternal _allmarketinfo_Data_default_instance_;
class allmarketinfo_Exchange;
class allmarketinfo_ExchangeDefaultTypeInternal;
extern allmarketinfo_ExchangeDefaultTypeInternal _allmarketinfo_Exchange_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::allmarketinfo* Arena::CreateMaybeMessage<::ukex::allmarketinfo>(Arena*);
template<> ::ukex::allmarketinfo_Data* Arena::CreateMaybeMessage<::ukex::allmarketinfo_Data>(Arena*);
template<> ::ukex::allmarketinfo_Exchange* Arena::CreateMaybeMessage<::ukex::allmarketinfo_Exchange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum allmarketinfo_CONST : int {
  allmarketinfo_CONST_CMD = 104
};
bool allmarketinfo_CONST_IsValid(int value);
constexpr allmarketinfo_CONST allmarketinfo_CONST_CONST_MIN = allmarketinfo_CONST_CMD;
constexpr allmarketinfo_CONST allmarketinfo_CONST_CONST_MAX = allmarketinfo_CONST_CMD;
constexpr int allmarketinfo_CONST_CONST_ARRAYSIZE = allmarketinfo_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* allmarketinfo_CONST_descriptor();
template<typename T>
inline const std::string& allmarketinfo_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, allmarketinfo_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function allmarketinfo_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    allmarketinfo_CONST_descriptor(), enum_t_value);
}
inline bool allmarketinfo_CONST_Parse(
    const std::string& name, allmarketinfo_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<allmarketinfo_CONST>(
    allmarketinfo_CONST_descriptor(), name, value);
}
// ===================================================================

class allmarketinfo_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo.Data) */ {
 public:
  allmarketinfo_Data();
  virtual ~allmarketinfo_Data();

  allmarketinfo_Data(const allmarketinfo_Data& from);
  allmarketinfo_Data(allmarketinfo_Data&& from) noexcept
    : allmarketinfo_Data() {
    *this = ::std::move(from);
  }

  inline allmarketinfo_Data& operator=(const allmarketinfo_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline allmarketinfo_Data& operator=(allmarketinfo_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const allmarketinfo_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allmarketinfo_Data* internal_default_instance() {
    return reinterpret_cast<const allmarketinfo_Data*>(
               &_allmarketinfo_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(allmarketinfo_Data& a, allmarketinfo_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(allmarketinfo_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline allmarketinfo_Data* New() const final {
    return CreateMaybeMessage<allmarketinfo_Data>(nullptr);
  }

  allmarketinfo_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<allmarketinfo_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const allmarketinfo_Data& from);
  void MergeFrom(const allmarketinfo_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allmarketinfo_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.allmarketinfo.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eallmarketinfo_2eproto);
    return ::descriptor_table_ukex_2eallmarketinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM0FieldNumber = 1,
    kM1FieldNumber = 2,
    kM2FieldNumber = 3,
    kM3FieldNumber = 4,
    kM4FieldNumber = 5,
    kM5FieldNumber = 6,
    kM6FieldNumber = 7,
    kM7FieldNumber = 8,
    kM8FieldNumber = 9,
    kM9FieldNumber = 10,
    kM10FieldNumber = 11,
    kM11FieldNumber = 12,
    kM12FieldNumber = 13,
    kM13FieldNumber = 14,
  };
  // required string m0 = 1;
  bool has_m0() const;
  private:
  bool _internal_has_m0() const;
  public:
  void clear_m0();
  const std::string& m0() const;
  void set_m0(const std::string& value);
  void set_m0(std::string&& value);
  void set_m0(const char* value);
  void set_m0(const char* value, size_t size);
  std::string* mutable_m0();
  std::string* release_m0();
  void set_allocated_m0(std::string* m0);
  private:
  const std::string& _internal_m0() const;
  void _internal_set_m0(const std::string& value);
  std::string* _internal_mutable_m0();
  public:

  // required string m1 = 2;
  bool has_m1() const;
  private:
  bool _internal_has_m1() const;
  public:
  void clear_m1();
  const std::string& m1() const;
  void set_m1(const std::string& value);
  void set_m1(std::string&& value);
  void set_m1(const char* value);
  void set_m1(const char* value, size_t size);
  std::string* mutable_m1();
  std::string* release_m1();
  void set_allocated_m1(std::string* m1);
  private:
  const std::string& _internal_m1() const;
  void _internal_set_m1(const std::string& value);
  std::string* _internal_mutable_m1();
  public:

  // required string m2 = 3;
  bool has_m2() const;
  private:
  bool _internal_has_m2() const;
  public:
  void clear_m2();
  const std::string& m2() const;
  void set_m2(const std::string& value);
  void set_m2(std::string&& value);
  void set_m2(const char* value);
  void set_m2(const char* value, size_t size);
  std::string* mutable_m2();
  std::string* release_m2();
  void set_allocated_m2(std::string* m2);
  private:
  const std::string& _internal_m2() const;
  void _internal_set_m2(const std::string& value);
  std::string* _internal_mutable_m2();
  public:

  // required string m3 = 4;
  bool has_m3() const;
  private:
  bool _internal_has_m3() const;
  public:
  void clear_m3();
  const std::string& m3() const;
  void set_m3(const std::string& value);
  void set_m3(std::string&& value);
  void set_m3(const char* value);
  void set_m3(const char* value, size_t size);
  std::string* mutable_m3();
  std::string* release_m3();
  void set_allocated_m3(std::string* m3);
  private:
  const std::string& _internal_m3() const;
  void _internal_set_m3(const std::string& value);
  std::string* _internal_mutable_m3();
  public:

  // required string m4 = 5;
  bool has_m4() const;
  private:
  bool _internal_has_m4() const;
  public:
  void clear_m4();
  const std::string& m4() const;
  void set_m4(const std::string& value);
  void set_m4(std::string&& value);
  void set_m4(const char* value);
  void set_m4(const char* value, size_t size);
  std::string* mutable_m4();
  std::string* release_m4();
  void set_allocated_m4(std::string* m4);
  private:
  const std::string& _internal_m4() const;
  void _internal_set_m4(const std::string& value);
  std::string* _internal_mutable_m4();
  public:

  // required string m5 = 6;
  bool has_m5() const;
  private:
  bool _internal_has_m5() const;
  public:
  void clear_m5();
  const std::string& m5() const;
  void set_m5(const std::string& value);
  void set_m5(std::string&& value);
  void set_m5(const char* value);
  void set_m5(const char* value, size_t size);
  std::string* mutable_m5();
  std::string* release_m5();
  void set_allocated_m5(std::string* m5);
  private:
  const std::string& _internal_m5() const;
  void _internal_set_m5(const std::string& value);
  std::string* _internal_mutable_m5();
  public:

  // required string m6 = 7;
  bool has_m6() const;
  private:
  bool _internal_has_m6() const;
  public:
  void clear_m6();
  const std::string& m6() const;
  void set_m6(const std::string& value);
  void set_m6(std::string&& value);
  void set_m6(const char* value);
  void set_m6(const char* value, size_t size);
  std::string* mutable_m6();
  std::string* release_m6();
  void set_allocated_m6(std::string* m6);
  private:
  const std::string& _internal_m6() const;
  void _internal_set_m6(const std::string& value);
  std::string* _internal_mutable_m6();
  public:

  // required string m7 = 8;
  bool has_m7() const;
  private:
  bool _internal_has_m7() const;
  public:
  void clear_m7();
  const std::string& m7() const;
  void set_m7(const std::string& value);
  void set_m7(std::string&& value);
  void set_m7(const char* value);
  void set_m7(const char* value, size_t size);
  std::string* mutable_m7();
  std::string* release_m7();
  void set_allocated_m7(std::string* m7);
  private:
  const std::string& _internal_m7() const;
  void _internal_set_m7(const std::string& value);
  std::string* _internal_mutable_m7();
  public:

  // required string m8 = 9;
  bool has_m8() const;
  private:
  bool _internal_has_m8() const;
  public:
  void clear_m8();
  const std::string& m8() const;
  void set_m8(const std::string& value);
  void set_m8(std::string&& value);
  void set_m8(const char* value);
  void set_m8(const char* value, size_t size);
  std::string* mutable_m8();
  std::string* release_m8();
  void set_allocated_m8(std::string* m8);
  private:
  const std::string& _internal_m8() const;
  void _internal_set_m8(const std::string& value);
  std::string* _internal_mutable_m8();
  public:

  // required string m9 = 10;
  bool has_m9() const;
  private:
  bool _internal_has_m9() const;
  public:
  void clear_m9();
  const std::string& m9() const;
  void set_m9(const std::string& value);
  void set_m9(std::string&& value);
  void set_m9(const char* value);
  void set_m9(const char* value, size_t size);
  std::string* mutable_m9();
  std::string* release_m9();
  void set_allocated_m9(std::string* m9);
  private:
  const std::string& _internal_m9() const;
  void _internal_set_m9(const std::string& value);
  std::string* _internal_mutable_m9();
  public:

  // required string m10 = 11;
  bool has_m10() const;
  private:
  bool _internal_has_m10() const;
  public:
  void clear_m10();
  const std::string& m10() const;
  void set_m10(const std::string& value);
  void set_m10(std::string&& value);
  void set_m10(const char* value);
  void set_m10(const char* value, size_t size);
  std::string* mutable_m10();
  std::string* release_m10();
  void set_allocated_m10(std::string* m10);
  private:
  const std::string& _internal_m10() const;
  void _internal_set_m10(const std::string& value);
  std::string* _internal_mutable_m10();
  public:

  // required string m11 = 12;
  bool has_m11() const;
  private:
  bool _internal_has_m11() const;
  public:
  void clear_m11();
  const std::string& m11() const;
  void set_m11(const std::string& value);
  void set_m11(std::string&& value);
  void set_m11(const char* value);
  void set_m11(const char* value, size_t size);
  std::string* mutable_m11();
  std::string* release_m11();
  void set_allocated_m11(std::string* m11);
  private:
  const std::string& _internal_m11() const;
  void _internal_set_m11(const std::string& value);
  std::string* _internal_mutable_m11();
  public:

  // required string m12 = 13;
  bool has_m12() const;
  private:
  bool _internal_has_m12() const;
  public:
  void clear_m12();
  const std::string& m12() const;
  void set_m12(const std::string& value);
  void set_m12(std::string&& value);
  void set_m12(const char* value);
  void set_m12(const char* value, size_t size);
  std::string* mutable_m12();
  std::string* release_m12();
  void set_allocated_m12(std::string* m12);
  private:
  const std::string& _internal_m12() const;
  void _internal_set_m12(const std::string& value);
  std::string* _internal_mutable_m12();
  public:

  // required string m13 = 14;
  bool has_m13() const;
  private:
  bool _internal_has_m13() const;
  public:
  void clear_m13();
  const std::string& m13() const;
  void set_m13(const std::string& value);
  void set_m13(std::string&& value);
  void set_m13(const char* value);
  void set_m13(const char* value, size_t size);
  std::string* mutable_m13();
  std::string* release_m13();
  void set_allocated_m13(std::string* m13);
  private:
  const std::string& _internal_m13() const;
  void _internal_set_m13(const std::string& value);
  std::string* _internal_mutable_m13();
  public:

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo.Data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m11_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m12_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m13_;
  friend struct ::TableStruct_ukex_2eallmarketinfo_2eproto;
};
// -------------------------------------------------------------------

class allmarketinfo_Exchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo.Exchange) */ {
 public:
  allmarketinfo_Exchange();
  virtual ~allmarketinfo_Exchange();

  allmarketinfo_Exchange(const allmarketinfo_Exchange& from);
  allmarketinfo_Exchange(allmarketinfo_Exchange&& from) noexcept
    : allmarketinfo_Exchange() {
    *this = ::std::move(from);
  }

  inline allmarketinfo_Exchange& operator=(const allmarketinfo_Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline allmarketinfo_Exchange& operator=(allmarketinfo_Exchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const allmarketinfo_Exchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allmarketinfo_Exchange* internal_default_instance() {
    return reinterpret_cast<const allmarketinfo_Exchange*>(
               &_allmarketinfo_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(allmarketinfo_Exchange& a, allmarketinfo_Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(allmarketinfo_Exchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline allmarketinfo_Exchange* New() const final {
    return CreateMaybeMessage<allmarketinfo_Exchange>(nullptr);
  }

  allmarketinfo_Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<allmarketinfo_Exchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const allmarketinfo_Exchange& from);
  void MergeFrom(const allmarketinfo_Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allmarketinfo_Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.allmarketinfo.Exchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eallmarketinfo_2eproto);
    return ::descriptor_table_ukex_2eallmarketinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBtcFieldNumber = 1,
    kEthFieldNumber = 2,
  };
  // required string btc = 1;
  bool has_btc() const;
  private:
  bool _internal_has_btc() const;
  public:
  void clear_btc();
  const std::string& btc() const;
  void set_btc(const std::string& value);
  void set_btc(std::string&& value);
  void set_btc(const char* value);
  void set_btc(const char* value, size_t size);
  std::string* mutable_btc();
  std::string* release_btc();
  void set_allocated_btc(std::string* btc);
  private:
  const std::string& _internal_btc() const;
  void _internal_set_btc(const std::string& value);
  std::string* _internal_mutable_btc();
  public:

  // required string eth = 2;
  bool has_eth() const;
  private:
  bool _internal_has_eth() const;
  public:
  void clear_eth();
  const std::string& eth() const;
  void set_eth(const std::string& value);
  void set_eth(std::string&& value);
  void set_eth(const char* value);
  void set_eth(const char* value, size_t size);
  std::string* mutable_eth();
  std::string* release_eth();
  void set_allocated_eth(std::string* eth);
  private:
  const std::string& _internal_eth() const;
  void _internal_set_eth(const std::string& value);
  std::string* _internal_mutable_eth();
  public:

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo.Exchange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr btc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_;
  friend struct ::TableStruct_ukex_2eallmarketinfo_2eproto;
};
// -------------------------------------------------------------------

class allmarketinfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo) */ {
 public:
  allmarketinfo();
  virtual ~allmarketinfo();

  allmarketinfo(const allmarketinfo& from);
  allmarketinfo(allmarketinfo&& from) noexcept
    : allmarketinfo() {
    *this = ::std::move(from);
  }

  inline allmarketinfo& operator=(const allmarketinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline allmarketinfo& operator=(allmarketinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const allmarketinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const allmarketinfo* internal_default_instance() {
    return reinterpret_cast<const allmarketinfo*>(
               &_allmarketinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(allmarketinfo& a, allmarketinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(allmarketinfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline allmarketinfo* New() const final {
    return CreateMaybeMessage<allmarketinfo>(nullptr);
  }

  allmarketinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<allmarketinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const allmarketinfo& from);
  void MergeFrom(const allmarketinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(allmarketinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.allmarketinfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eallmarketinfo_2eproto);
    return ::descriptor_table_ukex_2eallmarketinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef allmarketinfo_Data Data;
  typedef allmarketinfo_Exchange Exchange;

  typedef allmarketinfo_CONST CONST;
  static constexpr CONST CMD =
    allmarketinfo_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return allmarketinfo_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    allmarketinfo_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    allmarketinfo_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    allmarketinfo_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return allmarketinfo_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return allmarketinfo_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return allmarketinfo_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
    kTokenFieldNumber = 5,
    kExchangeFieldNumber = 4,
    kMarketidFieldNumber = 3,
  };
  // repeated .ukex.allmarketinfo.Data data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ukex::allmarketinfo_Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::allmarketinfo_Data >*
      mutable_data();
  private:
  const ::ukex::allmarketinfo_Data& _internal_data(int index) const;
  ::ukex::allmarketinfo_Data* _internal_add_data();
  public:
  const ::ukex::allmarketinfo_Data& data(int index) const;
  ::ukex::allmarketinfo_Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::allmarketinfo_Data >&
      data() const;

  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string token = 5;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required .ukex.allmarketinfo.Exchange exchange = 4;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  const ::ukex::allmarketinfo_Exchange& exchange() const;
  ::ukex::allmarketinfo_Exchange* release_exchange();
  ::ukex::allmarketinfo_Exchange* mutable_exchange();
  void set_allocated_exchange(::ukex::allmarketinfo_Exchange* exchange);
  private:
  const ::ukex::allmarketinfo_Exchange& _internal_exchange() const;
  ::ukex::allmarketinfo_Exchange* _internal_mutable_exchange();
  public:

  // required uint64 marketid = 3;
  bool has_marketid() const;
  private:
  bool _internal_has_marketid() const;
  public:
  void clear_marketid();
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid() const;
  void set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_marketid() const;
  void _internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::allmarketinfo_Data > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::ukex::allmarketinfo_Exchange* exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid_;
  friend struct ::TableStruct_ukex_2eallmarketinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// allmarketinfo_Data

// required string m0 = 1;
inline bool allmarketinfo_Data::_internal_has_m0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m0() const {
  return _internal_has_m0();
}
inline void allmarketinfo_Data::clear_m0() {
  m0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& allmarketinfo_Data::m0() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m0)
  return _internal_m0();
}
inline void allmarketinfo_Data::set_m0(const std::string& value) {
  _internal_set_m0(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m0)
}
inline std::string* allmarketinfo_Data::mutable_m0() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m0)
  return _internal_mutable_m0();
}
inline const std::string& allmarketinfo_Data::_internal_m0() const {
  return m0_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m0(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m0)
}
inline void allmarketinfo_Data::set_m0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m0)
}
inline void allmarketinfo_Data::set_m0(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m0)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m0() {
  _has_bits_[0] |= 0x00000001u;
  return m0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m0() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m0)
  if (!has_m0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m0_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m0(std::string* m0) {
  if (m0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m0);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m0)
}

// required string m1 = 2;
inline bool allmarketinfo_Data::_internal_has_m1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m1() const {
  return _internal_has_m1();
}
inline void allmarketinfo_Data::clear_m1() {
  m1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& allmarketinfo_Data::m1() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m1)
  return _internal_m1();
}
inline void allmarketinfo_Data::set_m1(const std::string& value) {
  _internal_set_m1(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m1)
}
inline std::string* allmarketinfo_Data::mutable_m1() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m1)
  return _internal_mutable_m1();
}
inline const std::string& allmarketinfo_Data::_internal_m1() const {
  return m1_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m1)
}
inline void allmarketinfo_Data::set_m1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m1)
}
inline void allmarketinfo_Data::set_m1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m1)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m1() {
  _has_bits_[0] |= 0x00000002u;
  return m1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m1() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m1)
  if (!has_m1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m1(std::string* m1) {
  if (m1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m1);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m1)
}

// required string m2 = 3;
inline bool allmarketinfo_Data::_internal_has_m2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m2() const {
  return _internal_has_m2();
}
inline void allmarketinfo_Data::clear_m2() {
  m2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& allmarketinfo_Data::m2() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m2)
  return _internal_m2();
}
inline void allmarketinfo_Data::set_m2(const std::string& value) {
  _internal_set_m2(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m2)
}
inline std::string* allmarketinfo_Data::mutable_m2() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m2)
  return _internal_mutable_m2();
}
inline const std::string& allmarketinfo_Data::_internal_m2() const {
  return m2_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  m2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  m2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m2)
}
inline void allmarketinfo_Data::set_m2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  m2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m2)
}
inline void allmarketinfo_Data::set_m2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  m2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m2)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m2() {
  _has_bits_[0] |= 0x00000004u;
  return m2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m2() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m2)
  if (!has_m2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return m2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m2(std::string* m2) {
  if (m2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  m2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m2);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m2)
}

// required string m3 = 4;
inline bool allmarketinfo_Data::_internal_has_m3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m3() const {
  return _internal_has_m3();
}
inline void allmarketinfo_Data::clear_m3() {
  m3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& allmarketinfo_Data::m3() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m3)
  return _internal_m3();
}
inline void allmarketinfo_Data::set_m3(const std::string& value) {
  _internal_set_m3(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m3)
}
inline std::string* allmarketinfo_Data::mutable_m3() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m3)
  return _internal_mutable_m3();
}
inline const std::string& allmarketinfo_Data::_internal_m3() const {
  return m3_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  m3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  m3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m3)
}
inline void allmarketinfo_Data::set_m3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  m3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m3)
}
inline void allmarketinfo_Data::set_m3(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  m3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m3)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m3() {
  _has_bits_[0] |= 0x00000008u;
  return m3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m3() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m3)
  if (!has_m3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return m3_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m3(std::string* m3) {
  if (m3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  m3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m3);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m3)
}

// required string m4 = 5;
inline bool allmarketinfo_Data::_internal_has_m4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m4() const {
  return _internal_has_m4();
}
inline void allmarketinfo_Data::clear_m4() {
  m4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& allmarketinfo_Data::m4() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m4)
  return _internal_m4();
}
inline void allmarketinfo_Data::set_m4(const std::string& value) {
  _internal_set_m4(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m4)
}
inline std::string* allmarketinfo_Data::mutable_m4() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m4)
  return _internal_mutable_m4();
}
inline const std::string& allmarketinfo_Data::_internal_m4() const {
  return m4_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  m4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  m4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m4)
}
inline void allmarketinfo_Data::set_m4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  m4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m4)
}
inline void allmarketinfo_Data::set_m4(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  m4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m4)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m4() {
  _has_bits_[0] |= 0x00000010u;
  return m4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m4() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m4)
  if (!has_m4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return m4_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m4(std::string* m4) {
  if (m4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  m4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m4);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m4)
}

// required string m5 = 6;
inline bool allmarketinfo_Data::_internal_has_m5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m5() const {
  return _internal_has_m5();
}
inline void allmarketinfo_Data::clear_m5() {
  m5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& allmarketinfo_Data::m5() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m5)
  return _internal_m5();
}
inline void allmarketinfo_Data::set_m5(const std::string& value) {
  _internal_set_m5(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m5)
}
inline std::string* allmarketinfo_Data::mutable_m5() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m5)
  return _internal_mutable_m5();
}
inline const std::string& allmarketinfo_Data::_internal_m5() const {
  return m5_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  m5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  m5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m5)
}
inline void allmarketinfo_Data::set_m5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  m5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m5)
}
inline void allmarketinfo_Data::set_m5(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  m5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m5)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m5() {
  _has_bits_[0] |= 0x00000020u;
  return m5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m5() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m5)
  if (!has_m5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return m5_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m5(std::string* m5) {
  if (m5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  m5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m5);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m5)
}

// required string m6 = 7;
inline bool allmarketinfo_Data::_internal_has_m6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m6() const {
  return _internal_has_m6();
}
inline void allmarketinfo_Data::clear_m6() {
  m6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& allmarketinfo_Data::m6() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m6)
  return _internal_m6();
}
inline void allmarketinfo_Data::set_m6(const std::string& value) {
  _internal_set_m6(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m6)
}
inline std::string* allmarketinfo_Data::mutable_m6() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m6)
  return _internal_mutable_m6();
}
inline const std::string& allmarketinfo_Data::_internal_m6() const {
  return m6_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m6(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  m6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m6(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  m6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m6)
}
inline void allmarketinfo_Data::set_m6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  m6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m6)
}
inline void allmarketinfo_Data::set_m6(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  m6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m6)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m6() {
  _has_bits_[0] |= 0x00000040u;
  return m6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m6() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m6)
  if (!has_m6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return m6_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m6(std::string* m6) {
  if (m6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  m6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m6);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m6)
}

// required string m7 = 8;
inline bool allmarketinfo_Data::_internal_has_m7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m7() const {
  return _internal_has_m7();
}
inline void allmarketinfo_Data::clear_m7() {
  m7_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& allmarketinfo_Data::m7() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m7)
  return _internal_m7();
}
inline void allmarketinfo_Data::set_m7(const std::string& value) {
  _internal_set_m7(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m7)
}
inline std::string* allmarketinfo_Data::mutable_m7() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m7)
  return _internal_mutable_m7();
}
inline const std::string& allmarketinfo_Data::_internal_m7() const {
  return m7_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m7(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  m7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m7(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  m7_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m7)
}
inline void allmarketinfo_Data::set_m7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  m7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m7)
}
inline void allmarketinfo_Data::set_m7(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  m7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m7)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m7() {
  _has_bits_[0] |= 0x00000080u;
  return m7_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m7() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m7)
  if (!has_m7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return m7_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m7(std::string* m7) {
  if (m7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  m7_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m7);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m7)
}

// required string m8 = 9;
inline bool allmarketinfo_Data::_internal_has_m8() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m8() const {
  return _internal_has_m8();
}
inline void allmarketinfo_Data::clear_m8() {
  m8_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& allmarketinfo_Data::m8() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m8)
  return _internal_m8();
}
inline void allmarketinfo_Data::set_m8(const std::string& value) {
  _internal_set_m8(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m8)
}
inline std::string* allmarketinfo_Data::mutable_m8() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m8)
  return _internal_mutable_m8();
}
inline const std::string& allmarketinfo_Data::_internal_m8() const {
  return m8_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m8(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  m8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m8(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  m8_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m8)
}
inline void allmarketinfo_Data::set_m8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  m8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m8)
}
inline void allmarketinfo_Data::set_m8(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  m8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m8)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m8() {
  _has_bits_[0] |= 0x00000100u;
  return m8_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m8() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m8)
  if (!has_m8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return m8_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m8(std::string* m8) {
  if (m8 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  m8_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m8);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m8)
}

// required string m9 = 10;
inline bool allmarketinfo_Data::_internal_has_m9() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m9() const {
  return _internal_has_m9();
}
inline void allmarketinfo_Data::clear_m9() {
  m9_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& allmarketinfo_Data::m9() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m9)
  return _internal_m9();
}
inline void allmarketinfo_Data::set_m9(const std::string& value) {
  _internal_set_m9(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m9)
}
inline std::string* allmarketinfo_Data::mutable_m9() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m9)
  return _internal_mutable_m9();
}
inline const std::string& allmarketinfo_Data::_internal_m9() const {
  return m9_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m9(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  m9_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m9(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  m9_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m9)
}
inline void allmarketinfo_Data::set_m9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  m9_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m9)
}
inline void allmarketinfo_Data::set_m9(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  m9_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m9)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m9() {
  _has_bits_[0] |= 0x00000200u;
  return m9_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m9() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m9)
  if (!has_m9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return m9_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m9(std::string* m9) {
  if (m9 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  m9_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m9);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m9)
}

// required string m10 = 11;
inline bool allmarketinfo_Data::_internal_has_m10() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m10() const {
  return _internal_has_m10();
}
inline void allmarketinfo_Data::clear_m10() {
  m10_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& allmarketinfo_Data::m10() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m10)
  return _internal_m10();
}
inline void allmarketinfo_Data::set_m10(const std::string& value) {
  _internal_set_m10(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m10)
}
inline std::string* allmarketinfo_Data::mutable_m10() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m10)
  return _internal_mutable_m10();
}
inline const std::string& allmarketinfo_Data::_internal_m10() const {
  return m10_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m10(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  m10_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m10(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  m10_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m10)
}
inline void allmarketinfo_Data::set_m10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  m10_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m10)
}
inline void allmarketinfo_Data::set_m10(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  m10_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m10)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m10() {
  _has_bits_[0] |= 0x00000400u;
  return m10_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m10() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m10)
  if (!has_m10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return m10_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m10(std::string* m10) {
  if (m10 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  m10_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m10);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m10)
}

// required string m11 = 12;
inline bool allmarketinfo_Data::_internal_has_m11() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m11() const {
  return _internal_has_m11();
}
inline void allmarketinfo_Data::clear_m11() {
  m11_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& allmarketinfo_Data::m11() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m11)
  return _internal_m11();
}
inline void allmarketinfo_Data::set_m11(const std::string& value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m11)
}
inline std::string* allmarketinfo_Data::mutable_m11() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m11)
  return _internal_mutable_m11();
}
inline const std::string& allmarketinfo_Data::_internal_m11() const {
  return m11_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m11(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  m11_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m11(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  m11_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m11)
}
inline void allmarketinfo_Data::set_m11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  m11_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m11)
}
inline void allmarketinfo_Data::set_m11(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  m11_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m11)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m11() {
  _has_bits_[0] |= 0x00000800u;
  return m11_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m11() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m11)
  if (!has_m11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return m11_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m11(std::string* m11) {
  if (m11 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  m11_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m11);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m11)
}

// required string m12 = 13;
inline bool allmarketinfo_Data::_internal_has_m12() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m12() const {
  return _internal_has_m12();
}
inline void allmarketinfo_Data::clear_m12() {
  m12_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& allmarketinfo_Data::m12() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m12)
  return _internal_m12();
}
inline void allmarketinfo_Data::set_m12(const std::string& value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m12)
}
inline std::string* allmarketinfo_Data::mutable_m12() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m12)
  return _internal_mutable_m12();
}
inline const std::string& allmarketinfo_Data::_internal_m12() const {
  return m12_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m12(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  m12_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m12(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  m12_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m12)
}
inline void allmarketinfo_Data::set_m12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  m12_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m12)
}
inline void allmarketinfo_Data::set_m12(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  m12_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m12)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m12() {
  _has_bits_[0] |= 0x00001000u;
  return m12_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m12() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m12)
  if (!has_m12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return m12_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m12(std::string* m12) {
  if (m12 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  m12_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m12);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m12)
}

// required string m13 = 14;
inline bool allmarketinfo_Data::_internal_has_m13() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool allmarketinfo_Data::has_m13() const {
  return _internal_has_m13();
}
inline void allmarketinfo_Data::clear_m13() {
  m13_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& allmarketinfo_Data::m13() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m13)
  return _internal_m13();
}
inline void allmarketinfo_Data::set_m13(const std::string& value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m13)
}
inline std::string* allmarketinfo_Data::mutable_m13() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m13)
  return _internal_mutable_m13();
}
inline const std::string& allmarketinfo_Data::_internal_m13() const {
  return m13_.GetNoArena();
}
inline void allmarketinfo_Data::_internal_set_m13(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  m13_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Data::set_m13(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  m13_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Data.m13)
}
inline void allmarketinfo_Data::set_m13(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  m13_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m13)
}
inline void allmarketinfo_Data::set_m13(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  m13_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m13)
}
inline std::string* allmarketinfo_Data::_internal_mutable_m13() {
  _has_bits_[0] |= 0x00002000u;
  return m13_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Data::release_m13() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m13)
  if (!has_m13()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return m13_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m13(std::string* m13) {
  if (m13 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  m13_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m13);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m13)
}

// -------------------------------------------------------------------

// allmarketinfo_Exchange

// required string btc = 1;
inline bool allmarketinfo_Exchange::_internal_has_btc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool allmarketinfo_Exchange::has_btc() const {
  return _internal_has_btc();
}
inline void allmarketinfo_Exchange::clear_btc() {
  btc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& allmarketinfo_Exchange::btc() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.btc)
  return _internal_btc();
}
inline void allmarketinfo_Exchange::set_btc(const std::string& value) {
  _internal_set_btc(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.btc)
}
inline std::string* allmarketinfo_Exchange::mutable_btc() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.btc)
  return _internal_mutable_btc();
}
inline const std::string& allmarketinfo_Exchange::_internal_btc() const {
  return btc_.GetNoArena();
}
inline void allmarketinfo_Exchange::_internal_set_btc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  btc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Exchange::set_btc(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  btc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Exchange.btc)
}
inline void allmarketinfo_Exchange::set_btc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  btc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.btc)
}
inline void allmarketinfo_Exchange::set_btc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  btc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.btc)
}
inline std::string* allmarketinfo_Exchange::_internal_mutable_btc() {
  _has_bits_[0] |= 0x00000001u;
  return btc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Exchange::release_btc() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.btc)
  if (!has_btc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return btc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_allocated_btc(std::string* btc) {
  if (btc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  btc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), btc);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.btc)
}

// required string eth = 2;
inline bool allmarketinfo_Exchange::_internal_has_eth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool allmarketinfo_Exchange::has_eth() const {
  return _internal_has_eth();
}
inline void allmarketinfo_Exchange::clear_eth() {
  eth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& allmarketinfo_Exchange::eth() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.eth)
  return _internal_eth();
}
inline void allmarketinfo_Exchange::set_eth(const std::string& value) {
  _internal_set_eth(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.eth)
}
inline std::string* allmarketinfo_Exchange::mutable_eth() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.eth)
  return _internal_mutable_eth();
}
inline const std::string& allmarketinfo_Exchange::_internal_eth() const {
  return eth_.GetNoArena();
}
inline void allmarketinfo_Exchange::_internal_set_eth(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  eth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo_Exchange::set_eth(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  eth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.Exchange.eth)
}
inline void allmarketinfo_Exchange::set_eth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  eth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.eth)
}
inline void allmarketinfo_Exchange::set_eth(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  eth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.eth)
}
inline std::string* allmarketinfo_Exchange::_internal_mutable_eth() {
  _has_bits_[0] |= 0x00000002u;
  return eth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo_Exchange::release_eth() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.eth)
  if (!has_eth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return eth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_allocated_eth(std::string* eth) {
  if (eth != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  eth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eth);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.eth)
}

// -------------------------------------------------------------------

// allmarketinfo

// required string type = 1;
inline bool allmarketinfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool allmarketinfo::has_type() const {
  return _internal_has_type();
}
inline void allmarketinfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& allmarketinfo::type() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.type)
  return _internal_type();
}
inline void allmarketinfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.type)
}
inline std::string* allmarketinfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.type)
  return _internal_mutable_type();
}
inline const std::string& allmarketinfo::_internal_type() const {
  return type_.GetNoArena();
}
inline void allmarketinfo::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.type)
}
inline void allmarketinfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.type)
}
inline void allmarketinfo::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.type)
}
inline std::string* allmarketinfo::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo::release_type() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.type)
}

// repeated .ukex.allmarketinfo.Data data = 2;
inline int allmarketinfo::_internal_data_size() const {
  return data_.size();
}
inline int allmarketinfo::data_size() const {
  return _internal_data_size();
}
inline void allmarketinfo::clear_data() {
  data_.Clear();
}
inline ::ukex::allmarketinfo_Data* allmarketinfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::allmarketinfo_Data >*
allmarketinfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.allmarketinfo.data)
  return &data_;
}
inline const ::ukex::allmarketinfo_Data& allmarketinfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ukex::allmarketinfo_Data& allmarketinfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.data)
  return _internal_data(index);
}
inline ::ukex::allmarketinfo_Data* allmarketinfo::_internal_add_data() {
  return data_.Add();
}
inline ::ukex::allmarketinfo_Data* allmarketinfo::add_data() {
  // @@protoc_insertion_point(field_add:ukex.allmarketinfo.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::allmarketinfo_Data >&
allmarketinfo::data() const {
  // @@protoc_insertion_point(field_list:ukex.allmarketinfo.data)
  return data_;
}

// required uint64 marketid = 3;
inline bool allmarketinfo::_internal_has_marketid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool allmarketinfo::has_marketid() const {
  return _internal_has_marketid();
}
inline void allmarketinfo::clear_marketid() {
  marketid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 allmarketinfo::_internal_marketid() const {
  return marketid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 allmarketinfo::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.marketid)
  return _internal_marketid();
}
inline void allmarketinfo::_internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  marketid_ = value;
}
inline void allmarketinfo::set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.marketid)
}

// required .ukex.allmarketinfo.Exchange exchange = 4;
inline bool allmarketinfo::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || exchange_ != nullptr);
  return value;
}
inline bool allmarketinfo::has_exchange() const {
  return _internal_has_exchange();
}
inline void allmarketinfo::clear_exchange() {
  if (exchange_ != nullptr) exchange_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ukex::allmarketinfo_Exchange& allmarketinfo::_internal_exchange() const {
  const ::ukex::allmarketinfo_Exchange* p = exchange_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::allmarketinfo_Exchange*>(
      &::ukex::_allmarketinfo_Exchange_default_instance_);
}
inline const ::ukex::allmarketinfo_Exchange& allmarketinfo::exchange() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.exchange)
  return _internal_exchange();
}
inline ::ukex::allmarketinfo_Exchange* allmarketinfo::release_exchange() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.exchange)
  _has_bits_[0] &= ~0x00000004u;
  ::ukex::allmarketinfo_Exchange* temp = exchange_;
  exchange_ = nullptr;
  return temp;
}
inline ::ukex::allmarketinfo_Exchange* allmarketinfo::_internal_mutable_exchange() {
  _has_bits_[0] |= 0x00000004u;
  if (exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::allmarketinfo_Exchange>(GetArenaNoVirtual());
    exchange_ = p;
  }
  return exchange_;
}
inline ::ukex::allmarketinfo_Exchange* allmarketinfo::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.exchange)
  return _internal_mutable_exchange();
}
inline void allmarketinfo::set_allocated_exchange(::ukex::allmarketinfo_Exchange* exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exchange_;
  }
  if (exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exchange_ = exchange;
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.exchange)
}

// required string token = 5;
inline bool allmarketinfo::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool allmarketinfo::has_token() const {
  return _internal_has_token();
}
inline void allmarketinfo::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& allmarketinfo::token() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.token)
  return _internal_token();
}
inline void allmarketinfo::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.token)
}
inline std::string* allmarketinfo::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.token)
  return _internal_mutable_token();
}
inline const std::string& allmarketinfo::_internal_token() const {
  return token_.GetNoArena();
}
inline void allmarketinfo::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void allmarketinfo::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.allmarketinfo.token)
}
inline void allmarketinfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.token)
}
inline void allmarketinfo::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.token)
}
inline std::string* allmarketinfo::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* allmarketinfo::release_token() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::allmarketinfo_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::allmarketinfo_CONST>() {
  return ::ukex::allmarketinfo_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2eallmarketinfo_2eproto
