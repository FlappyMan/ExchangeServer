// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.uptrade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2euptrade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2euptrade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2euptrade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2euptrade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2euptrade_2eproto;
namespace ukex {
class uptrade;
class uptradeDefaultTypeInternal;
extern uptradeDefaultTypeInternal _uptrade_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::uptrade* Arena::CreateMaybeMessage<::ukex::uptrade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum uptrade_CONST : int {
  uptrade_CONST_CMD = 100
};
bool uptrade_CONST_IsValid(int value);
constexpr uptrade_CONST uptrade_CONST_CONST_MIN = uptrade_CONST_CMD;
constexpr uptrade_CONST uptrade_CONST_CONST_MAX = uptrade_CONST_CMD;
constexpr int uptrade_CONST_CONST_ARRAYSIZE = uptrade_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* uptrade_CONST_descriptor();
template<typename T>
inline const std::string& uptrade_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, uptrade_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function uptrade_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    uptrade_CONST_descriptor(), enum_t_value);
}
inline bool uptrade_CONST_Parse(
    const std::string& name, uptrade_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<uptrade_CONST>(
    uptrade_CONST_descriptor(), name, value);
}
// ===================================================================

class uptrade :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.uptrade) */ {
 public:
  uptrade();
  virtual ~uptrade();

  uptrade(const uptrade& from);
  uptrade(uptrade&& from) noexcept
    : uptrade() {
    *this = ::std::move(from);
  }

  inline uptrade& operator=(const uptrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline uptrade& operator=(uptrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const uptrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const uptrade* internal_default_instance() {
    return reinterpret_cast<const uptrade*>(
               &_uptrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(uptrade& a, uptrade& b) {
    a.Swap(&b);
  }
  inline void Swap(uptrade* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uptrade* New() const final {
    return CreateMaybeMessage<uptrade>(nullptr);
  }

  uptrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uptrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const uptrade& from);
  void MergeFrom(const uptrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uptrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.uptrade";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2euptrade_2eproto);
    return ::descriptor_table_ukex_2euptrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef uptrade_CONST CONST;
  static constexpr CONST CMD =
    uptrade_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return uptrade_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    uptrade_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    uptrade_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    uptrade_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return uptrade_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return uptrade_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return uptrade_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kPaypasswordFieldNumber = 3,
    kPriceFieldNumber = 5,
    kNumFieldNumber = 6,
    kUidFieldNumber = 1,
    kMarketidFieldNumber = 4,
    kOrderidFieldNumber = 8,
    kUptradeidFieldNumber = 9,
    kTypeFieldNumber = 7,
  };
  // required string token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required string paypassword = 3;
  bool has_paypassword() const;
  private:
  bool _internal_has_paypassword() const;
  public:
  void clear_paypassword();
  const std::string& paypassword() const;
  void set_paypassword(const std::string& value);
  void set_paypassword(std::string&& value);
  void set_paypassword(const char* value);
  void set_paypassword(const char* value, size_t size);
  std::string* mutable_paypassword();
  std::string* release_paypassword();
  void set_allocated_paypassword(std::string* paypassword);
  private:
  const std::string& _internal_paypassword() const;
  void _internal_set_paypassword(const std::string& value);
  std::string* _internal_mutable_paypassword();
  public:

  // required string price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // required string num = 6;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // required uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 marketid = 4;
  bool has_marketid() const;
  private:
  bool _internal_has_marketid() const;
  public:
  void clear_marketid();
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid() const;
  void set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_marketid() const;
  void _internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 orderid = 8;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 uptradeid = 9;
  bool has_uptradeid() const;
  private:
  bool _internal_has_uptradeid() const;
  public:
  void clear_uptradeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uptradeid() const;
  void set_uptradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uptradeid() const;
  void _internal_set_uptradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.uptrade)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paypassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uptradeid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_ukex_2euptrade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// uptrade

// required uint64 uid = 1;
inline bool uptrade::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool uptrade::has_uid() const {
  return _internal_has_uid();
}
inline void uptrade::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::uid() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.uid)
  return _internal_uid();
}
inline void uptrade::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  uid_ = value;
}
inline void uptrade::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.uid)
}

// required string token = 2;
inline bool uptrade::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool uptrade::has_token() const {
  return _internal_has_token();
}
inline void uptrade::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& uptrade::token() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.token)
  return _internal_token();
}
inline void uptrade::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.token)
}
inline std::string* uptrade::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.uptrade.token)
  return _internal_mutable_token();
}
inline const std::string& uptrade::_internal_token() const {
  return token_.GetNoArena();
}
inline void uptrade::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptrade::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptrade.token)
}
inline void uptrade::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptrade.token)
}
inline void uptrade::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptrade.token)
}
inline std::string* uptrade::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptrade::release_token() {
  // @@protoc_insertion_point(field_release:ukex.uptrade.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptrade::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptrade.token)
}

// required string paypassword = 3;
inline bool uptrade::_internal_has_paypassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool uptrade::has_paypassword() const {
  return _internal_has_paypassword();
}
inline void uptrade::clear_paypassword() {
  paypassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& uptrade::paypassword() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.paypassword)
  return _internal_paypassword();
}
inline void uptrade::set_paypassword(const std::string& value) {
  _internal_set_paypassword(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.paypassword)
}
inline std::string* uptrade::mutable_paypassword() {
  // @@protoc_insertion_point(field_mutable:ukex.uptrade.paypassword)
  return _internal_mutable_paypassword();
}
inline const std::string& uptrade::_internal_paypassword() const {
  return paypassword_.GetNoArena();
}
inline void uptrade::_internal_set_paypassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptrade::set_paypassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptrade.paypassword)
}
inline void uptrade::set_paypassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptrade.paypassword)
}
inline void uptrade::set_paypassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptrade.paypassword)
}
inline std::string* uptrade::_internal_mutable_paypassword() {
  _has_bits_[0] |= 0x00000002u;
  return paypassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptrade::release_paypassword() {
  // @@protoc_insertion_point(field_release:ukex.uptrade.paypassword)
  if (!has_paypassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return paypassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptrade::set_allocated_paypassword(std::string* paypassword) {
  if (paypassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  paypassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paypassword);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptrade.paypassword)
}

// required uint64 marketid = 4;
inline bool uptrade::_internal_has_marketid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool uptrade::has_marketid() const {
  return _internal_has_marketid();
}
inline void uptrade::clear_marketid() {
  marketid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::_internal_marketid() const {
  return marketid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.marketid)
  return _internal_marketid();
}
inline void uptrade::_internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  marketid_ = value;
}
inline void uptrade::set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.marketid)
}

// required string price = 5;
inline bool uptrade::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool uptrade::has_price() const {
  return _internal_has_price();
}
inline void uptrade::clear_price() {
  price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& uptrade::price() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.price)
  return _internal_price();
}
inline void uptrade::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.price)
}
inline std::string* uptrade::mutable_price() {
  // @@protoc_insertion_point(field_mutable:ukex.uptrade.price)
  return _internal_mutable_price();
}
inline const std::string& uptrade::_internal_price() const {
  return price_.GetNoArena();
}
inline void uptrade::_internal_set_price(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptrade::set_price(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptrade.price)
}
inline void uptrade::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptrade.price)
}
inline void uptrade::set_price(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptrade.price)
}
inline std::string* uptrade::_internal_mutable_price() {
  _has_bits_[0] |= 0x00000004u;
  return price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptrade::release_price() {
  // @@protoc_insertion_point(field_release:ukex.uptrade.price)
  if (!has_price()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return price_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptrade::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptrade.price)
}

// required string num = 6;
inline bool uptrade::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool uptrade::has_num() const {
  return _internal_has_num();
}
inline void uptrade::clear_num() {
  num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& uptrade::num() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.num)
  return _internal_num();
}
inline void uptrade::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.num)
}
inline std::string* uptrade::mutable_num() {
  // @@protoc_insertion_point(field_mutable:ukex.uptrade.num)
  return _internal_mutable_num();
}
inline const std::string& uptrade::_internal_num() const {
  return num_.GetNoArena();
}
inline void uptrade::_internal_set_num(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptrade::set_num(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  num_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptrade.num)
}
inline void uptrade::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptrade.num)
}
inline void uptrade::set_num(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptrade.num)
}
inline std::string* uptrade::_internal_mutable_num() {
  _has_bits_[0] |= 0x00000008u;
  return num_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptrade::release_num() {
  // @@protoc_insertion_point(field_release:ukex.uptrade.num)
  if (!has_num()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return num_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptrade::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  num_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptrade.num)
}

// required uint32 type = 7;
inline bool uptrade::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool uptrade::has_type() const {
  return _internal_has_type();
}
inline void uptrade::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uptrade::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uptrade::type() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.type)
  return _internal_type();
}
inline void uptrade::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
}
inline void uptrade::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.type)
}

// required uint64 orderid = 8;
inline bool uptrade::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool uptrade::has_orderid() const {
  return _internal_has_orderid();
}
inline void uptrade::clear_orderid() {
  orderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::orderid() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.orderid)
  return _internal_orderid();
}
inline void uptrade::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  orderid_ = value;
}
inline void uptrade::set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.orderid)
}

// required uint64 uptradeid = 9;
inline bool uptrade::_internal_has_uptradeid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool uptrade::has_uptradeid() const {
  return _internal_has_uptradeid();
}
inline void uptrade::clear_uptradeid() {
  uptradeid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::_internal_uptradeid() const {
  return uptradeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptrade::uptradeid() const {
  // @@protoc_insertion_point(field_get:ukex.uptrade.uptradeid)
  return _internal_uptradeid();
}
inline void uptrade::_internal_set_uptradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  uptradeid_ = value;
}
inline void uptrade::set_uptradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uptradeid(value);
  // @@protoc_insertion_point(field_set:ukex.uptrade.uptradeid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::uptrade_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::uptrade_CONST>() {
  return ::ukex::uptrade_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2euptrade_2eproto
