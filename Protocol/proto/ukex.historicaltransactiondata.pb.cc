// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.historicaltransactiondata.proto

#include "ukex.historicaltransactiondata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukex_2ehistoricaltransactiondata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2ehistoricaltransactiondata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto;
namespace ukex {
class historicaltransactiondata_Data_TradeLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<historicaltransactiondata_Data_TradeLog> _instance;
} _historicaltransactiondata_Data_TradeLog_default_instance_;
class historicaltransactiondata_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<historicaltransactiondata_Data> _instance;
} _historicaltransactiondata_Data_default_instance_;
class historicaltransactiondataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<historicaltransactiondata> _instance;
} _historicaltransactiondata_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_historicaltransactiondata_default_instance_;
    new (ptr) ::ukex::historicaltransactiondata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::historicaltransactiondata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto}, {
      &scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto.base,}};

static void InitDefaultsscc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_historicaltransactiondata_Data_default_instance_;
    new (ptr) ::ukex::historicaltransactiondata_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::historicaltransactiondata_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto}, {
      &scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto.base,}};

static void InitDefaultsscc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_historicaltransactiondata_Data_TradeLog_default_instance_;
    new (ptr) ::ukex::historicaltransactiondata_Data_TradeLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::historicaltransactiondata_Data_TradeLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2ehistoricaltransactiondata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2ehistoricaltransactiondata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2ehistoricaltransactiondata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2ehistoricaltransactiondata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, tradeid_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, addtime_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, type_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, price_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, mum_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, num_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, buyorderid_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data_TradeLog, sellorderid_),
  5,
  0,
  1,
  6,
  2,
  3,
  4,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata_Data, tradelog_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata, type_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata, data_),
  PROTOBUF_FIELD_OFFSET(::ukex::historicaltransactiondata, token_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::ukex::historicaltransactiondata_Data_TradeLog)},
  { 23, 29, sizeof(::ukex::historicaltransactiondata_Data)},
  { 30, 38, sizeof(::ukex::historicaltransactiondata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_historicaltransactiondata_Data_TradeLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_historicaltransactiondata_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_historicaltransactiondata_default_instance_),
};

const char descriptor_table_protodef_ukex_2ehistoricaltransactiondata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$ukex.historicaltransactiondata.proto\022\004"
  "ukex\"\352\002\n\031historicaltransactiondata\022\014\n\004ty"
  "pe\030\001 \002(\t\0222\n\004data\030\002 \002(\0132$.ukex.historical"
  "transactiondata.Data\022\r\n\005token\030\003 \002(\t\032\351\001\n\004"
  "Data\022\?\n\010tradelog\030\001 \003(\0132-.ukex.historical"
  "transactiondata.Data.TradeLog\032\237\001\n\010TradeL"
  "og\022\017\n\007tradeid\030\001 \002(\004\022\017\n\007addtime\030\002 \002(\t\022\021\n\t"
  "timestamp\030\003 \002(\t\022\014\n\004type\030\004 \002(\004\022\r\n\005price\030\005"
  " \002(\t\022\013\n\003mum\030\006 \002(\t\022\013\n\003num\030\007 \002(\t\022\022\n\nbuyOrd"
  "erID\030\010 \002(\004\022\023\n\013sellOrderID\030\t \002(\004\"\020\n\005CONST"
  "\022\007\n\003CMD\020k"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_sccs[3] = {
  &scc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto.base,
  &scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto.base,
  &scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_once;
static bool descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ehistoricaltransactiondata_2eproto = {
  &descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_initialized, descriptor_table_protodef_ukex_2ehistoricaltransactiondata_2eproto, "ukex.historicaltransactiondata.proto", 409,
  &descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_once, descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_sccs, descriptor_table_ukex_2ehistoricaltransactiondata_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ukex_2ehistoricaltransactiondata_2eproto::offsets,
  file_level_metadata_ukex_2ehistoricaltransactiondata_2eproto, 3, file_level_enum_descriptors_ukex_2ehistoricaltransactiondata_2eproto, file_level_service_descriptors_ukex_2ehistoricaltransactiondata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2ehistoricaltransactiondata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2ehistoricaltransactiondata_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* historicaltransactiondata_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2ehistoricaltransactiondata_2eproto);
  return file_level_enum_descriptors_ukex_2ehistoricaltransactiondata_2eproto[0];
}
bool historicaltransactiondata_CONST_IsValid(int value) {
  switch (value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr historicaltransactiondata_CONST historicaltransactiondata::CMD;
constexpr historicaltransactiondata_CONST historicaltransactiondata::CONST_MIN;
constexpr historicaltransactiondata_CONST historicaltransactiondata::CONST_MAX;
constexpr int historicaltransactiondata::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void historicaltransactiondata_Data_TradeLog::InitAsDefaultInstance() {
}
class historicaltransactiondata_Data_TradeLog::_Internal {
 public:
  using HasBits = decltype(std::declval<historicaltransactiondata_Data_TradeLog>()._has_bits_);
  static void set_has_tradeid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_addtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buyorderid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sellorderid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

historicaltransactiondata_Data_TradeLog::historicaltransactiondata_Data_TradeLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata.Data.TradeLog)
}
historicaltransactiondata_Data_TradeLog::historicaltransactiondata_Data_TradeLog(const historicaltransactiondata_Data_TradeLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addtime()) {
    addtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addtime_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timestamp()) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_price()) {
    price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  mum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mum()) {
    mum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mum_);
  }
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_num()) {
    num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_);
  }
  ::memcpy(&tradeid_, &from.tradeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellorderid_) -
    reinterpret_cast<char*>(&tradeid_)) + sizeof(sellorderid_));
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata.Data.TradeLog)
}

void historicaltransactiondata_Data_TradeLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto.base);
  addtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tradeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellorderid_) -
      reinterpret_cast<char*>(&tradeid_)) + sizeof(sellorderid_));
}

historicaltransactiondata_Data_TradeLog::~historicaltransactiondata_Data_TradeLog() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata.Data.TradeLog)
  SharedDtor();
}

void historicaltransactiondata_Data_TradeLog::SharedDtor() {
  addtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void historicaltransactiondata_Data_TradeLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data_TradeLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_historicaltransactiondata_Data_TradeLog_ukex_2ehistoricaltransactiondata_2eproto.base);
  return *internal_default_instance();
}


void historicaltransactiondata_Data_TradeLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata.Data.TradeLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      addtime_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      price_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      mum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      num_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&tradeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyorderid_) -
        reinterpret_cast<char*>(&tradeid_)) + sizeof(buyorderid_));
  }
  sellorderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* historicaltransactiondata_Data_TradeLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 tradeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tradeid(&has_bits);
          tradeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string addtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_addtime(), ptr, ctx, "ukex.historicaltransactiondata.Data.TradeLog.addtime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_timestamp(), ptr, ctx, "ukex.historicaltransactiondata.Data.TradeLog.timestamp");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_price(), ptr, ctx, "ukex.historicaltransactiondata.Data.TradeLog.price");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string mum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_mum(), ptr, ctx, "ukex.historicaltransactiondata.Data.TradeLog.mum");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_num(), ptr, ctx, "ukex.historicaltransactiondata.Data.TradeLog.num");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 buyOrderID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_buyorderid(&has_bits);
          buyorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 sellOrderID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sellorderid(&has_bits);
          sellorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* historicaltransactiondata_Data_TradeLog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata.Data.TradeLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 tradeid = 1;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tradeid(), target);
  }

  // required string addtime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addtime().data(), static_cast<int>(this->_internal_addtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.addtime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addtime(), target);
  }

  // required string timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  // required uint64 type = 4;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_type(), target);
  }

  // required string price = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.price");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_price(), target);
  }

  // required string mum = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mum().data(), static_cast<int>(this->_internal_mum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.mum");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mum(), target);
  }

  // required string num = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.num");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_num(), target);
  }

  // required uint64 buyOrderID = 8;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_buyorderid(), target);
  }

  // required uint64 sellOrderID = 9;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_sellorderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata.Data.TradeLog)
  return target;
}

size_t historicaltransactiondata_Data_TradeLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.historicaltransactiondata.Data.TradeLog)
  size_t total_size = 0;

  if (has_addtime()) {
    // required string addtime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addtime());
  }

  if (has_timestamp()) {
    // required string timestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  if (has_price()) {
    // required string price = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  if (has_mum()) {
    // required string mum = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mum());
  }

  if (has_num()) {
    // required string num = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  if (has_tradeid()) {
    // required uint64 tradeid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tradeid());
  }

  if (has_type()) {
    // required uint64 type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_type());
  }

  if (has_buyorderid()) {
    // required uint64 buyOrderID = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buyorderid());
  }

  if (has_sellorderid()) {
    // required uint64 sellOrderID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sellorderid());
  }

  return total_size;
}
size_t historicaltransactiondata_Data_TradeLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata.Data.TradeLog)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string addtime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addtime());

    // required string timestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());

    // required string price = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());

    // required string mum = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mum());

    // required string num = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());

    // required uint64 tradeid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tradeid());

    // required uint64 type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_type());

    // required uint64 buyOrderID = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buyorderid());

    // required uint64 sellOrderID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sellorderid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void historicaltransactiondata_Data_TradeLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  GOOGLE_DCHECK_NE(&from, this);
  const historicaltransactiondata_Data_TradeLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<historicaltransactiondata_Data_TradeLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata.Data.TradeLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata.Data.TradeLog)
    MergeFrom(*source);
  }
}

void historicaltransactiondata_Data_TradeLog::MergeFrom(const historicaltransactiondata_Data_TradeLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      addtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addtime_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      mum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mum_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.num_);
    }
    if (cached_has_bits & 0x00000020u) {
      tradeid_ = from.tradeid_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      buyorderid_ = from.buyorderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_sellorderid(from._internal_sellorderid());
  }
}

void historicaltransactiondata_Data_TradeLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata_Data_TradeLog::CopyFrom(const historicaltransactiondata_Data_TradeLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata_Data_TradeLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void historicaltransactiondata_Data_TradeLog::InternalSwap(historicaltransactiondata_Data_TradeLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addtime_.Swap(&other->addtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_.Swap(&other->price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mum_.Swap(&other->mum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tradeid_, other->tradeid_);
  swap(type_, other->type_);
  swap(buyorderid_, other->buyorderid_);
  swap(sellorderid_, other->sellorderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata historicaltransactiondata_Data_TradeLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void historicaltransactiondata_Data::InitAsDefaultInstance() {
}
class historicaltransactiondata_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<historicaltransactiondata_Data>()._has_bits_);
};

historicaltransactiondata_Data::historicaltransactiondata_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata.Data)
}
historicaltransactiondata_Data::historicaltransactiondata_Data(const historicaltransactiondata_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tradelog_(from.tradelog_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata.Data)
}

void historicaltransactiondata_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto.base);
}

historicaltransactiondata_Data::~historicaltransactiondata_Data() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata.Data)
  SharedDtor();
}

void historicaltransactiondata_Data::SharedDtor() {
}

void historicaltransactiondata_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const historicaltransactiondata_Data& historicaltransactiondata_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_historicaltransactiondata_Data_ukex_2ehistoricaltransactiondata_2eproto.base);
  return *internal_default_instance();
}


void historicaltransactiondata_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradelog_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* historicaltransactiondata_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tradelog(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* historicaltransactiondata_Data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tradelog_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tradelog(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata.Data)
  return target;
}

size_t historicaltransactiondata_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  total_size += 1UL * this->_internal_tradelog_size();
  for (const auto& msg : this->tradelog_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void historicaltransactiondata_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const historicaltransactiondata_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<historicaltransactiondata_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata.Data)
    MergeFrom(*source);
  }
}

void historicaltransactiondata_Data::MergeFrom(const historicaltransactiondata_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tradelog_.MergeFrom(from.tradelog_);
}

void historicaltransactiondata_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata_Data::CopyFrom(const historicaltransactiondata_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata_Data::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->tradelog())) return false;
  return true;
}

void historicaltransactiondata_Data::InternalSwap(historicaltransactiondata_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tradelog_.InternalSwap(&other->tradelog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata historicaltransactiondata_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void historicaltransactiondata::InitAsDefaultInstance() {
  ::ukex::_historicaltransactiondata_default_instance_._instance.get_mutable()->data_ = const_cast< ::ukex::historicaltransactiondata_Data*>(
      ::ukex::historicaltransactiondata_Data::internal_default_instance());
}
class historicaltransactiondata::_Internal {
 public:
  using HasBits = decltype(std::declval<historicaltransactiondata>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ukex::historicaltransactiondata_Data& data(const historicaltransactiondata* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ukex::historicaltransactiondata_Data&
historicaltransactiondata::_Internal::data(const historicaltransactiondata* msg) {
  return *msg->data_;
}
historicaltransactiondata::historicaltransactiondata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata)
}
historicaltransactiondata::historicaltransactiondata(const historicaltransactiondata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_data()) {
    data_ = new ::ukex::historicaltransactiondata_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata)
}

void historicaltransactiondata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

historicaltransactiondata::~historicaltransactiondata() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata)
  SharedDtor();
}

void historicaltransactiondata::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void historicaltransactiondata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const historicaltransactiondata& historicaltransactiondata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_historicaltransactiondata_ukex_2ehistoricaltransactiondata_2eproto.base);
  return *internal_default_instance();
}


void historicaltransactiondata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* historicaltransactiondata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_type(), ptr, ctx, "ukex.historicaltransactiondata.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ukex.historicaltransactiondata.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_token(), ptr, ctx, "ukex.historicaltransactiondata.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* historicaltransactiondata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // required .ukex.historicaltransactiondata.Data data = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target, stream);
  }

  // required string token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata)
  return target;
}

size_t historicaltransactiondata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.historicaltransactiondata)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (has_data()) {
    // required .ukex.historicaltransactiondata.Data data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return total_size;
}
size_t historicaltransactiondata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .ukex.historicaltransactiondata.Data data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void historicaltransactiondata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata)
  GOOGLE_DCHECK_NE(&from, this);
  const historicaltransactiondata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<historicaltransactiondata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata)
    MergeFrom(*source);
  }
}

void historicaltransactiondata::MergeFrom(const historicaltransactiondata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::ukex::historicaltransactiondata_Data::MergeFrom(from._internal_data());
    }
  }
}

void historicaltransactiondata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata::CopyFrom(const historicaltransactiondata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void historicaltransactiondata::InternalSwap(historicaltransactiondata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata historicaltransactiondata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::historicaltransactiondata_Data_TradeLog* Arena::CreateMaybeMessage< ::ukex::historicaltransactiondata_Data_TradeLog >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::historicaltransactiondata_Data_TradeLog >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::historicaltransactiondata_Data* Arena::CreateMaybeMessage< ::ukex::historicaltransactiondata_Data >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::historicaltransactiondata_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::historicaltransactiondata* Arena::CreateMaybeMessage< ::ukex::historicaltransactiondata >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::historicaltransactiondata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
