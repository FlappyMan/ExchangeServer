// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.assetsupdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2eassetsupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2eassetsupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2eassetsupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2eassetsupdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2eassetsupdate_2eproto;
namespace ukex {
class assetsupdate;
class assetsupdateDefaultTypeInternal;
extern assetsupdateDefaultTypeInternal _assetsupdate_default_instance_;
class assetsupdate_List;
class assetsupdate_ListDefaultTypeInternal;
extern assetsupdate_ListDefaultTypeInternal _assetsupdate_List_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::assetsupdate* Arena::CreateMaybeMessage<::ukex::assetsupdate>(Arena*);
template<> ::ukex::assetsupdate_List* Arena::CreateMaybeMessage<::ukex::assetsupdate_List>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum assetsupdate_CONST : int {
  assetsupdate_CONST_CMD = 117
};
bool assetsupdate_CONST_IsValid(int value);
constexpr assetsupdate_CONST assetsupdate_CONST_CONST_MIN = assetsupdate_CONST_CMD;
constexpr assetsupdate_CONST assetsupdate_CONST_CONST_MAX = assetsupdate_CONST_CMD;
constexpr int assetsupdate_CONST_CONST_ARRAYSIZE = assetsupdate_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* assetsupdate_CONST_descriptor();
template<typename T>
inline const std::string& assetsupdate_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, assetsupdate_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function assetsupdate_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    assetsupdate_CONST_descriptor(), enum_t_value);
}
inline bool assetsupdate_CONST_Parse(
    const std::string& name, assetsupdate_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<assetsupdate_CONST>(
    assetsupdate_CONST_descriptor(), name, value);
}
// ===================================================================

class assetsupdate_List :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.assetsupdate.List) */ {
 public:
  assetsupdate_List();
  virtual ~assetsupdate_List();

  assetsupdate_List(const assetsupdate_List& from);
  assetsupdate_List(assetsupdate_List&& from) noexcept
    : assetsupdate_List() {
    *this = ::std::move(from);
  }

  inline assetsupdate_List& operator=(const assetsupdate_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline assetsupdate_List& operator=(assetsupdate_List&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const assetsupdate_List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const assetsupdate_List* internal_default_instance() {
    return reinterpret_cast<const assetsupdate_List*>(
               &_assetsupdate_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(assetsupdate_List& a, assetsupdate_List& b) {
    a.Swap(&b);
  }
  inline void Swap(assetsupdate_List* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline assetsupdate_List* New() const final {
    return CreateMaybeMessage<assetsupdate_List>(nullptr);
  }

  assetsupdate_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<assetsupdate_List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const assetsupdate_List& from);
  void MergeFrom(const assetsupdate_List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(assetsupdate_List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.assetsupdate.List";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eassetsupdate_2eproto);
    return ::descriptor_table_ukex_2eassetsupdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsableFieldNumber = 5,
    kFronzenFieldNumber = 6,
    kLockupFieldNumber = 7,
    kUidFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kCoinidFieldNumber = 4,
  };
  // required string usable = 5;
  bool has_usable() const;
  private:
  bool _internal_has_usable() const;
  public:
  void clear_usable();
  const std::string& usable() const;
  void set_usable(const std::string& value);
  void set_usable(std::string&& value);
  void set_usable(const char* value);
  void set_usable(const char* value, size_t size);
  std::string* mutable_usable();
  std::string* release_usable();
  void set_allocated_usable(std::string* usable);
  private:
  const std::string& _internal_usable() const;
  void _internal_set_usable(const std::string& value);
  std::string* _internal_mutable_usable();
  public:

  // required string fronzen = 6;
  bool has_fronzen() const;
  private:
  bool _internal_has_fronzen() const;
  public:
  void clear_fronzen();
  const std::string& fronzen() const;
  void set_fronzen(const std::string& value);
  void set_fronzen(std::string&& value);
  void set_fronzen(const char* value);
  void set_fronzen(const char* value, size_t size);
  std::string* mutable_fronzen();
  std::string* release_fronzen();
  void set_allocated_fronzen(std::string* fronzen);
  private:
  const std::string& _internal_fronzen() const;
  void _internal_set_fronzen(const std::string& value);
  std::string* _internal_mutable_fronzen();
  public:

  // required string lockup = 7;
  bool has_lockup() const;
  private:
  bool _internal_has_lockup() const;
  public:
  void clear_lockup();
  const std::string& lockup() const;
  void set_lockup(const std::string& value);
  void set_lockup(std::string&& value);
  void set_lockup(const char* value);
  void set_lockup(const char* value, size_t size);
  std::string* mutable_lockup();
  std::string* release_lockup();
  void set_allocated_lockup(std::string* lockup);
  private:
  const std::string& _internal_lockup() const;
  void _internal_set_lockup(const std::string& value);
  std::string* _internal_mutable_lockup();
  public:

  // required uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 type_id = 2;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 coinid = 4;
  bool has_coinid() const;
  private:
  bool _internal_has_coinid() const;
  public:
  void clear_coinid();
  ::PROTOBUF_NAMESPACE_ID::uint32 coinid() const;
  void set_coinid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coinid() const;
  void _internal_set_coinid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.assetsupdate.List)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fronzen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockup_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coinid_;
  friend struct ::TableStruct_ukex_2eassetsupdate_2eproto;
};
// -------------------------------------------------------------------

class assetsupdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.assetsupdate) */ {
 public:
  assetsupdate();
  virtual ~assetsupdate();

  assetsupdate(const assetsupdate& from);
  assetsupdate(assetsupdate&& from) noexcept
    : assetsupdate() {
    *this = ::std::move(from);
  }

  inline assetsupdate& operator=(const assetsupdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline assetsupdate& operator=(assetsupdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const assetsupdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const assetsupdate* internal_default_instance() {
    return reinterpret_cast<const assetsupdate*>(
               &_assetsupdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(assetsupdate& a, assetsupdate& b) {
    a.Swap(&b);
  }
  inline void Swap(assetsupdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline assetsupdate* New() const final {
    return CreateMaybeMessage<assetsupdate>(nullptr);
  }

  assetsupdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<assetsupdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const assetsupdate& from);
  void MergeFrom(const assetsupdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(assetsupdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.assetsupdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eassetsupdate_2eproto);
    return ::descriptor_table_ukex_2eassetsupdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef assetsupdate_List List;

  typedef assetsupdate_CONST CONST;
  static constexpr CONST CMD =
    assetsupdate_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return assetsupdate_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    assetsupdate_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    assetsupdate_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    assetsupdate_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return assetsupdate_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return assetsupdate_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return assetsupdate_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 5,
    kPaypasswordFieldNumber = 2,
    kUidFieldNumber = 1,
    kOpertypeFieldNumber = 3,
    kOperidFieldNumber = 4,
  };
  // repeated .ukex.assetsupdate.List list = 5;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::ukex::assetsupdate_List* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::assetsupdate_List >*
      mutable_list();
  private:
  const ::ukex::assetsupdate_List& _internal_list(int index) const;
  ::ukex::assetsupdate_List* _internal_add_list();
  public:
  const ::ukex::assetsupdate_List& list(int index) const;
  ::ukex::assetsupdate_List* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::assetsupdate_List >&
      list() const;

  // optional string paypassword = 2;
  bool has_paypassword() const;
  private:
  bool _internal_has_paypassword() const;
  public:
  void clear_paypassword();
  const std::string& paypassword() const;
  void set_paypassword(const std::string& value);
  void set_paypassword(std::string&& value);
  void set_paypassword(const char* value);
  void set_paypassword(const char* value, size_t size);
  std::string* mutable_paypassword();
  std::string* release_paypassword();
  void set_allocated_paypassword(std::string* paypassword);
  private:
  const std::string& _internal_paypassword() const;
  void _internal_set_paypassword(const std::string& value);
  std::string* _internal_mutable_paypassword();
  public:

  // required uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 opertype = 3;
  bool has_opertype() const;
  private:
  bool _internal_has_opertype() const;
  public:
  void clear_opertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 opertype() const;
  void set_opertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opertype() const;
  void _internal_set_opertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 operid = 4;
  bool has_operid() const;
  private:
  bool _internal_has_operid() const;
  public:
  void clear_operid();
  ::PROTOBUF_NAMESPACE_ID::uint32 operid() const;
  void set_operid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operid() const;
  void _internal_set_operid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.assetsupdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::assetsupdate_List > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paypassword_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operid_;
  friend struct ::TableStruct_ukex_2eassetsupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// assetsupdate_List

// required uint64 uid = 1;
inline bool assetsupdate_List::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool assetsupdate_List::has_uid() const {
  return _internal_has_uid();
}
inline void assetsupdate_List::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assetsupdate_List::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assetsupdate_List::uid() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.uid)
  return _internal_uid();
}
inline void assetsupdate_List::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void assetsupdate_List::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.uid)
}

// required uint32 type_id = 2;
inline bool assetsupdate_List::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool assetsupdate_List::has_type_id() const {
  return _internal_has_type_id();
}
inline void assetsupdate_List::clear_type_id() {
  type_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::type_id() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.type_id)
  return _internal_type_id();
}
inline void assetsupdate_List::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_id_ = value;
}
inline void assetsupdate_List::set_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.type_id)
}

// required uint32 type = 3;
inline bool assetsupdate_List::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool assetsupdate_List::has_type() const {
  return _internal_has_type();
}
inline void assetsupdate_List::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::type() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.type)
  return _internal_type();
}
inline void assetsupdate_List::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void assetsupdate_List::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.type)
}

// required uint32 coinid = 4;
inline bool assetsupdate_List::_internal_has_coinid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool assetsupdate_List::has_coinid() const {
  return _internal_has_coinid();
}
inline void assetsupdate_List::clear_coinid() {
  coinid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::_internal_coinid() const {
  return coinid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate_List::coinid() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.coinid)
  return _internal_coinid();
}
inline void assetsupdate_List::_internal_set_coinid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  coinid_ = value;
}
inline void assetsupdate_List::set_coinid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coinid(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.coinid)
}

// required string usable = 5;
inline bool assetsupdate_List::_internal_has_usable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool assetsupdate_List::has_usable() const {
  return _internal_has_usable();
}
inline void assetsupdate_List::clear_usable() {
  usable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& assetsupdate_List::usable() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.usable)
  return _internal_usable();
}
inline void assetsupdate_List::set_usable(const std::string& value) {
  _internal_set_usable(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.usable)
}
inline std::string* assetsupdate_List::mutable_usable() {
  // @@protoc_insertion_point(field_mutable:ukex.assetsupdate.List.usable)
  return _internal_mutable_usable();
}
inline const std::string& assetsupdate_List::_internal_usable() const {
  return usable_.GetNoArena();
}
inline void assetsupdate_List::_internal_set_usable(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  usable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void assetsupdate_List::set_usable(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  usable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.assetsupdate.List.usable)
}
inline void assetsupdate_List::set_usable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  usable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.assetsupdate.List.usable)
}
inline void assetsupdate_List::set_usable(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  usable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.assetsupdate.List.usable)
}
inline std::string* assetsupdate_List::_internal_mutable_usable() {
  _has_bits_[0] |= 0x00000001u;
  return usable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* assetsupdate_List::release_usable() {
  // @@protoc_insertion_point(field_release:ukex.assetsupdate.List.usable)
  if (!has_usable()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return usable_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void assetsupdate_List::set_allocated_usable(std::string* usable) {
  if (usable != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  usable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usable);
  // @@protoc_insertion_point(field_set_allocated:ukex.assetsupdate.List.usable)
}

// required string fronzen = 6;
inline bool assetsupdate_List::_internal_has_fronzen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool assetsupdate_List::has_fronzen() const {
  return _internal_has_fronzen();
}
inline void assetsupdate_List::clear_fronzen() {
  fronzen_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& assetsupdate_List::fronzen() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.fronzen)
  return _internal_fronzen();
}
inline void assetsupdate_List::set_fronzen(const std::string& value) {
  _internal_set_fronzen(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.fronzen)
}
inline std::string* assetsupdate_List::mutable_fronzen() {
  // @@protoc_insertion_point(field_mutable:ukex.assetsupdate.List.fronzen)
  return _internal_mutable_fronzen();
}
inline const std::string& assetsupdate_List::_internal_fronzen() const {
  return fronzen_.GetNoArena();
}
inline void assetsupdate_List::_internal_set_fronzen(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fronzen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void assetsupdate_List::set_fronzen(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fronzen_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.assetsupdate.List.fronzen)
}
inline void assetsupdate_List::set_fronzen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fronzen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.assetsupdate.List.fronzen)
}
inline void assetsupdate_List::set_fronzen(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fronzen_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.assetsupdate.List.fronzen)
}
inline std::string* assetsupdate_List::_internal_mutable_fronzen() {
  _has_bits_[0] |= 0x00000002u;
  return fronzen_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* assetsupdate_List::release_fronzen() {
  // @@protoc_insertion_point(field_release:ukex.assetsupdate.List.fronzen)
  if (!has_fronzen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fronzen_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void assetsupdate_List::set_allocated_fronzen(std::string* fronzen) {
  if (fronzen != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fronzen_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fronzen);
  // @@protoc_insertion_point(field_set_allocated:ukex.assetsupdate.List.fronzen)
}

// required string lockup = 7;
inline bool assetsupdate_List::_internal_has_lockup() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool assetsupdate_List::has_lockup() const {
  return _internal_has_lockup();
}
inline void assetsupdate_List::clear_lockup() {
  lockup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& assetsupdate_List::lockup() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.List.lockup)
  return _internal_lockup();
}
inline void assetsupdate_List::set_lockup(const std::string& value) {
  _internal_set_lockup(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.List.lockup)
}
inline std::string* assetsupdate_List::mutable_lockup() {
  // @@protoc_insertion_point(field_mutable:ukex.assetsupdate.List.lockup)
  return _internal_mutable_lockup();
}
inline const std::string& assetsupdate_List::_internal_lockup() const {
  return lockup_.GetNoArena();
}
inline void assetsupdate_List::_internal_set_lockup(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  lockup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void assetsupdate_List::set_lockup(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  lockup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.assetsupdate.List.lockup)
}
inline void assetsupdate_List::set_lockup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  lockup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.assetsupdate.List.lockup)
}
inline void assetsupdate_List::set_lockup(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  lockup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.assetsupdate.List.lockup)
}
inline std::string* assetsupdate_List::_internal_mutable_lockup() {
  _has_bits_[0] |= 0x00000004u;
  return lockup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* assetsupdate_List::release_lockup() {
  // @@protoc_insertion_point(field_release:ukex.assetsupdate.List.lockup)
  if (!has_lockup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return lockup_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void assetsupdate_List::set_allocated_lockup(std::string* lockup) {
  if (lockup != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lockup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockup);
  // @@protoc_insertion_point(field_set_allocated:ukex.assetsupdate.List.lockup)
}

// -------------------------------------------------------------------

// assetsupdate

// required uint64 uid = 1;
inline bool assetsupdate::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool assetsupdate::has_uid() const {
  return _internal_has_uid();
}
inline void assetsupdate::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assetsupdate::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assetsupdate::uid() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.uid)
  return _internal_uid();
}
inline void assetsupdate::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void assetsupdate::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.uid)
}

// optional string paypassword = 2;
inline bool assetsupdate::_internal_has_paypassword() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool assetsupdate::has_paypassword() const {
  return _internal_has_paypassword();
}
inline void assetsupdate::clear_paypassword() {
  paypassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& assetsupdate::paypassword() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.paypassword)
  return _internal_paypassword();
}
inline void assetsupdate::set_paypassword(const std::string& value) {
  _internal_set_paypassword(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.paypassword)
}
inline std::string* assetsupdate::mutable_paypassword() {
  // @@protoc_insertion_point(field_mutable:ukex.assetsupdate.paypassword)
  return _internal_mutable_paypassword();
}
inline const std::string& assetsupdate::_internal_paypassword() const {
  return paypassword_.GetNoArena();
}
inline void assetsupdate::_internal_set_paypassword(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void assetsupdate::set_paypassword(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  paypassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.assetsupdate.paypassword)
}
inline void assetsupdate::set_paypassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.assetsupdate.paypassword)
}
inline void assetsupdate::set_paypassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.assetsupdate.paypassword)
}
inline std::string* assetsupdate::_internal_mutable_paypassword() {
  _has_bits_[0] |= 0x00000001u;
  return paypassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* assetsupdate::release_paypassword() {
  // @@protoc_insertion_point(field_release:ukex.assetsupdate.paypassword)
  if (!has_paypassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return paypassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void assetsupdate::set_allocated_paypassword(std::string* paypassword) {
  if (paypassword != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paypassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paypassword);
  // @@protoc_insertion_point(field_set_allocated:ukex.assetsupdate.paypassword)
}

// required uint32 opertype = 3;
inline bool assetsupdate::_internal_has_opertype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool assetsupdate::has_opertype() const {
  return _internal_has_opertype();
}
inline void assetsupdate::clear_opertype() {
  opertype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate::_internal_opertype() const {
  return opertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate::opertype() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.opertype)
  return _internal_opertype();
}
inline void assetsupdate::_internal_set_opertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  opertype_ = value;
}
inline void assetsupdate::set_opertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opertype(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.opertype)
}

// required uint32 operid = 4;
inline bool assetsupdate::_internal_has_operid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool assetsupdate::has_operid() const {
  return _internal_has_operid();
}
inline void assetsupdate::clear_operid() {
  operid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate::_internal_operid() const {
  return operid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 assetsupdate::operid() const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.operid)
  return _internal_operid();
}
inline void assetsupdate::_internal_set_operid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  operid_ = value;
}
inline void assetsupdate::set_operid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operid(value);
  // @@protoc_insertion_point(field_set:ukex.assetsupdate.operid)
}

// repeated .ukex.assetsupdate.List list = 5;
inline int assetsupdate::_internal_list_size() const {
  return list_.size();
}
inline int assetsupdate::list_size() const {
  return _internal_list_size();
}
inline void assetsupdate::clear_list() {
  list_.Clear();
}
inline ::ukex::assetsupdate_List* assetsupdate::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.assetsupdate.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::assetsupdate_List >*
assetsupdate::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:ukex.assetsupdate.list)
  return &list_;
}
inline const ::ukex::assetsupdate_List& assetsupdate::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::ukex::assetsupdate_List& assetsupdate::list(int index) const {
  // @@protoc_insertion_point(field_get:ukex.assetsupdate.list)
  return _internal_list(index);
}
inline ::ukex::assetsupdate_List* assetsupdate::_internal_add_list() {
  return list_.Add();
}
inline ::ukex::assetsupdate_List* assetsupdate::add_list() {
  // @@protoc_insertion_point(field_add:ukex.assetsupdate.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::assetsupdate_List >&
assetsupdate::list() const {
  // @@protoc_insertion_point(field_list:ukex.assetsupdate.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::assetsupdate_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::assetsupdate_CONST>() {
  return ::ukex::assetsupdate_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2eassetsupdate_2eproto
