// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.historicaltransactiondata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2ehistoricaltransactiondata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2ehistoricaltransactiondata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2ehistoricaltransactiondata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2ehistoricaltransactiondata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ehistoricaltransactiondata_2eproto;
namespace ukex {
class historicaltransactiondata;
class historicaltransactiondataDefaultTypeInternal;
extern historicaltransactiondataDefaultTypeInternal _historicaltransactiondata_default_instance_;
class historicaltransactiondata_Data;
class historicaltransactiondata_DataDefaultTypeInternal;
extern historicaltransactiondata_DataDefaultTypeInternal _historicaltransactiondata_Data_default_instance_;
class historicaltransactiondata_Data_TradeLog;
class historicaltransactiondata_Data_TradeLogDefaultTypeInternal;
extern historicaltransactiondata_Data_TradeLogDefaultTypeInternal _historicaltransactiondata_Data_TradeLog_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::historicaltransactiondata* Arena::CreateMaybeMessage<::ukex::historicaltransactiondata>(Arena*);
template<> ::ukex::historicaltransactiondata_Data* Arena::CreateMaybeMessage<::ukex::historicaltransactiondata_Data>(Arena*);
template<> ::ukex::historicaltransactiondata_Data_TradeLog* Arena::CreateMaybeMessage<::ukex::historicaltransactiondata_Data_TradeLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum historicaltransactiondata_CONST : int {
  historicaltransactiondata_CONST_CMD = 107
};
bool historicaltransactiondata_CONST_IsValid(int value);
constexpr historicaltransactiondata_CONST historicaltransactiondata_CONST_CONST_MIN = historicaltransactiondata_CONST_CMD;
constexpr historicaltransactiondata_CONST historicaltransactiondata_CONST_CONST_MAX = historicaltransactiondata_CONST_CMD;
constexpr int historicaltransactiondata_CONST_CONST_ARRAYSIZE = historicaltransactiondata_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* historicaltransactiondata_CONST_descriptor();
template<typename T>
inline const std::string& historicaltransactiondata_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, historicaltransactiondata_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function historicaltransactiondata_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    historicaltransactiondata_CONST_descriptor(), enum_t_value);
}
inline bool historicaltransactiondata_CONST_Parse(
    const std::string& name, historicaltransactiondata_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<historicaltransactiondata_CONST>(
    historicaltransactiondata_CONST_descriptor(), name, value);
}
// ===================================================================

class historicaltransactiondata_Data_TradeLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata.Data.TradeLog) */ {
 public:
  historicaltransactiondata_Data_TradeLog();
  virtual ~historicaltransactiondata_Data_TradeLog();

  historicaltransactiondata_Data_TradeLog(const historicaltransactiondata_Data_TradeLog& from);
  historicaltransactiondata_Data_TradeLog(historicaltransactiondata_Data_TradeLog&& from) noexcept
    : historicaltransactiondata_Data_TradeLog() {
    *this = ::std::move(from);
  }

  inline historicaltransactiondata_Data_TradeLog& operator=(const historicaltransactiondata_Data_TradeLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline historicaltransactiondata_Data_TradeLog& operator=(historicaltransactiondata_Data_TradeLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const historicaltransactiondata_Data_TradeLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const historicaltransactiondata_Data_TradeLog* internal_default_instance() {
    return reinterpret_cast<const historicaltransactiondata_Data_TradeLog*>(
               &_historicaltransactiondata_Data_TradeLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(historicaltransactiondata_Data_TradeLog& a, historicaltransactiondata_Data_TradeLog& b) {
    a.Swap(&b);
  }
  inline void Swap(historicaltransactiondata_Data_TradeLog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline historicaltransactiondata_Data_TradeLog* New() const final {
    return CreateMaybeMessage<historicaltransactiondata_Data_TradeLog>(nullptr);
  }

  historicaltransactiondata_Data_TradeLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<historicaltransactiondata_Data_TradeLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const historicaltransactiondata_Data_TradeLog& from);
  void MergeFrom(const historicaltransactiondata_Data_TradeLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(historicaltransactiondata_Data_TradeLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.historicaltransactiondata.Data.TradeLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto);
    return ::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddtimeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kPriceFieldNumber = 5,
    kMumFieldNumber = 6,
    kNumFieldNumber = 7,
    kTradeidFieldNumber = 1,
    kTypeFieldNumber = 4,
    kBuyOrderIDFieldNumber = 8,
    kSellOrderIDFieldNumber = 9,
  };
  // required string addtime = 2;
  bool has_addtime() const;
  private:
  bool _internal_has_addtime() const;
  public:
  void clear_addtime();
  const std::string& addtime() const;
  void set_addtime(const std::string& value);
  void set_addtime(std::string&& value);
  void set_addtime(const char* value);
  void set_addtime(const char* value, size_t size);
  std::string* mutable_addtime();
  std::string* release_addtime();
  void set_allocated_addtime(std::string* addtime);
  private:
  const std::string& _internal_addtime() const;
  void _internal_set_addtime(const std::string& value);
  std::string* _internal_mutable_addtime();
  public:

  // required string timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // required string price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // required string mum = 6;
  bool has_mum() const;
  private:
  bool _internal_has_mum() const;
  public:
  void clear_mum();
  const std::string& mum() const;
  void set_mum(const std::string& value);
  void set_mum(std::string&& value);
  void set_mum(const char* value);
  void set_mum(const char* value, size_t size);
  std::string* mutable_mum();
  std::string* release_mum();
  void set_allocated_mum(std::string* mum);
  private:
  const std::string& _internal_mum() const;
  void _internal_set_mum(const std::string& value);
  std::string* _internal_mutable_mum();
  public:

  // required string num = 7;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // required uint64 tradeid = 1;
  bool has_tradeid() const;
  private:
  bool _internal_has_tradeid() const;
  public:
  void clear_tradeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid() const;
  void set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tradeid() const;
  void _internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 buyOrderID = 8;
  bool has_buyorderid() const;
  private:
  bool _internal_has_buyorderid() const;
  public:
  void clear_buyorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 buyorderid() const;
  void set_buyorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buyorderid() const;
  void _internal_set_buyorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 sellOrderID = 9;
  bool has_sellorderid() const;
  private:
  bool _internal_has_sellorderid() const;
  public:
  void clear_sellorderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sellorderid() const;
  void set_sellorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sellorderid() const;
  void _internal_set_sellorderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata.Data.TradeLog)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buyorderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sellorderid_;
  friend struct ::TableStruct_ukex_2ehistoricaltransactiondata_2eproto;
};
// -------------------------------------------------------------------

class historicaltransactiondata_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata.Data) */ {
 public:
  historicaltransactiondata_Data();
  virtual ~historicaltransactiondata_Data();

  historicaltransactiondata_Data(const historicaltransactiondata_Data& from);
  historicaltransactiondata_Data(historicaltransactiondata_Data&& from) noexcept
    : historicaltransactiondata_Data() {
    *this = ::std::move(from);
  }

  inline historicaltransactiondata_Data& operator=(const historicaltransactiondata_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline historicaltransactiondata_Data& operator=(historicaltransactiondata_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const historicaltransactiondata_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const historicaltransactiondata_Data* internal_default_instance() {
    return reinterpret_cast<const historicaltransactiondata_Data*>(
               &_historicaltransactiondata_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(historicaltransactiondata_Data& a, historicaltransactiondata_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(historicaltransactiondata_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline historicaltransactiondata_Data* New() const final {
    return CreateMaybeMessage<historicaltransactiondata_Data>(nullptr);
  }

  historicaltransactiondata_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<historicaltransactiondata_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const historicaltransactiondata_Data& from);
  void MergeFrom(const historicaltransactiondata_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(historicaltransactiondata_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.historicaltransactiondata.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto);
    return ::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef historicaltransactiondata_Data_TradeLog TradeLog;

  // accessors -------------------------------------------------------

  enum : int {
    kTradelogFieldNumber = 1,
  };
  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  int tradelog_size() const;
  private:
  int _internal_tradelog_size() const;
  public:
  void clear_tradelog();
  ::ukex::historicaltransactiondata_Data_TradeLog* mutable_tradelog(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >*
      mutable_tradelog();
  private:
  const ::ukex::historicaltransactiondata_Data_TradeLog& _internal_tradelog(int index) const;
  ::ukex::historicaltransactiondata_Data_TradeLog* _internal_add_tradelog();
  public:
  const ::ukex::historicaltransactiondata_Data_TradeLog& tradelog(int index) const;
  ::ukex::historicaltransactiondata_Data_TradeLog* add_tradelog();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >&
      tradelog() const;

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog > tradelog_;
  friend struct ::TableStruct_ukex_2ehistoricaltransactiondata_2eproto;
};
// -------------------------------------------------------------------

class historicaltransactiondata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata) */ {
 public:
  historicaltransactiondata();
  virtual ~historicaltransactiondata();

  historicaltransactiondata(const historicaltransactiondata& from);
  historicaltransactiondata(historicaltransactiondata&& from) noexcept
    : historicaltransactiondata() {
    *this = ::std::move(from);
  }

  inline historicaltransactiondata& operator=(const historicaltransactiondata& from) {
    CopyFrom(from);
    return *this;
  }
  inline historicaltransactiondata& operator=(historicaltransactiondata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const historicaltransactiondata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const historicaltransactiondata* internal_default_instance() {
    return reinterpret_cast<const historicaltransactiondata*>(
               &_historicaltransactiondata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(historicaltransactiondata& a, historicaltransactiondata& b) {
    a.Swap(&b);
  }
  inline void Swap(historicaltransactiondata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline historicaltransactiondata* New() const final {
    return CreateMaybeMessage<historicaltransactiondata>(nullptr);
  }

  historicaltransactiondata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<historicaltransactiondata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const historicaltransactiondata& from);
  void MergeFrom(const historicaltransactiondata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(historicaltransactiondata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.historicaltransactiondata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto);
    return ::descriptor_table_ukex_2ehistoricaltransactiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef historicaltransactiondata_Data Data;

  typedef historicaltransactiondata_CONST CONST;
  static constexpr CONST CMD =
    historicaltransactiondata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return historicaltransactiondata_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    historicaltransactiondata_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    historicaltransactiondata_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    historicaltransactiondata_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return historicaltransactiondata_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return historicaltransactiondata_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return historicaltransactiondata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTokenFieldNumber = 3,
    kDataFieldNumber = 2,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required .ukex.historicaltransactiondata.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ukex::historicaltransactiondata_Data& data() const;
  ::ukex::historicaltransactiondata_Data* release_data();
  ::ukex::historicaltransactiondata_Data* mutable_data();
  void set_allocated_data(::ukex::historicaltransactiondata_Data* data);
  private:
  const ::ukex::historicaltransactiondata_Data& _internal_data() const;
  ::ukex::historicaltransactiondata_Data* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::ukex::historicaltransactiondata_Data* data_;
  friend struct ::TableStruct_ukex_2ehistoricaltransactiondata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// historicaltransactiondata_Data_TradeLog

// required uint64 tradeid = 1;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_tradeid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_tradeid() const {
  return _internal_has_tradeid();
}
inline void historicaltransactiondata_Data_TradeLog::clear_tradeid() {
  tradeid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::_internal_tradeid() const {
  return tradeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::tradeid() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
  return _internal_tradeid();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  tradeid_ = value;
}
inline void historicaltransactiondata_Data_TradeLog::set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tradeid(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
}

// required string addtime = 2;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_addtime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_addtime() const {
  return _internal_has_addtime();
}
inline void historicaltransactiondata_Data_TradeLog::clear_addtime() {
  addtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& historicaltransactiondata_Data_TradeLog::addtime() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return _internal_addtime();
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const std::string& value) {
  _internal_set_addtime(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline std::string* historicaltransactiondata_Data_TradeLog::mutable_addtime() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return _internal_mutable_addtime();
}
inline const std::string& historicaltransactiondata_Data_TradeLog::_internal_addtime() const {
  return addtime_.GetNoArena();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_addtime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  addtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  addtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  addtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline std::string* historicaltransactiondata_Data_TradeLog::_internal_mutable_addtime() {
  _has_bits_[0] |= 0x00000001u;
  return addtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata_Data_TradeLog::release_addtime() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  if (!has_addtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return addtime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_addtime(std::string* addtime) {
  if (addtime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addtime);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}

// required string timestamp = 3;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void historicaltransactiondata_Data_TradeLog::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& historicaltransactiondata_Data_TradeLog::timestamp() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return _internal_timestamp();
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline std::string* historicaltransactiondata_Data_TradeLog::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& historicaltransactiondata_Data_TradeLog::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline std::string* historicaltransactiondata_Data_TradeLog::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata_Data_TradeLog::release_timestamp() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  if (!has_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return timestamp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}

// required uint64 type = 4;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_type() const {
  return _internal_has_type();
}
inline void historicaltransactiondata_Data_TradeLog::clear_type() {
  type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.type)
  return _internal_type();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void historicaltransactiondata_Data_TradeLog::set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.type)
}

// required string price = 5;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_price() const {
  return _internal_has_price();
}
inline void historicaltransactiondata_Data_TradeLog::clear_price() {
  price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& historicaltransactiondata_Data_TradeLog::price() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.price)
  return _internal_price();
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline std::string* historicaltransactiondata_Data_TradeLog::mutable_price() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.price)
  return _internal_mutable_price();
}
inline const std::string& historicaltransactiondata_Data_TradeLog::_internal_price() const {
  return price_.GetNoArena();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_price(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata_Data_TradeLog::set_price(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline std::string* historicaltransactiondata_Data_TradeLog::_internal_mutable_price() {
  _has_bits_[0] |= 0x00000004u;
  return price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata_Data_TradeLog::release_price() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.price)
  if (!has_price()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return price_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.price)
}

// required string mum = 6;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_mum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_mum() const {
  return _internal_has_mum();
}
inline void historicaltransactiondata_Data_TradeLog::clear_mum() {
  mum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& historicaltransactiondata_Data_TradeLog::mum() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return _internal_mum();
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const std::string& value) {
  _internal_set_mum(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline std::string* historicaltransactiondata_Data_TradeLog::mutable_mum() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return _internal_mutable_mum();
}
inline const std::string& historicaltransactiondata_Data_TradeLog::_internal_mum() const {
  return mum_.GetNoArena();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_mum(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  mum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  mum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  mum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline std::string* historicaltransactiondata_Data_TradeLog::_internal_mutable_mum() {
  _has_bits_[0] |= 0x00000008u;
  return mum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata_Data_TradeLog::release_mum() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.mum)
  if (!has_mum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return mum_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_mum(std::string* mum) {
  if (mum != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mum);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.mum)
}

// required string num = 7;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_num() const {
  return _internal_has_num();
}
inline void historicaltransactiondata_Data_TradeLog::clear_num() {
  num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& historicaltransactiondata_Data_TradeLog::num() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.num)
  return _internal_num();
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline std::string* historicaltransactiondata_Data_TradeLog::mutable_num() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.num)
  return _internal_mutable_num();
}
inline const std::string& historicaltransactiondata_Data_TradeLog::_internal_num() const {
  return num_.GetNoArena();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_num(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata_Data_TradeLog::set_num(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  num_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline std::string* historicaltransactiondata_Data_TradeLog::_internal_mutable_num() {
  _has_bits_[0] |= 0x00000010u;
  return num_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata_Data_TradeLog::release_num() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.num)
  if (!has_num()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return num_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  num_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.num)
}

// required uint64 buyOrderID = 8;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_buyorderid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_buyorderid() const {
  return _internal_has_buyorderid();
}
inline void historicaltransactiondata_Data_TradeLog::clear_buyorderid() {
  buyorderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::_internal_buyorderid() const {
  return buyorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::buyorderid() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.buyOrderID)
  return _internal_buyorderid();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_buyorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  buyorderid_ = value;
}
inline void historicaltransactiondata_Data_TradeLog::set_buyorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buyorderid(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.buyOrderID)
}

// required uint64 sellOrderID = 9;
inline bool historicaltransactiondata_Data_TradeLog::_internal_has_sellorderid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool historicaltransactiondata_Data_TradeLog::has_sellorderid() const {
  return _internal_has_sellorderid();
}
inline void historicaltransactiondata_Data_TradeLog::clear_sellorderid() {
  sellorderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::_internal_sellorderid() const {
  return sellorderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 historicaltransactiondata_Data_TradeLog::sellorderid() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.sellOrderID)
  return _internal_sellorderid();
}
inline void historicaltransactiondata_Data_TradeLog::_internal_set_sellorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  sellorderid_ = value;
}
inline void historicaltransactiondata_Data_TradeLog::set_sellorderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sellorderid(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.sellOrderID)
}

// -------------------------------------------------------------------

// historicaltransactiondata_Data

// repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
inline int historicaltransactiondata_Data::_internal_tradelog_size() const {
  return tradelog_.size();
}
inline int historicaltransactiondata_Data::tradelog_size() const {
  return _internal_tradelog_size();
}
inline void historicaltransactiondata_Data::clear_tradelog() {
  tradelog_.Clear();
}
inline ::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::mutable_tradelog(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >*
historicaltransactiondata_Data::mutable_tradelog() {
  // @@protoc_insertion_point(field_mutable_list:ukex.historicaltransactiondata.Data.tradelog)
  return &tradelog_;
}
inline const ::ukex::historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data::_internal_tradelog(int index) const {
  return tradelog_.Get(index);
}
inline const ::ukex::historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data::tradelog(int index) const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.tradelog)
  return _internal_tradelog(index);
}
inline ::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::_internal_add_tradelog() {
  return tradelog_.Add();
}
inline ::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::add_tradelog() {
  // @@protoc_insertion_point(field_add:ukex.historicaltransactiondata.Data.tradelog)
  return _internal_add_tradelog();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >&
historicaltransactiondata_Data::tradelog() const {
  // @@protoc_insertion_point(field_list:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_;
}

// -------------------------------------------------------------------

// historicaltransactiondata

// required string type = 1;
inline bool historicaltransactiondata::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool historicaltransactiondata::has_type() const {
  return _internal_has_type();
}
inline void historicaltransactiondata::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& historicaltransactiondata::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.type)
  return _internal_type();
}
inline void historicaltransactiondata::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.type)
}
inline std::string* historicaltransactiondata::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.type)
  return _internal_mutable_type();
}
inline const std::string& historicaltransactiondata::_internal_type() const {
  return type_.GetNoArena();
}
inline void historicaltransactiondata::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.type)
}
inline void historicaltransactiondata::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.type)
}
inline void historicaltransactiondata::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.type)
}
inline std::string* historicaltransactiondata::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.type)
}

// required .ukex.historicaltransactiondata.Data data = 2;
inline bool historicaltransactiondata::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool historicaltransactiondata::has_data() const {
  return _internal_has_data();
}
inline void historicaltransactiondata::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ukex::historicaltransactiondata_Data& historicaltransactiondata::_internal_data() const {
  const ::ukex::historicaltransactiondata_Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::historicaltransactiondata_Data*>(
      &::ukex::_historicaltransactiondata_Data_default_instance_);
}
inline const ::ukex::historicaltransactiondata_Data& historicaltransactiondata::data() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.data)
  return _internal_data();
}
inline ::ukex::historicaltransactiondata_Data* historicaltransactiondata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.data)
  _has_bits_[0] &= ~0x00000004u;
  ::ukex::historicaltransactiondata_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::ukex::historicaltransactiondata_Data* historicaltransactiondata::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::historicaltransactiondata_Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::ukex::historicaltransactiondata_Data* historicaltransactiondata::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.data)
  return _internal_mutable_data();
}
inline void historicaltransactiondata::set_allocated_data(::ukex::historicaltransactiondata_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.data)
}

// required string token = 3;
inline bool historicaltransactiondata::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool historicaltransactiondata::has_token() const {
  return _internal_has_token();
}
inline void historicaltransactiondata::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& historicaltransactiondata::token() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.token)
  return _internal_token();
}
inline void historicaltransactiondata::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.token)
}
inline std::string* historicaltransactiondata::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.token)
  return _internal_mutable_token();
}
inline const std::string& historicaltransactiondata::_internal_token() const {
  return token_.GetNoArena();
}
inline void historicaltransactiondata::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void historicaltransactiondata::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.historicaltransactiondata.token)
}
inline void historicaltransactiondata::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.token)
}
inline void historicaltransactiondata::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.token)
}
inline std::string* historicaltransactiondata::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* historicaltransactiondata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::historicaltransactiondata_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::historicaltransactiondata_CONST>() {
  return ::ukex::historicaltransactiondata_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2ehistoricaltransactiondata_2eproto
