// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.klinedata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2eklinedata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2eklinedata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2eklinedata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2eklinedata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2eklinedata_2eproto;
namespace ukex {
class klinedata;
class klinedataDefaultTypeInternal;
extern klinedataDefaultTypeInternal _klinedata_default_instance_;
class klinedata_Data;
class klinedata_DataDefaultTypeInternal;
extern klinedata_DataDefaultTypeInternal _klinedata_Data_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::klinedata* Arena::CreateMaybeMessage<::ukex::klinedata>(Arena*);
template<> ::ukex::klinedata_Data* Arena::CreateMaybeMessage<::ukex::klinedata_Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum klinedata_CONST : int {
  klinedata_CONST_CMD = 105
};
bool klinedata_CONST_IsValid(int value);
constexpr klinedata_CONST klinedata_CONST_CONST_MIN = klinedata_CONST_CMD;
constexpr klinedata_CONST klinedata_CONST_CONST_MAX = klinedata_CONST_CMD;
constexpr int klinedata_CONST_CONST_ARRAYSIZE = klinedata_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* klinedata_CONST_descriptor();
template<typename T>
inline const std::string& klinedata_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, klinedata_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function klinedata_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    klinedata_CONST_descriptor(), enum_t_value);
}
inline bool klinedata_CONST_Parse(
    const std::string& name, klinedata_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<klinedata_CONST>(
    klinedata_CONST_descriptor(), name, value);
}
// ===================================================================

class klinedata_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.klinedata.Data) */ {
 public:
  klinedata_Data();
  virtual ~klinedata_Data();

  klinedata_Data(const klinedata_Data& from);
  klinedata_Data(klinedata_Data&& from) noexcept
    : klinedata_Data() {
    *this = ::std::move(from);
  }

  inline klinedata_Data& operator=(const klinedata_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline klinedata_Data& operator=(klinedata_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const klinedata_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const klinedata_Data* internal_default_instance() {
    return reinterpret_cast<const klinedata_Data*>(
               &_klinedata_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(klinedata_Data& a, klinedata_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(klinedata_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline klinedata_Data* New() const final {
    return CreateMaybeMessage<klinedata_Data>(nullptr);
  }

  klinedata_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<klinedata_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const klinedata_Data& from);
  void MergeFrom(const klinedata_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(klinedata_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.klinedata.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eklinedata_2eproto);
    return ::descriptor_table_ukex_2eklinedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kK0FieldNumber = 1,
    kK1FieldNumber = 2,
    kK2FieldNumber = 3,
    kK3FieldNumber = 4,
    kK4FieldNumber = 5,
    kK5FieldNumber = 6,
  };
  // required string k0 = 1;
  bool has_k0() const;
  private:
  bool _internal_has_k0() const;
  public:
  void clear_k0();
  const std::string& k0() const;
  void set_k0(const std::string& value);
  void set_k0(std::string&& value);
  void set_k0(const char* value);
  void set_k0(const char* value, size_t size);
  std::string* mutable_k0();
  std::string* release_k0();
  void set_allocated_k0(std::string* k0);
  private:
  const std::string& _internal_k0() const;
  void _internal_set_k0(const std::string& value);
  std::string* _internal_mutable_k0();
  public:

  // required string k1 = 2;
  bool has_k1() const;
  private:
  bool _internal_has_k1() const;
  public:
  void clear_k1();
  const std::string& k1() const;
  void set_k1(const std::string& value);
  void set_k1(std::string&& value);
  void set_k1(const char* value);
  void set_k1(const char* value, size_t size);
  std::string* mutable_k1();
  std::string* release_k1();
  void set_allocated_k1(std::string* k1);
  private:
  const std::string& _internal_k1() const;
  void _internal_set_k1(const std::string& value);
  std::string* _internal_mutable_k1();
  public:

  // required string k2 = 3;
  bool has_k2() const;
  private:
  bool _internal_has_k2() const;
  public:
  void clear_k2();
  const std::string& k2() const;
  void set_k2(const std::string& value);
  void set_k2(std::string&& value);
  void set_k2(const char* value);
  void set_k2(const char* value, size_t size);
  std::string* mutable_k2();
  std::string* release_k2();
  void set_allocated_k2(std::string* k2);
  private:
  const std::string& _internal_k2() const;
  void _internal_set_k2(const std::string& value);
  std::string* _internal_mutable_k2();
  public:

  // required string k3 = 4;
  bool has_k3() const;
  private:
  bool _internal_has_k3() const;
  public:
  void clear_k3();
  const std::string& k3() const;
  void set_k3(const std::string& value);
  void set_k3(std::string&& value);
  void set_k3(const char* value);
  void set_k3(const char* value, size_t size);
  std::string* mutable_k3();
  std::string* release_k3();
  void set_allocated_k3(std::string* k3);
  private:
  const std::string& _internal_k3() const;
  void _internal_set_k3(const std::string& value);
  std::string* _internal_mutable_k3();
  public:

  // required string k4 = 5;
  bool has_k4() const;
  private:
  bool _internal_has_k4() const;
  public:
  void clear_k4();
  const std::string& k4() const;
  void set_k4(const std::string& value);
  void set_k4(std::string&& value);
  void set_k4(const char* value);
  void set_k4(const char* value, size_t size);
  std::string* mutable_k4();
  std::string* release_k4();
  void set_allocated_k4(std::string* k4);
  private:
  const std::string& _internal_k4() const;
  void _internal_set_k4(const std::string& value);
  std::string* _internal_mutable_k4();
  public:

  // required string k5 = 6;
  bool has_k5() const;
  private:
  bool _internal_has_k5() const;
  public:
  void clear_k5();
  const std::string& k5() const;
  void set_k5(const std::string& value);
  void set_k5(std::string&& value);
  void set_k5(const char* value);
  void set_k5(const char* value, size_t size);
  std::string* mutable_k5();
  std::string* release_k5();
  void set_allocated_k5(std::string* k5);
  private:
  const std::string& _internal_k5() const;
  void _internal_set_k5(const std::string& value);
  std::string* _internal_mutable_k5();
  public:

  // @@protoc_insertion_point(class_scope:ukex.klinedata.Data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k5_;
  friend struct ::TableStruct_ukex_2eklinedata_2eproto;
};
// -------------------------------------------------------------------

class klinedata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.klinedata) */ {
 public:
  klinedata();
  virtual ~klinedata();

  klinedata(const klinedata& from);
  klinedata(klinedata&& from) noexcept
    : klinedata() {
    *this = ::std::move(from);
  }

  inline klinedata& operator=(const klinedata& from) {
    CopyFrom(from);
    return *this;
  }
  inline klinedata& operator=(klinedata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const klinedata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const klinedata* internal_default_instance() {
    return reinterpret_cast<const klinedata*>(
               &_klinedata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(klinedata& a, klinedata& b) {
    a.Swap(&b);
  }
  inline void Swap(klinedata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline klinedata* New() const final {
    return CreateMaybeMessage<klinedata>(nullptr);
  }

  klinedata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<klinedata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const klinedata& from);
  void MergeFrom(const klinedata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(klinedata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.klinedata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2eklinedata_2eproto);
    return ::descriptor_table_ukex_2eklinedata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef klinedata_Data Data;

  typedef klinedata_CONST CONST;
  static constexpr CONST CMD =
    klinedata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return klinedata_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    klinedata_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    klinedata_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    klinedata_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return klinedata_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return klinedata_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return klinedata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
    kTokenFieldNumber = 3,
  };
  // repeated .ukex.klinedata.Data data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ukex::klinedata_Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::klinedata_Data >*
      mutable_data();
  private:
  const ::ukex::klinedata_Data& _internal_data(int index) const;
  ::ukex::klinedata_Data* _internal_add_data();
  public:
  const ::ukex::klinedata_Data& data(int index) const;
  ::ukex::klinedata_Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::klinedata_Data >&
      data() const;

  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ukex.klinedata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::klinedata_Data > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_ukex_2eklinedata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// klinedata_Data

// required string k0 = 1;
inline bool klinedata_Data::_internal_has_k0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool klinedata_Data::has_k0() const {
  return _internal_has_k0();
}
inline void klinedata_Data::clear_k0() {
  k0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& klinedata_Data::k0() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k0)
  return _internal_k0();
}
inline void klinedata_Data::set_k0(const std::string& value) {
  _internal_set_k0(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k0)
}
inline std::string* klinedata_Data::mutable_k0() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k0)
  return _internal_mutable_k0();
}
inline const std::string& klinedata_Data::_internal_k0() const {
  return k0_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  k0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k0(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  k0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k0)
}
inline void klinedata_Data::set_k0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  k0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k0)
}
inline void klinedata_Data::set_k0(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  k0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k0)
}
inline std::string* klinedata_Data::_internal_mutable_k0() {
  _has_bits_[0] |= 0x00000001u;
  return k0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k0() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k0)
  if (!has_k0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return k0_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k0(std::string* k0) {
  if (k0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  k0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k0);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k0)
}

// required string k1 = 2;
inline bool klinedata_Data::_internal_has_k1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool klinedata_Data::has_k1() const {
  return _internal_has_k1();
}
inline void klinedata_Data::clear_k1() {
  k1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& klinedata_Data::k1() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k1)
  return _internal_k1();
}
inline void klinedata_Data::set_k1(const std::string& value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k1)
}
inline std::string* klinedata_Data::mutable_k1() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k1)
  return _internal_mutable_k1();
}
inline const std::string& klinedata_Data::_internal_k1() const {
  return k1_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  k1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  k1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k1)
}
inline void klinedata_Data::set_k1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  k1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k1)
}
inline void klinedata_Data::set_k1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  k1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k1)
}
inline std::string* klinedata_Data::_internal_mutable_k1() {
  _has_bits_[0] |= 0x00000002u;
  return k1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k1() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k1)
  if (!has_k1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return k1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k1(std::string* k1) {
  if (k1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  k1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k1);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k1)
}

// required string k2 = 3;
inline bool klinedata_Data::_internal_has_k2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool klinedata_Data::has_k2() const {
  return _internal_has_k2();
}
inline void klinedata_Data::clear_k2() {
  k2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& klinedata_Data::k2() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k2)
  return _internal_k2();
}
inline void klinedata_Data::set_k2(const std::string& value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k2)
}
inline std::string* klinedata_Data::mutable_k2() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k2)
  return _internal_mutable_k2();
}
inline const std::string& klinedata_Data::_internal_k2() const {
  return k2_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  k2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  k2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k2)
}
inline void klinedata_Data::set_k2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  k2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k2)
}
inline void klinedata_Data::set_k2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  k2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k2)
}
inline std::string* klinedata_Data::_internal_mutable_k2() {
  _has_bits_[0] |= 0x00000004u;
  return k2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k2() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k2)
  if (!has_k2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return k2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k2(std::string* k2) {
  if (k2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  k2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k2);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k2)
}

// required string k3 = 4;
inline bool klinedata_Data::_internal_has_k3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool klinedata_Data::has_k3() const {
  return _internal_has_k3();
}
inline void klinedata_Data::clear_k3() {
  k3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& klinedata_Data::k3() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k3)
  return _internal_k3();
}
inline void klinedata_Data::set_k3(const std::string& value) {
  _internal_set_k3(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k3)
}
inline std::string* klinedata_Data::mutable_k3() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k3)
  return _internal_mutable_k3();
}
inline const std::string& klinedata_Data::_internal_k3() const {
  return k3_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  k3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  k3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k3)
}
inline void klinedata_Data::set_k3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  k3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k3)
}
inline void klinedata_Data::set_k3(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  k3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k3)
}
inline std::string* klinedata_Data::_internal_mutable_k3() {
  _has_bits_[0] |= 0x00000008u;
  return k3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k3() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k3)
  if (!has_k3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return k3_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k3(std::string* k3) {
  if (k3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  k3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k3);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k3)
}

// required string k4 = 5;
inline bool klinedata_Data::_internal_has_k4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool klinedata_Data::has_k4() const {
  return _internal_has_k4();
}
inline void klinedata_Data::clear_k4() {
  k4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& klinedata_Data::k4() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k4)
  return _internal_k4();
}
inline void klinedata_Data::set_k4(const std::string& value) {
  _internal_set_k4(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k4)
}
inline std::string* klinedata_Data::mutable_k4() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k4)
  return _internal_mutable_k4();
}
inline const std::string& klinedata_Data::_internal_k4() const {
  return k4_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  k4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  k4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k4)
}
inline void klinedata_Data::set_k4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  k4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k4)
}
inline void klinedata_Data::set_k4(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  k4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k4)
}
inline std::string* klinedata_Data::_internal_mutable_k4() {
  _has_bits_[0] |= 0x00000010u;
  return k4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k4() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k4)
  if (!has_k4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return k4_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k4(std::string* k4) {
  if (k4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  k4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k4);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k4)
}

// required string k5 = 6;
inline bool klinedata_Data::_internal_has_k5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool klinedata_Data::has_k5() const {
  return _internal_has_k5();
}
inline void klinedata_Data::clear_k5() {
  k5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& klinedata_Data::k5() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k5)
  return _internal_k5();
}
inline void klinedata_Data::set_k5(const std::string& value) {
  _internal_set_k5(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k5)
}
inline std::string* klinedata_Data::mutable_k5() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k5)
  return _internal_mutable_k5();
}
inline const std::string& klinedata_Data::_internal_k5() const {
  return k5_.GetNoArena();
}
inline void klinedata_Data::_internal_set_k5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  k5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata_Data::set_k5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  k5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.Data.k5)
}
inline void klinedata_Data::set_k5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  k5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k5)
}
inline void klinedata_Data::set_k5(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  k5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k5)
}
inline std::string* klinedata_Data::_internal_mutable_k5() {
  _has_bits_[0] |= 0x00000020u;
  return k5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata_Data::release_k5() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k5)
  if (!has_k5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return k5_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata_Data::set_allocated_k5(std::string* k5) {
  if (k5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  k5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k5);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k5)
}

// -------------------------------------------------------------------

// klinedata

// required string type = 1;
inline bool klinedata::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool klinedata::has_type() const {
  return _internal_has_type();
}
inline void klinedata::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& klinedata::type() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.type)
  return _internal_type();
}
inline void klinedata::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.type)
}
inline std::string* klinedata::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.type)
  return _internal_mutable_type();
}
inline const std::string& klinedata::_internal_type() const {
  return type_.GetNoArena();
}
inline void klinedata::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.type)
}
inline void klinedata::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.type)
}
inline void klinedata::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.type)
}
inline std::string* klinedata::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.type)
}

// repeated .ukex.klinedata.Data data = 2;
inline int klinedata::_internal_data_size() const {
  return data_.size();
}
inline int klinedata::data_size() const {
  return _internal_data_size();
}
inline void klinedata::clear_data() {
  data_.Clear();
}
inline ::ukex::klinedata_Data* klinedata::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::klinedata_Data >*
klinedata::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.klinedata.data)
  return &data_;
}
inline const ::ukex::klinedata_Data& klinedata::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ukex::klinedata_Data& klinedata::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.data)
  return _internal_data(index);
}
inline ::ukex::klinedata_Data* klinedata::_internal_add_data() {
  return data_.Add();
}
inline ::ukex::klinedata_Data* klinedata::add_data() {
  // @@protoc_insertion_point(field_add:ukex.klinedata.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::klinedata_Data >&
klinedata::data() const {
  // @@protoc_insertion_point(field_list:ukex.klinedata.data)
  return data_;
}

// required string token = 3;
inline bool klinedata::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool klinedata::has_token() const {
  return _internal_has_token();
}
inline void klinedata::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& klinedata::token() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.token)
  return _internal_token();
}
inline void klinedata::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.token)
}
inline std::string* klinedata::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.token)
  return _internal_mutable_token();
}
inline const std::string& klinedata::_internal_token() const {
  return token_.GetNoArena();
}
inline void klinedata::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void klinedata::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.klinedata.token)
}
inline void klinedata::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.token)
}
inline void klinedata::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.token)
}
inline std::string* klinedata::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* klinedata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void klinedata::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::klinedata_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::klinedata_CONST>() {
  return ::ukex::klinedata_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2eklinedata_2eproto
