// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.matcheddata.proto

#include "ukex.matcheddata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukex_2ematcheddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2ematcheddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto;
namespace ukex {
class matcheddata_BuyUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<matcheddata_BuyUser> _instance;
} _matcheddata_BuyUser_default_instance_;
class matcheddata_SellUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<matcheddata_SellUser> _instance;
} _matcheddata_SellUser_default_instance_;
class matcheddataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<matcheddata> _instance;
} _matcheddata_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_matcheddata_ukex_2ematcheddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_matcheddata_default_instance_;
    new (ptr) ::ukex::matcheddata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::matcheddata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_matcheddata_ukex_2ematcheddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_matcheddata_ukex_2ematcheddata_2eproto}, {
      &scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto.base,
      &scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto.base,}};

static void InitDefaultsscc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_matcheddata_BuyUser_default_instance_;
    new (ptr) ::ukex::matcheddata_BuyUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::matcheddata_BuyUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto}, {}};

static void InitDefaultsscc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_matcheddata_SellUser_default_instance_;
    new (ptr) ::ukex::matcheddata_SellUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::matcheddata_SellUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2ematcheddata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2ematcheddata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2ematcheddata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2ematcheddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_BuyUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_BuyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_BuyUser, userid_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_BuyUser, orderid_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_BuyUser, buyprice_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_SellUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_SellUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_SellUser, userid_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_SellUser, orderid_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata_SellUser, sellprice_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, price_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, number_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, buyuser_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, selluser_),
  PROTOBUF_FIELD_OFFSET(::ukex::matcheddata, token_),
  0,
  1,
  3,
  4,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ukex::matcheddata_BuyUser)},
  { 11, 19, sizeof(::ukex::matcheddata_SellUser)},
  { 22, 32, sizeof(::ukex::matcheddata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_matcheddata_BuyUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_matcheddata_SellUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_matcheddata_default_instance_),
};

const char descriptor_table_protodef_ukex_2ematcheddata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026ukex.matcheddata.proto\022\004ukex\"\245\002\n\013match"
  "eddata\022\r\n\005price\030\001 \002(\t\022\016\n\006number\030\002 \002(\t\022*\n"
  "\007buyuser\030\003 \002(\0132\031.ukex.matcheddata.BuyUse"
  "r\022,\n\010selluser\030\004 \002(\0132\032.ukex.matcheddata.S"
  "ellUser\022\r\n\005token\030\005 \002(\t\032<\n\007BuyUser\022\016\n\006use"
  "rid\030\001 \002(\004\022\017\n\007orderid\030\002 \002(\004\022\020\n\010buyPrice\030\003"
  " \002(\t\032>\n\010SellUser\022\016\n\006userid\030\001 \002(\004\022\017\n\007orde"
  "rid\030\002 \002(\004\022\021\n\tsellPrice\030\003 \002(\t\"\020\n\005CONST\022\007\n"
  "\003CMD\020l"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2ematcheddata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2ematcheddata_2eproto_sccs[3] = {
  &scc_info_matcheddata_ukex_2ematcheddata_2eproto.base,
  &scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto.base,
  &scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2ematcheddata_2eproto_once;
static bool descriptor_table_ukex_2ematcheddata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ematcheddata_2eproto = {
  &descriptor_table_ukex_2ematcheddata_2eproto_initialized, descriptor_table_protodef_ukex_2ematcheddata_2eproto, "ukex.matcheddata.proto", 326,
  &descriptor_table_ukex_2ematcheddata_2eproto_once, descriptor_table_ukex_2ematcheddata_2eproto_sccs, descriptor_table_ukex_2ematcheddata_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ukex_2ematcheddata_2eproto::offsets,
  file_level_metadata_ukex_2ematcheddata_2eproto, 3, file_level_enum_descriptors_ukex_2ematcheddata_2eproto, file_level_service_descriptors_ukex_2ematcheddata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2ematcheddata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2ematcheddata_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* matcheddata_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2ematcheddata_2eproto);
  return file_level_enum_descriptors_ukex_2ematcheddata_2eproto[0];
}
bool matcheddata_CONST_IsValid(int value) {
  switch (value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr matcheddata_CONST matcheddata::CMD;
constexpr matcheddata_CONST matcheddata::CONST_MIN;
constexpr matcheddata_CONST matcheddata::CONST_MAX;
constexpr int matcheddata::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void matcheddata_BuyUser::InitAsDefaultInstance() {
}
class matcheddata_BuyUser::_Internal {
 public:
  using HasBits = decltype(std::declval<matcheddata_BuyUser>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buyprice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

matcheddata_BuyUser::matcheddata_BuyUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata.BuyUser)
}
matcheddata_BuyUser::matcheddata_BuyUser(const matcheddata_BuyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buyprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buyprice()) {
    buyprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buyprice_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata.BuyUser)
}

void matcheddata_BuyUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto.base);
  buyprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
}

matcheddata_BuyUser::~matcheddata_BuyUser() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata.BuyUser)
  SharedDtor();
}

void matcheddata_BuyUser::SharedDtor() {
  buyprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void matcheddata_BuyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matcheddata_BuyUser& matcheddata_BuyUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_matcheddata_BuyUser_ukex_2ematcheddata_2eproto.base);
  return *internal_default_instance();
}


void matcheddata_BuyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata.BuyUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buyprice_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* matcheddata_BuyUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 orderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string buyPrice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_buyprice(), ptr, ctx, "ukex.matcheddata.BuyUser.buyPrice");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matcheddata_BuyUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata.BuyUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // required uint64 orderid = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_orderid(), target);
  }

  // required string buyPrice = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buyprice().data(), static_cast<int>(this->_internal_buyprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.buyPrice");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buyprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata.BuyUser)
  return target;
}

size_t matcheddata_BuyUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata.BuyUser)
  size_t total_size = 0;

  if (has_buyprice()) {
    // required string buyPrice = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyprice());
  }

  if (has_userid()) {
    // required uint64 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (has_orderid()) {
    // required uint64 orderid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orderid());
  }

  return total_size;
}
size_t matcheddata_BuyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata.BuyUser)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string buyPrice = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyprice());

    // required uint64 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());

    // required uint64 orderid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orderid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matcheddata_BuyUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata.BuyUser)
  GOOGLE_DCHECK_NE(&from, this);
  const matcheddata_BuyUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matcheddata_BuyUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata.BuyUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata.BuyUser)
    MergeFrom(*source);
  }
}

void matcheddata_BuyUser::MergeFrom(const matcheddata_BuyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata.BuyUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buyprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buyprice_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void matcheddata_BuyUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata.BuyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata_BuyUser::CopyFrom(const matcheddata_BuyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata.BuyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata_BuyUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void matcheddata_BuyUser::InternalSwap(matcheddata_BuyUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buyprice_.Swap(&other->buyprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(orderid_, other->orderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matcheddata_BuyUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void matcheddata_SellUser::InitAsDefaultInstance() {
}
class matcheddata_SellUser::_Internal {
 public:
  using HasBits = decltype(std::declval<matcheddata_SellUser>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sellprice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

matcheddata_SellUser::matcheddata_SellUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata.SellUser)
}
matcheddata_SellUser::matcheddata_SellUser(const matcheddata_SellUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sellprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sellprice()) {
    sellprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellprice_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata.SellUser)
}

void matcheddata_SellUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto.base);
  sellprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
}

matcheddata_SellUser::~matcheddata_SellUser() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata.SellUser)
  SharedDtor();
}

void matcheddata_SellUser::SharedDtor() {
  sellprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void matcheddata_SellUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matcheddata_SellUser& matcheddata_SellUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_matcheddata_SellUser_ukex_2ematcheddata_2eproto.base);
  return *internal_default_instance();
}


void matcheddata_SellUser::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata.SellUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sellprice_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(orderid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* matcheddata_SellUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 orderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sellPrice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_sellprice(), ptr, ctx, "ukex.matcheddata.SellUser.sellPrice");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matcheddata_SellUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata.SellUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // required uint64 orderid = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_orderid(), target);
  }

  // required string sellPrice = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sellprice().data(), static_cast<int>(this->_internal_sellprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.sellPrice");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sellprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata.SellUser)
  return target;
}

size_t matcheddata_SellUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata.SellUser)
  size_t total_size = 0;

  if (has_sellprice()) {
    // required string sellPrice = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellprice());
  }

  if (has_userid()) {
    // required uint64 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (has_orderid()) {
    // required uint64 orderid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orderid());
  }

  return total_size;
}
size_t matcheddata_SellUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata.SellUser)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sellPrice = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellprice());

    // required uint64 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());

    // required uint64 orderid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orderid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matcheddata_SellUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata.SellUser)
  GOOGLE_DCHECK_NE(&from, this);
  const matcheddata_SellUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matcheddata_SellUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata.SellUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata.SellUser)
    MergeFrom(*source);
  }
}

void matcheddata_SellUser::MergeFrom(const matcheddata_SellUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata.SellUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sellprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellprice_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void matcheddata_SellUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata.SellUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata_SellUser::CopyFrom(const matcheddata_SellUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata.SellUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata_SellUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void matcheddata_SellUser::InternalSwap(matcheddata_SellUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sellprice_.Swap(&other->sellprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(orderid_, other->orderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matcheddata_SellUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void matcheddata::InitAsDefaultInstance() {
  ::ukex::_matcheddata_default_instance_._instance.get_mutable()->buyuser_ = const_cast< ::ukex::matcheddata_BuyUser*>(
      ::ukex::matcheddata_BuyUser::internal_default_instance());
  ::ukex::_matcheddata_default_instance_._instance.get_mutable()->selluser_ = const_cast< ::ukex::matcheddata_SellUser*>(
      ::ukex::matcheddata_SellUser::internal_default_instance());
}
class matcheddata::_Internal {
 public:
  using HasBits = decltype(std::declval<matcheddata>()._has_bits_);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ukex::matcheddata_BuyUser& buyuser(const matcheddata* msg);
  static void set_has_buyuser(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ukex::matcheddata_SellUser& selluser(const matcheddata* msg);
  static void set_has_selluser(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ukex::matcheddata_BuyUser&
matcheddata::_Internal::buyuser(const matcheddata* msg) {
  return *msg->buyuser_;
}
const ::ukex::matcheddata_SellUser&
matcheddata::_Internal::selluser(const matcheddata* msg) {
  return *msg->selluser_;
}
matcheddata::matcheddata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata)
}
matcheddata::matcheddata(const matcheddata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_price()) {
    price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_);
  }
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_number()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_buyuser()) {
    buyuser_ = new ::ukex::matcheddata_BuyUser(*from.buyuser_);
  } else {
    buyuser_ = nullptr;
  }
  if (from._internal_has_selluser()) {
    selluser_ = new ::ukex::matcheddata_SellUser(*from.selluser_);
  } else {
    selluser_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata)
}

void matcheddata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_matcheddata_ukex_2ematcheddata_2eproto.base);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buyuser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selluser_) -
      reinterpret_cast<char*>(&buyuser_)) + sizeof(selluser_));
}

matcheddata::~matcheddata() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata)
  SharedDtor();
}

void matcheddata::SharedDtor() {
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buyuser_;
  if (this != internal_default_instance()) delete selluser_;
}

void matcheddata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const matcheddata& matcheddata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_matcheddata_ukex_2ematcheddata_2eproto.base);
  return *internal_default_instance();
}


void matcheddata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      price_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(buyuser_ != nullptr);
      buyuser_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(selluser_ != nullptr);
      selluser_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* matcheddata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_price(), ptr, ctx, "ukex.matcheddata.price");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_number(), ptr, ctx, "ukex.matcheddata.number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ukex.matcheddata.BuyUser buyuser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ukex.matcheddata.SellUser selluser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selluser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_token(), ptr, ctx, "ukex.matcheddata.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matcheddata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string price = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.price");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_price(), target);
  }

  // required string number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_number(), target);
  }

  // required .ukex.matcheddata.BuyUser buyuser = 3;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::buyuser(this), target, stream);
  }

  // required .ukex.matcheddata.SellUser selluser = 4;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::selluser(this), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata)
  return target;
}

size_t matcheddata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata)
  size_t total_size = 0;

  if (has_price()) {
    // required string price = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  if (has_number()) {
    // required string number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  if (has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (has_buyuser()) {
    // required .ukex.matcheddata.BuyUser buyuser = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buyuser_);
  }

  if (has_selluser()) {
    // required .ukex.matcheddata.SellUser selluser = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selluser_);
  }

  return total_size;
}
size_t matcheddata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string price = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());

    // required string number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());

    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .ukex.matcheddata.BuyUser buyuser = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buyuser_);

    // required .ukex.matcheddata.SellUser selluser = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selluser_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matcheddata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata)
  GOOGLE_DCHECK_NE(&from, this);
  const matcheddata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matcheddata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata)
    MergeFrom(*source);
  }
}

void matcheddata::MergeFrom(const matcheddata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_buyuser()->::ukex::matcheddata_BuyUser::MergeFrom(from._internal_buyuser());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_selluser()->::ukex::matcheddata_SellUser::MergeFrom(from._internal_selluser());
    }
  }
}

void matcheddata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata::CopyFrom(const matcheddata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_buyuser()) {
    if (!this->buyuser_->IsInitialized()) return false;
  }
  if (has_selluser()) {
    if (!this->selluser_->IsInitialized()) return false;
  }
  return true;
}

void matcheddata::InternalSwap(matcheddata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  price_.Swap(&other->price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buyuser_, other->buyuser_);
  swap(selluser_, other->selluser_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matcheddata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::matcheddata_BuyUser* Arena::CreateMaybeMessage< ::ukex::matcheddata_BuyUser >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::matcheddata_BuyUser >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::matcheddata_SellUser* Arena::CreateMaybeMessage< ::ukex::matcheddata_SellUser >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::matcheddata_SellUser >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::matcheddata* Arena::CreateMaybeMessage< ::ukex::matcheddata >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::matcheddata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
