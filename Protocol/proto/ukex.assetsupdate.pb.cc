// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.assetsupdate.proto

#include "ukex.assetsupdate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukex_2eassetsupdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto;
namespace ukex {
class assetsupdate_ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<assetsupdate_List> _instance;
} _assetsupdate_List_default_instance_;
class assetsupdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<assetsupdate> _instance;
} _assetsupdate_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_assetsupdate_ukex_2eassetsupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_assetsupdate_default_instance_;
    new (ptr) ::ukex::assetsupdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::assetsupdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_assetsupdate_ukex_2eassetsupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_assetsupdate_ukex_2eassetsupdate_2eproto}, {
      &scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto.base,}};

static void InitDefaultsscc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_assetsupdate_List_default_instance_;
    new (ptr) ::ukex::assetsupdate_List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::assetsupdate_List::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2eassetsupdate_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2eassetsupdate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2eassetsupdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2eassetsupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, uid_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, type_id_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, type_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, coinid_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, usable_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, fronzen_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate_List, lockup_),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, uid_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, paypassword_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, opertype_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, operid_),
  PROTOBUF_FIELD_OFFSET(::ukex::assetsupdate, list_),
  1,
  0,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::ukex::assetsupdate_List)},
  { 19, 29, sizeof(::ukex::assetsupdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_assetsupdate_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_assetsupdate_default_instance_),
};

const char descriptor_table_protodef_ukex_2eassetsupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ukex.assetsupdate.proto\022\004ukex\"\200\002\n\014asse"
  "tsupdate\022\013\n\003uid\030\001 \002(\004\022\023\n\013paypassword\030\002 \001"
  "(\t\022\020\n\010opertype\030\003 \002(\r\022\016\n\006operid\030\004 \002(\r\022%\n\004"
  "list\030\005 \003(\0132\027.ukex.assetsupdate.List\032s\n\004L"
  "ist\022\013\n\003uid\030\001 \002(\004\022\017\n\007type_id\030\002 \002(\r\022\014\n\004typ"
  "e\030\003 \002(\r\022\016\n\006coinid\030\004 \002(\r\022\016\n\006usable\030\005 \002(\t\022"
  "\017\n\007fronzen\030\006 \002(\t\022\016\n\006lockup\030\007 \002(\t\"\020\n\005CONS"
  "T\022\007\n\003CMD\020u"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2eassetsupdate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2eassetsupdate_2eproto_sccs[2] = {
  &scc_info_assetsupdate_ukex_2eassetsupdate_2eproto.base,
  &scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2eassetsupdate_2eproto_once;
static bool descriptor_table_ukex_2eassetsupdate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2eassetsupdate_2eproto = {
  &descriptor_table_ukex_2eassetsupdate_2eproto_initialized, descriptor_table_protodef_ukex_2eassetsupdate_2eproto, "ukex.assetsupdate.proto", 290,
  &descriptor_table_ukex_2eassetsupdate_2eproto_once, descriptor_table_ukex_2eassetsupdate_2eproto_sccs, descriptor_table_ukex_2eassetsupdate_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ukex_2eassetsupdate_2eproto::offsets,
  file_level_metadata_ukex_2eassetsupdate_2eproto, 2, file_level_enum_descriptors_ukex_2eassetsupdate_2eproto, file_level_service_descriptors_ukex_2eassetsupdate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2eassetsupdate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2eassetsupdate_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* assetsupdate_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2eassetsupdate_2eproto);
  return file_level_enum_descriptors_ukex_2eassetsupdate_2eproto[0];
}
bool assetsupdate_CONST_IsValid(int value) {
  switch (value) {
    case 117:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr assetsupdate_CONST assetsupdate::CMD;
constexpr assetsupdate_CONST assetsupdate::CONST_MIN;
constexpr assetsupdate_CONST assetsupdate::CONST_MAX;
constexpr int assetsupdate::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void assetsupdate_List::InitAsDefaultInstance() {
}
class assetsupdate_List::_Internal {
 public:
  using HasBits = decltype(std::declval<assetsupdate_List>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_coinid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fronzen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lockup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

assetsupdate_List::assetsupdate_List()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.assetsupdate.List)
}
assetsupdate_List::assetsupdate_List(const assetsupdate_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_usable()) {
    usable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usable_);
  }
  fronzen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fronzen()) {
    fronzen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fronzen_);
  }
  lockup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lockup()) {
    lockup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockup_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&coinid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(coinid_));
  // @@protoc_insertion_point(copy_constructor:ukex.assetsupdate.List)
}

void assetsupdate_List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto.base);
  usable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fronzen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coinid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(coinid_));
}

assetsupdate_List::~assetsupdate_List() {
  // @@protoc_insertion_point(destructor:ukex.assetsupdate.List)
  SharedDtor();
}

void assetsupdate_List::SharedDtor() {
  usable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fronzen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void assetsupdate_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const assetsupdate_List& assetsupdate_List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_assetsupdate_List_ukex_2eassetsupdate_2eproto.base);
  return *internal_default_instance();
}


void assetsupdate_List::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.assetsupdate.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      usable_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fronzen_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      lockup_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coinid_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(coinid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* assetsupdate_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 coinid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_coinid(&has_bits);
          coinid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string usable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_usable(), ptr, ctx, "ukex.assetsupdate.List.usable");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string fronzen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_fronzen(), ptr, ctx, "ukex.assetsupdate.List.fronzen");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string lockup = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_lockup(), ptr, ctx, "ukex.assetsupdate.List.lockup");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* assetsupdate_List::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.assetsupdate.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // required uint32 type_id = 2;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_id(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // required uint32 coinid = 4;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_coinid(), target);
  }

  // required string usable = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_usable().data(), static_cast<int>(this->_internal_usable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.assetsupdate.List.usable");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_usable(), target);
  }

  // required string fronzen = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fronzen().data(), static_cast<int>(this->_internal_fronzen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.assetsupdate.List.fronzen");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fronzen(), target);
  }

  // required string lockup = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lockup().data(), static_cast<int>(this->_internal_lockup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.assetsupdate.List.lockup");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lockup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.assetsupdate.List)
  return target;
}

size_t assetsupdate_List::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.assetsupdate.List)
  size_t total_size = 0;

  if (has_usable()) {
    // required string usable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usable());
  }

  if (has_fronzen()) {
    // required string fronzen = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fronzen());
  }

  if (has_lockup()) {
    // required string lockup = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockup());
  }

  if (has_uid()) {
    // required uint64 uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  if (has_type_id()) {
    // required uint32 type_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_id());
  }

  if (has_type()) {
    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (has_coinid()) {
    // required uint32 coinid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coinid());
  }

  return total_size;
}
size_t assetsupdate_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.assetsupdate.List)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string usable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usable());

    // required string fronzen = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fronzen());

    // required string lockup = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockup());

    // required uint64 uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());

    // required uint32 type_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_id());

    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 coinid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coinid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void assetsupdate_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.assetsupdate.List)
  GOOGLE_DCHECK_NE(&from, this);
  const assetsupdate_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<assetsupdate_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.assetsupdate.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.assetsupdate.List)
    MergeFrom(*source);
  }
}

void assetsupdate_List::MergeFrom(const assetsupdate_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.assetsupdate.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      usable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usable_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fronzen_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fronzen_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      lockup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockup_);
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      coinid_ = from.coinid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void assetsupdate_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.assetsupdate.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assetsupdate_List::CopyFrom(const assetsupdate_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.assetsupdate.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assetsupdate_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void assetsupdate_List::InternalSwap(assetsupdate_List* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usable_.Swap(&other->usable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fronzen_.Swap(&other->fronzen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lockup_.Swap(&other->lockup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(type_id_, other->type_id_);
  swap(type_, other->type_);
  swap(coinid_, other->coinid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata assetsupdate_List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void assetsupdate::InitAsDefaultInstance() {
}
class assetsupdate::_Internal {
 public:
  using HasBits = decltype(std::declval<assetsupdate>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paypassword(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opertype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

assetsupdate::assetsupdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.assetsupdate)
}
assetsupdate::assetsupdate(const assetsupdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paypassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paypassword()) {
    paypassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paypassword_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operid_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(operid_));
  // @@protoc_insertion_point(copy_constructor:ukex.assetsupdate)
}

void assetsupdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_assetsupdate_ukex_2eassetsupdate_2eproto.base);
  paypassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operid_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(operid_));
}

assetsupdate::~assetsupdate() {
  // @@protoc_insertion_point(destructor:ukex.assetsupdate)
  SharedDtor();
}

void assetsupdate::SharedDtor() {
  paypassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void assetsupdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const assetsupdate& assetsupdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_assetsupdate_ukex_2eassetsupdate_2eproto.base);
  return *internal_default_instance();
}


void assetsupdate::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.assetsupdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    paypassword_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operid_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(operid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* assetsupdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paypassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_paypassword(), ptr, ctx, "ukex.assetsupdate.paypassword");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 opertype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_opertype(&has_bits);
          opertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 operid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_operid(&has_bits);
          operid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ukex.assetsupdate.List list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* assetsupdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.assetsupdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional string paypassword = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paypassword().data(), static_cast<int>(this->_internal_paypassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.assetsupdate.paypassword");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paypassword(), target);
  }

  // required uint32 opertype = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opertype(), target);
  }

  // required uint32 operid = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_operid(), target);
  }

  // repeated .ukex.assetsupdate.List list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.assetsupdate)
  return target;
}

size_t assetsupdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.assetsupdate)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint64 uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  if (has_opertype()) {
    // required uint32 opertype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opertype());
  }

  if (has_operid()) {
    // required uint32 operid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operid());
  }

  return total_size;
}
size_t assetsupdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.assetsupdate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint64 uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());

    // required uint32 opertype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opertype());

    // required uint32 operid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukex.assetsupdate.List list = 5;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string paypassword = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paypassword());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void assetsupdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.assetsupdate)
  GOOGLE_DCHECK_NE(&from, this);
  const assetsupdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<assetsupdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.assetsupdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.assetsupdate)
    MergeFrom(*source);
  }
}

void assetsupdate::MergeFrom(const assetsupdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.assetsupdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      paypassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paypassword_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      opertype_ = from.opertype_;
    }
    if (cached_has_bits & 0x00000008u) {
      operid_ = from.operid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void assetsupdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.assetsupdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assetsupdate::CopyFrom(const assetsupdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.assetsupdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assetsupdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void assetsupdate::InternalSwap(assetsupdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  list_.InternalSwap(&other->list_);
  paypassword_.Swap(&other->paypassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(opertype_, other->opertype_);
  swap(operid_, other->operid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata assetsupdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::assetsupdate_List* Arena::CreateMaybeMessage< ::ukex::assetsupdate_List >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::assetsupdate_List >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::assetsupdate* Arena::CreateMaybeMessage< ::ukex::assetsupdate >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::assetsupdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
