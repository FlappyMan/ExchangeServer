// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.depthdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2edepthdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2edepthdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2edepthdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2edepthdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2edepthdata_2eproto;
namespace ukex {
class depthdata;
class depthdataDefaultTypeInternal;
extern depthdataDefaultTypeInternal _depthdata_default_instance_;
class depthdata_Data;
class depthdata_DataDefaultTypeInternal;
extern depthdata_DataDefaultTypeInternal _depthdata_Data_default_instance_;
class depthdata_Data_Depth;
class depthdata_Data_DepthDefaultTypeInternal;
extern depthdata_Data_DepthDefaultTypeInternal _depthdata_Data_Depth_default_instance_;
class depthdata_Data_Depth_buyAction;
class depthdata_Data_Depth_buyActionDefaultTypeInternal;
extern depthdata_Data_Depth_buyActionDefaultTypeInternal _depthdata_Data_Depth_buyAction_default_instance_;
class depthdata_Data_Depth_sellAction;
class depthdata_Data_Depth_sellActionDefaultTypeInternal;
extern depthdata_Data_Depth_sellActionDefaultTypeInternal _depthdata_Data_Depth_sellAction_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::depthdata* Arena::CreateMaybeMessage<::ukex::depthdata>(Arena*);
template<> ::ukex::depthdata_Data* Arena::CreateMaybeMessage<::ukex::depthdata_Data>(Arena*);
template<> ::ukex::depthdata_Data_Depth* Arena::CreateMaybeMessage<::ukex::depthdata_Data_Depth>(Arena*);
template<> ::ukex::depthdata_Data_Depth_buyAction* Arena::CreateMaybeMessage<::ukex::depthdata_Data_Depth_buyAction>(Arena*);
template<> ::ukex::depthdata_Data_Depth_sellAction* Arena::CreateMaybeMessage<::ukex::depthdata_Data_Depth_sellAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum depthdata_CONST : int {
  depthdata_CONST_CMD = 106
};
bool depthdata_CONST_IsValid(int value);
constexpr depthdata_CONST depthdata_CONST_CONST_MIN = depthdata_CONST_CMD;
constexpr depthdata_CONST depthdata_CONST_CONST_MAX = depthdata_CONST_CMD;
constexpr int depthdata_CONST_CONST_ARRAYSIZE = depthdata_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* depthdata_CONST_descriptor();
template<typename T>
inline const std::string& depthdata_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, depthdata_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function depthdata_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    depthdata_CONST_descriptor(), enum_t_value);
}
inline bool depthdata_CONST_Parse(
    const std::string& name, depthdata_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<depthdata_CONST>(
    depthdata_CONST_descriptor(), name, value);
}
// ===================================================================

class depthdata_Data_Depth_buyAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth.buyAction) */ {
 public:
  depthdata_Data_Depth_buyAction();
  virtual ~depthdata_Data_Depth_buyAction();

  depthdata_Data_Depth_buyAction(const depthdata_Data_Depth_buyAction& from);
  depthdata_Data_Depth_buyAction(depthdata_Data_Depth_buyAction&& from) noexcept
    : depthdata_Data_Depth_buyAction() {
    *this = ::std::move(from);
  }

  inline depthdata_Data_Depth_buyAction& operator=(const depthdata_Data_Depth_buyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline depthdata_Data_Depth_buyAction& operator=(depthdata_Data_Depth_buyAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depthdata_Data_Depth_buyAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depthdata_Data_Depth_buyAction* internal_default_instance() {
    return reinterpret_cast<const depthdata_Data_Depth_buyAction*>(
               &_depthdata_Data_Depth_buyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(depthdata_Data_Depth_buyAction& a, depthdata_Data_Depth_buyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(depthdata_Data_Depth_buyAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth_buyAction* New() const final {
    return CreateMaybeMessage<depthdata_Data_Depth_buyAction>(nullptr);
  }

  depthdata_Data_Depth_buyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depthdata_Data_Depth_buyAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depthdata_Data_Depth_buyAction& from);
  void MergeFrom(const depthdata_Data_Depth_buyAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depthdata_Data_Depth_buyAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.depthdata.Data.Depth.buyAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2edepthdata_2eproto);
    return ::descriptor_table_ukex_2edepthdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kB0FieldNumber = 1,
    kB1FieldNumber = 2,
  };
  // required string b0 = 1;
  bool has_b0() const;
  private:
  bool _internal_has_b0() const;
  public:
  void clear_b0();
  const std::string& b0() const;
  void set_b0(const std::string& value);
  void set_b0(std::string&& value);
  void set_b0(const char* value);
  void set_b0(const char* value, size_t size);
  std::string* mutable_b0();
  std::string* release_b0();
  void set_allocated_b0(std::string* b0);
  private:
  const std::string& _internal_b0() const;
  void _internal_set_b0(const std::string& value);
  std::string* _internal_mutable_b0();
  public:

  // required string b1 = 2;
  bool has_b1() const;
  private:
  bool _internal_has_b1() const;
  public:
  void clear_b1();
  const std::string& b1() const;
  void set_b1(const std::string& value);
  void set_b1(std::string&& value);
  void set_b1(const char* value);
  void set_b1(const char* value, size_t size);
  std::string* mutable_b1();
  std::string* release_b1();
  void set_allocated_b1(std::string* b1);
  private:
  const std::string& _internal_b1() const;
  void _internal_set_b1(const std::string& value);
  std::string* _internal_mutable_b1();
  public:

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth.buyAction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b1_;
  friend struct ::TableStruct_ukex_2edepthdata_2eproto;
};
// -------------------------------------------------------------------

class depthdata_Data_Depth_sellAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth.sellAction) */ {
 public:
  depthdata_Data_Depth_sellAction();
  virtual ~depthdata_Data_Depth_sellAction();

  depthdata_Data_Depth_sellAction(const depthdata_Data_Depth_sellAction& from);
  depthdata_Data_Depth_sellAction(depthdata_Data_Depth_sellAction&& from) noexcept
    : depthdata_Data_Depth_sellAction() {
    *this = ::std::move(from);
  }

  inline depthdata_Data_Depth_sellAction& operator=(const depthdata_Data_Depth_sellAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline depthdata_Data_Depth_sellAction& operator=(depthdata_Data_Depth_sellAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depthdata_Data_Depth_sellAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depthdata_Data_Depth_sellAction* internal_default_instance() {
    return reinterpret_cast<const depthdata_Data_Depth_sellAction*>(
               &_depthdata_Data_Depth_sellAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(depthdata_Data_Depth_sellAction& a, depthdata_Data_Depth_sellAction& b) {
    a.Swap(&b);
  }
  inline void Swap(depthdata_Data_Depth_sellAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth_sellAction* New() const final {
    return CreateMaybeMessage<depthdata_Data_Depth_sellAction>(nullptr);
  }

  depthdata_Data_Depth_sellAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depthdata_Data_Depth_sellAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depthdata_Data_Depth_sellAction& from);
  void MergeFrom(const depthdata_Data_Depth_sellAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depthdata_Data_Depth_sellAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.depthdata.Data.Depth.sellAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2edepthdata_2eproto);
    return ::descriptor_table_ukex_2edepthdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kS0FieldNumber = 1,
    kS1FieldNumber = 2,
  };
  // required string s0 = 1;
  bool has_s0() const;
  private:
  bool _internal_has_s0() const;
  public:
  void clear_s0();
  const std::string& s0() const;
  void set_s0(const std::string& value);
  void set_s0(std::string&& value);
  void set_s0(const char* value);
  void set_s0(const char* value, size_t size);
  std::string* mutable_s0();
  std::string* release_s0();
  void set_allocated_s0(std::string* s0);
  private:
  const std::string& _internal_s0() const;
  void _internal_set_s0(const std::string& value);
  std::string* _internal_mutable_s0();
  public:

  // required string s1 = 2;
  bool has_s1() const;
  private:
  bool _internal_has_s1() const;
  public:
  void clear_s1();
  const std::string& s1() const;
  void set_s1(const std::string& value);
  void set_s1(std::string&& value);
  void set_s1(const char* value);
  void set_s1(const char* value, size_t size);
  std::string* mutable_s1();
  std::string* release_s1();
  void set_allocated_s1(std::string* s1);
  private:
  const std::string& _internal_s1() const;
  void _internal_set_s1(const std::string& value);
  std::string* _internal_mutable_s1();
  public:

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth.sellAction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_;
  friend struct ::TableStruct_ukex_2edepthdata_2eproto;
};
// -------------------------------------------------------------------

class depthdata_Data_Depth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth) */ {
 public:
  depthdata_Data_Depth();
  virtual ~depthdata_Data_Depth();

  depthdata_Data_Depth(const depthdata_Data_Depth& from);
  depthdata_Data_Depth(depthdata_Data_Depth&& from) noexcept
    : depthdata_Data_Depth() {
    *this = ::std::move(from);
  }

  inline depthdata_Data_Depth& operator=(const depthdata_Data_Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline depthdata_Data_Depth& operator=(depthdata_Data_Depth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depthdata_Data_Depth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depthdata_Data_Depth* internal_default_instance() {
    return reinterpret_cast<const depthdata_Data_Depth*>(
               &_depthdata_Data_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(depthdata_Data_Depth& a, depthdata_Data_Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(depthdata_Data_Depth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth* New() const final {
    return CreateMaybeMessage<depthdata_Data_Depth>(nullptr);
  }

  depthdata_Data_Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depthdata_Data_Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depthdata_Data_Depth& from);
  void MergeFrom(const depthdata_Data_Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depthdata_Data_Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.depthdata.Data.Depth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2edepthdata_2eproto);
    return ::descriptor_table_ukex_2edepthdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef depthdata_Data_Depth_buyAction buyAction;
  typedef depthdata_Data_Depth_sellAction sellAction;

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 1,
    kSellFieldNumber = 2,
  };
  // repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::ukex::depthdata_Data_Depth_buyAction* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >*
      mutable_buy();
  private:
  const ::ukex::depthdata_Data_Depth_buyAction& _internal_buy(int index) const;
  ::ukex::depthdata_Data_Depth_buyAction* _internal_add_buy();
  public:
  const ::ukex::depthdata_Data_Depth_buyAction& buy(int index) const;
  ::ukex::depthdata_Data_Depth_buyAction* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >&
      buy() const;

  // repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::ukex::depthdata_Data_Depth_sellAction* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >*
      mutable_sell();
  private:
  const ::ukex::depthdata_Data_Depth_sellAction& _internal_sell(int index) const;
  ::ukex::depthdata_Data_Depth_sellAction* _internal_add_sell();
  public:
  const ::ukex::depthdata_Data_Depth_sellAction& sell(int index) const;
  ::ukex::depthdata_Data_Depth_sellAction* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >&
      sell() const;

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction > sell_;
  friend struct ::TableStruct_ukex_2edepthdata_2eproto;
};
// -------------------------------------------------------------------

class depthdata_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data) */ {
 public:
  depthdata_Data();
  virtual ~depthdata_Data();

  depthdata_Data(const depthdata_Data& from);
  depthdata_Data(depthdata_Data&& from) noexcept
    : depthdata_Data() {
    *this = ::std::move(from);
  }

  inline depthdata_Data& operator=(const depthdata_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline depthdata_Data& operator=(depthdata_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depthdata_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depthdata_Data* internal_default_instance() {
    return reinterpret_cast<const depthdata_Data*>(
               &_depthdata_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(depthdata_Data& a, depthdata_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(depthdata_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depthdata_Data* New() const final {
    return CreateMaybeMessage<depthdata_Data>(nullptr);
  }

  depthdata_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depthdata_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depthdata_Data& from);
  void MergeFrom(const depthdata_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depthdata_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.depthdata.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2edepthdata_2eproto);
    return ::descriptor_table_ukex_2edepthdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef depthdata_Data_Depth Depth;

  // accessors -------------------------------------------------------

  enum : int {
    kDepthFieldNumber = 1,
  };
  // required .ukex.depthdata.Data.Depth depth = 1;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  const ::ukex::depthdata_Data_Depth& depth() const;
  ::ukex::depthdata_Data_Depth* release_depth();
  ::ukex::depthdata_Data_Depth* mutable_depth();
  void set_allocated_depth(::ukex::depthdata_Data_Depth* depth);
  private:
  const ::ukex::depthdata_Data_Depth& _internal_depth() const;
  ::ukex::depthdata_Data_Depth* _internal_mutable_depth();
  public:

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ukex::depthdata_Data_Depth* depth_;
  friend struct ::TableStruct_ukex_2edepthdata_2eproto;
};
// -------------------------------------------------------------------

class depthdata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata) */ {
 public:
  depthdata();
  virtual ~depthdata();

  depthdata(const depthdata& from);
  depthdata(depthdata&& from) noexcept
    : depthdata() {
    *this = ::std::move(from);
  }

  inline depthdata& operator=(const depthdata& from) {
    CopyFrom(from);
    return *this;
  }
  inline depthdata& operator=(depthdata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depthdata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depthdata* internal_default_instance() {
    return reinterpret_cast<const depthdata*>(
               &_depthdata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(depthdata& a, depthdata& b) {
    a.Swap(&b);
  }
  inline void Swap(depthdata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depthdata* New() const final {
    return CreateMaybeMessage<depthdata>(nullptr);
  }

  depthdata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depthdata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depthdata& from);
  void MergeFrom(const depthdata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depthdata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.depthdata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2edepthdata_2eproto);
    return ::descriptor_table_ukex_2edepthdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef depthdata_Data Data;

  typedef depthdata_CONST CONST;
  static constexpr CONST CMD =
    depthdata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return depthdata_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    depthdata_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    depthdata_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    depthdata_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return depthdata_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return depthdata_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return depthdata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTokenFieldNumber = 3,
    kDataFieldNumber = 2,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required .ukex.depthdata.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ukex::depthdata_Data& data() const;
  ::ukex::depthdata_Data* release_data();
  ::ukex::depthdata_Data* mutable_data();
  void set_allocated_data(::ukex::depthdata_Data* data);
  private:
  const ::ukex::depthdata_Data& _internal_data() const;
  ::ukex::depthdata_Data* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ukex.depthdata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::ukex::depthdata_Data* data_;
  friend struct ::TableStruct_ukex_2edepthdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// depthdata_Data_Depth_buyAction

// required string b0 = 1;
inline bool depthdata_Data_Depth_buyAction::_internal_has_b0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool depthdata_Data_Depth_buyAction::has_b0() const {
  return _internal_has_b0();
}
inline void depthdata_Data_Depth_buyAction::clear_b0() {
  b0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& depthdata_Data_Depth_buyAction::b0() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buyAction.b0)
  return _internal_b0();
}
inline void depthdata_Data_Depth_buyAction::set_b0(const std::string& value) {
  _internal_set_b0(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline std::string* depthdata_Data_Depth_buyAction::mutable_b0() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buyAction.b0)
  return _internal_mutable_b0();
}
inline const std::string& depthdata_Data_Depth_buyAction::_internal_b0() const {
  return b0_.GetNoArena();
}
inline void depthdata_Data_Depth_buyAction::_internal_set_b0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata_Data_Depth_buyAction::set_b0(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  b0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline void depthdata_Data_Depth_buyAction::set_b0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  b0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline void depthdata_Data_Depth_buyAction::set_b0(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  b0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline std::string* depthdata_Data_Depth_buyAction::_internal_mutable_b0() {
  _has_bits_[0] |= 0x00000001u;
  return b0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata_Data_Depth_buyAction::release_b0() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.buyAction.b0)
  if (!has_b0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return b0_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_allocated_b0(std::string* b0) {
  if (b0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b0);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.buyAction.b0)
}

// required string b1 = 2;
inline bool depthdata_Data_Depth_buyAction::_internal_has_b1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool depthdata_Data_Depth_buyAction::has_b1() const {
  return _internal_has_b1();
}
inline void depthdata_Data_Depth_buyAction::clear_b1() {
  b1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& depthdata_Data_Depth_buyAction::b1() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buyAction.b1)
  return _internal_b1();
}
inline void depthdata_Data_Depth_buyAction::set_b1(const std::string& value) {
  _internal_set_b1(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline std::string* depthdata_Data_Depth_buyAction::mutable_b1() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buyAction.b1)
  return _internal_mutable_b1();
}
inline const std::string& depthdata_Data_Depth_buyAction::_internal_b1() const {
  return b1_.GetNoArena();
}
inline void depthdata_Data_Depth_buyAction::_internal_set_b1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  b1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata_Data_Depth_buyAction::set_b1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  b1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline void depthdata_Data_Depth_buyAction::set_b1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  b1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline void depthdata_Data_Depth_buyAction::set_b1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  b1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline std::string* depthdata_Data_Depth_buyAction::_internal_mutable_b1() {
  _has_bits_[0] |= 0x00000002u;
  return b1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata_Data_Depth_buyAction::release_b1() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.buyAction.b1)
  if (!has_b1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return b1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_allocated_b1(std::string* b1) {
  if (b1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  b1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b1);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.buyAction.b1)
}

// -------------------------------------------------------------------

// depthdata_Data_Depth_sellAction

// required string s0 = 1;
inline bool depthdata_Data_Depth_sellAction::_internal_has_s0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool depthdata_Data_Depth_sellAction::has_s0() const {
  return _internal_has_s0();
}
inline void depthdata_Data_Depth_sellAction::clear_s0() {
  s0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& depthdata_Data_Depth_sellAction::s0() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sellAction.s0)
  return _internal_s0();
}
inline void depthdata_Data_Depth_sellAction::set_s0(const std::string& value) {
  _internal_set_s0(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline std::string* depthdata_Data_Depth_sellAction::mutable_s0() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sellAction.s0)
  return _internal_mutable_s0();
}
inline const std::string& depthdata_Data_Depth_sellAction::_internal_s0() const {
  return s0_.GetNoArena();
}
inline void depthdata_Data_Depth_sellAction::_internal_set_s0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  s0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata_Data_Depth_sellAction::set_s0(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  s0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline void depthdata_Data_Depth_sellAction::set_s0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  s0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline void depthdata_Data_Depth_sellAction::set_s0(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  s0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline std::string* depthdata_Data_Depth_sellAction::_internal_mutable_s0() {
  _has_bits_[0] |= 0x00000001u;
  return s0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata_Data_Depth_sellAction::release_s0() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.sellAction.s0)
  if (!has_s0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return s0_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_allocated_s0(std::string* s0) {
  if (s0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  s0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s0);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.sellAction.s0)
}

// required string s1 = 2;
inline bool depthdata_Data_Depth_sellAction::_internal_has_s1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool depthdata_Data_Depth_sellAction::has_s1() const {
  return _internal_has_s1();
}
inline void depthdata_Data_Depth_sellAction::clear_s1() {
  s1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& depthdata_Data_Depth_sellAction::s1() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sellAction.s1)
  return _internal_s1();
}
inline void depthdata_Data_Depth_sellAction::set_s1(const std::string& value) {
  _internal_set_s1(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline std::string* depthdata_Data_Depth_sellAction::mutable_s1() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sellAction.s1)
  return _internal_mutable_s1();
}
inline const std::string& depthdata_Data_Depth_sellAction::_internal_s1() const {
  return s1_.GetNoArena();
}
inline void depthdata_Data_Depth_sellAction::_internal_set_s1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  s1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata_Data_Depth_sellAction::set_s1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  s1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline void depthdata_Data_Depth_sellAction::set_s1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  s1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline void depthdata_Data_Depth_sellAction::set_s1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  s1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline std::string* depthdata_Data_Depth_sellAction::_internal_mutable_s1() {
  _has_bits_[0] |= 0x00000002u;
  return s1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata_Data_Depth_sellAction::release_s1() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.sellAction.s1)
  if (!has_s1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return s1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_allocated_s1(std::string* s1) {
  if (s1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  s1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s1);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.sellAction.s1)
}

// -------------------------------------------------------------------

// depthdata_Data_Depth

// repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
inline int depthdata_Data_Depth::_internal_buy_size() const {
  return buy_.size();
}
inline int depthdata_Data_Depth::buy_size() const {
  return _internal_buy_size();
}
inline void depthdata_Data_Depth::clear_buy() {
  buy_.Clear();
}
inline ::ukex::depthdata_Data_Depth_buyAction* depthdata_Data_Depth::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >*
depthdata_Data_Depth::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:ukex.depthdata.Data.Depth.buy)
  return &buy_;
}
inline const ::ukex::depthdata_Data_Depth_buyAction& depthdata_Data_Depth::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::ukex::depthdata_Data_Depth_buyAction& depthdata_Data_Depth::buy(int index) const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buy)
  return _internal_buy(index);
}
inline ::ukex::depthdata_Data_Depth_buyAction* depthdata_Data_Depth::_internal_add_buy() {
  return buy_.Add();
}
inline ::ukex::depthdata_Data_Depth_buyAction* depthdata_Data_Depth::add_buy() {
  // @@protoc_insertion_point(field_add:ukex.depthdata.Data.Depth.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >&
depthdata_Data_Depth::buy() const {
  // @@protoc_insertion_point(field_list:ukex.depthdata.Data.Depth.buy)
  return buy_;
}

// repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
inline int depthdata_Data_Depth::_internal_sell_size() const {
  return sell_.size();
}
inline int depthdata_Data_Depth::sell_size() const {
  return _internal_sell_size();
}
inline void depthdata_Data_Depth::clear_sell() {
  sell_.Clear();
}
inline ::ukex::depthdata_Data_Depth_sellAction* depthdata_Data_Depth::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >*
depthdata_Data_Depth::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:ukex.depthdata.Data.Depth.sell)
  return &sell_;
}
inline const ::ukex::depthdata_Data_Depth_sellAction& depthdata_Data_Depth::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::ukex::depthdata_Data_Depth_sellAction& depthdata_Data_Depth::sell(int index) const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sell)
  return _internal_sell(index);
}
inline ::ukex::depthdata_Data_Depth_sellAction* depthdata_Data_Depth::_internal_add_sell() {
  return sell_.Add();
}
inline ::ukex::depthdata_Data_Depth_sellAction* depthdata_Data_Depth::add_sell() {
  // @@protoc_insertion_point(field_add:ukex.depthdata.Data.Depth.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >&
depthdata_Data_Depth::sell() const {
  // @@protoc_insertion_point(field_list:ukex.depthdata.Data.Depth.sell)
  return sell_;
}

// -------------------------------------------------------------------

// depthdata_Data

// required .ukex.depthdata.Data.Depth depth = 1;
inline bool depthdata_Data::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || depth_ != nullptr);
  return value;
}
inline bool depthdata_Data::has_depth() const {
  return _internal_has_depth();
}
inline void depthdata_Data::clear_depth() {
  if (depth_ != nullptr) depth_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ukex::depthdata_Data_Depth& depthdata_Data::_internal_depth() const {
  const ::ukex::depthdata_Data_Depth* p = depth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::depthdata_Data_Depth*>(
      &::ukex::_depthdata_Data_Depth_default_instance_);
}
inline const ::ukex::depthdata_Data_Depth& depthdata_Data::depth() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.depth)
  return _internal_depth();
}
inline ::ukex::depthdata_Data_Depth* depthdata_Data::release_depth() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.depth)
  _has_bits_[0] &= ~0x00000001u;
  ::ukex::depthdata_Data_Depth* temp = depth_;
  depth_ = nullptr;
  return temp;
}
inline ::ukex::depthdata_Data_Depth* depthdata_Data::_internal_mutable_depth() {
  _has_bits_[0] |= 0x00000001u;
  if (depth_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::depthdata_Data_Depth>(GetArenaNoVirtual());
    depth_ = p;
  }
  return depth_;
}
inline ::ukex::depthdata_Data_Depth* depthdata_Data::mutable_depth() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.depth)
  return _internal_mutable_depth();
}
inline void depthdata_Data::set_allocated_depth(::ukex::depthdata_Data_Depth* depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depth_;
  }
  if (depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  depth_ = depth;
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.depth)
}

// -------------------------------------------------------------------

// depthdata

// required string type = 1;
inline bool depthdata::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool depthdata::has_type() const {
  return _internal_has_type();
}
inline void depthdata::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& depthdata::type() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.type)
  return _internal_type();
}
inline void depthdata::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.type)
}
inline std::string* depthdata::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.type)
  return _internal_mutable_type();
}
inline const std::string& depthdata::_internal_type() const {
  return type_.GetNoArena();
}
inline void depthdata::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.type)
}
inline void depthdata::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.type)
}
inline void depthdata::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.type)
}
inline std::string* depthdata::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.type)
}

// required .ukex.depthdata.Data data = 2;
inline bool depthdata::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool depthdata::has_data() const {
  return _internal_has_data();
}
inline void depthdata::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ukex::depthdata_Data& depthdata::_internal_data() const {
  const ::ukex::depthdata_Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::depthdata_Data*>(
      &::ukex::_depthdata_Data_default_instance_);
}
inline const ::ukex::depthdata_Data& depthdata::data() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.data)
  return _internal_data();
}
inline ::ukex::depthdata_Data* depthdata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.data)
  _has_bits_[0] &= ~0x00000004u;
  ::ukex::depthdata_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::ukex::depthdata_Data* depthdata::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::depthdata_Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::ukex::depthdata_Data* depthdata::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.data)
  return _internal_mutable_data();
}
inline void depthdata::set_allocated_data(::ukex::depthdata_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.data)
}

// required string token = 3;
inline bool depthdata::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool depthdata::has_token() const {
  return _internal_has_token();
}
inline void depthdata::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& depthdata::token() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.token)
  return _internal_token();
}
inline void depthdata::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.token)
}
inline std::string* depthdata::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.token)
  return _internal_mutable_token();
}
inline const std::string& depthdata::_internal_token() const {
  return token_.GetNoArena();
}
inline void depthdata::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void depthdata::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.depthdata.token)
}
inline void depthdata::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.token)
}
inline void depthdata::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.token)
}
inline std::string* depthdata::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000002u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* depthdata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::depthdata_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::depthdata_CONST>() {
  return ::ukex::depthdata_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2edepthdata_2eproto
