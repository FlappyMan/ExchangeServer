// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.matcheddata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2ematcheddata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2ematcheddata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2ematcheddata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2ematcheddata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ematcheddata_2eproto;
namespace ukex {
class matcheddata;
class matcheddataDefaultTypeInternal;
extern matcheddataDefaultTypeInternal _matcheddata_default_instance_;
class matcheddata_BuyUser;
class matcheddata_BuyUserDefaultTypeInternal;
extern matcheddata_BuyUserDefaultTypeInternal _matcheddata_BuyUser_default_instance_;
class matcheddata_SellUser;
class matcheddata_SellUserDefaultTypeInternal;
extern matcheddata_SellUserDefaultTypeInternal _matcheddata_SellUser_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::matcheddata* Arena::CreateMaybeMessage<::ukex::matcheddata>(Arena*);
template<> ::ukex::matcheddata_BuyUser* Arena::CreateMaybeMessage<::ukex::matcheddata_BuyUser>(Arena*);
template<> ::ukex::matcheddata_SellUser* Arena::CreateMaybeMessage<::ukex::matcheddata_SellUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum matcheddata_CONST : int {
  matcheddata_CONST_CMD = 108
};
bool matcheddata_CONST_IsValid(int value);
constexpr matcheddata_CONST matcheddata_CONST_CONST_MIN = matcheddata_CONST_CMD;
constexpr matcheddata_CONST matcheddata_CONST_CONST_MAX = matcheddata_CONST_CMD;
constexpr int matcheddata_CONST_CONST_ARRAYSIZE = matcheddata_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* matcheddata_CONST_descriptor();
template<typename T>
inline const std::string& matcheddata_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, matcheddata_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function matcheddata_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    matcheddata_CONST_descriptor(), enum_t_value);
}
inline bool matcheddata_CONST_Parse(
    const std::string& name, matcheddata_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<matcheddata_CONST>(
    matcheddata_CONST_descriptor(), name, value);
}
// ===================================================================

class matcheddata_BuyUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata.BuyUser) */ {
 public:
  matcheddata_BuyUser();
  virtual ~matcheddata_BuyUser();

  matcheddata_BuyUser(const matcheddata_BuyUser& from);
  matcheddata_BuyUser(matcheddata_BuyUser&& from) noexcept
    : matcheddata_BuyUser() {
    *this = ::std::move(from);
  }

  inline matcheddata_BuyUser& operator=(const matcheddata_BuyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline matcheddata_BuyUser& operator=(matcheddata_BuyUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matcheddata_BuyUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matcheddata_BuyUser* internal_default_instance() {
    return reinterpret_cast<const matcheddata_BuyUser*>(
               &_matcheddata_BuyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(matcheddata_BuyUser& a, matcheddata_BuyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(matcheddata_BuyUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matcheddata_BuyUser* New() const final {
    return CreateMaybeMessage<matcheddata_BuyUser>(nullptr);
  }

  matcheddata_BuyUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matcheddata_BuyUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matcheddata_BuyUser& from);
  void MergeFrom(const matcheddata_BuyUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matcheddata_BuyUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.matcheddata.BuyUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ematcheddata_2eproto);
    return ::descriptor_table_ukex_2ematcheddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyPriceFieldNumber = 3,
    kUseridFieldNumber = 1,
    kOrderidFieldNumber = 2,
  };
  // required string buyPrice = 3;
  bool has_buyprice() const;
  private:
  bool _internal_has_buyprice() const;
  public:
  void clear_buyprice();
  const std::string& buyprice() const;
  void set_buyprice(const std::string& value);
  void set_buyprice(std::string&& value);
  void set_buyprice(const char* value);
  void set_buyprice(const char* value, size_t size);
  std::string* mutable_buyprice();
  std::string* release_buyprice();
  void set_allocated_buyprice(std::string* buyprice);
  private:
  const std::string& _internal_buyprice() const;
  void _internal_set_buyprice(const std::string& value);
  std::string* _internal_mutable_buyprice();
  public:

  // required uint64 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 orderid = 2;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.matcheddata.BuyUser)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid_;
  friend struct ::TableStruct_ukex_2ematcheddata_2eproto;
};
// -------------------------------------------------------------------

class matcheddata_SellUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata.SellUser) */ {
 public:
  matcheddata_SellUser();
  virtual ~matcheddata_SellUser();

  matcheddata_SellUser(const matcheddata_SellUser& from);
  matcheddata_SellUser(matcheddata_SellUser&& from) noexcept
    : matcheddata_SellUser() {
    *this = ::std::move(from);
  }

  inline matcheddata_SellUser& operator=(const matcheddata_SellUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline matcheddata_SellUser& operator=(matcheddata_SellUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matcheddata_SellUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matcheddata_SellUser* internal_default_instance() {
    return reinterpret_cast<const matcheddata_SellUser*>(
               &_matcheddata_SellUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(matcheddata_SellUser& a, matcheddata_SellUser& b) {
    a.Swap(&b);
  }
  inline void Swap(matcheddata_SellUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matcheddata_SellUser* New() const final {
    return CreateMaybeMessage<matcheddata_SellUser>(nullptr);
  }

  matcheddata_SellUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matcheddata_SellUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matcheddata_SellUser& from);
  void MergeFrom(const matcheddata_SellUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matcheddata_SellUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.matcheddata.SellUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ematcheddata_2eproto);
    return ::descriptor_table_ukex_2ematcheddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellPriceFieldNumber = 3,
    kUseridFieldNumber = 1,
    kOrderidFieldNumber = 2,
  };
  // required string sellPrice = 3;
  bool has_sellprice() const;
  private:
  bool _internal_has_sellprice() const;
  public:
  void clear_sellprice();
  const std::string& sellprice() const;
  void set_sellprice(const std::string& value);
  void set_sellprice(std::string&& value);
  void set_sellprice(const char* value);
  void set_sellprice(const char* value, size_t size);
  std::string* mutable_sellprice();
  std::string* release_sellprice();
  void set_allocated_sellprice(std::string* sellprice);
  private:
  const std::string& _internal_sellprice() const;
  void _internal_set_sellprice(const std::string& value);
  std::string* _internal_mutable_sellprice();
  public:

  // required uint64 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 orderid = 2;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.matcheddata.SellUser)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid_;
  friend struct ::TableStruct_ukex_2ematcheddata_2eproto;
};
// -------------------------------------------------------------------

class matcheddata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata) */ {
 public:
  matcheddata();
  virtual ~matcheddata();

  matcheddata(const matcheddata& from);
  matcheddata(matcheddata&& from) noexcept
    : matcheddata() {
    *this = ::std::move(from);
  }

  inline matcheddata& operator=(const matcheddata& from) {
    CopyFrom(from);
    return *this;
  }
  inline matcheddata& operator=(matcheddata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const matcheddata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const matcheddata* internal_default_instance() {
    return reinterpret_cast<const matcheddata*>(
               &_matcheddata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(matcheddata& a, matcheddata& b) {
    a.Swap(&b);
  }
  inline void Swap(matcheddata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline matcheddata* New() const final {
    return CreateMaybeMessage<matcheddata>(nullptr);
  }

  matcheddata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<matcheddata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const matcheddata& from);
  void MergeFrom(const matcheddata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(matcheddata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.matcheddata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ematcheddata_2eproto);
    return ::descriptor_table_ukex_2ematcheddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef matcheddata_BuyUser BuyUser;
  typedef matcheddata_SellUser SellUser;

  typedef matcheddata_CONST CONST;
  static constexpr CONST CMD =
    matcheddata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return matcheddata_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    matcheddata_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    matcheddata_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    matcheddata_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return matcheddata_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return matcheddata_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return matcheddata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kNumberFieldNumber = 2,
    kTokenFieldNumber = 5,
    kBuyuserFieldNumber = 3,
    kSelluserFieldNumber = 4,
  };
  // required string price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // required string number = 2;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // required string token = 5;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required .ukex.matcheddata.BuyUser buyuser = 3;
  bool has_buyuser() const;
  private:
  bool _internal_has_buyuser() const;
  public:
  void clear_buyuser();
  const ::ukex::matcheddata_BuyUser& buyuser() const;
  ::ukex::matcheddata_BuyUser* release_buyuser();
  ::ukex::matcheddata_BuyUser* mutable_buyuser();
  void set_allocated_buyuser(::ukex::matcheddata_BuyUser* buyuser);
  private:
  const ::ukex::matcheddata_BuyUser& _internal_buyuser() const;
  ::ukex::matcheddata_BuyUser* _internal_mutable_buyuser();
  public:

  // required .ukex.matcheddata.SellUser selluser = 4;
  bool has_selluser() const;
  private:
  bool _internal_has_selluser() const;
  public:
  void clear_selluser();
  const ::ukex::matcheddata_SellUser& selluser() const;
  ::ukex::matcheddata_SellUser* release_selluser();
  ::ukex::matcheddata_SellUser* mutable_selluser();
  void set_allocated_selluser(::ukex::matcheddata_SellUser* selluser);
  private:
  const ::ukex::matcheddata_SellUser& _internal_selluser() const;
  ::ukex::matcheddata_SellUser* _internal_mutable_selluser();
  public:

  // @@protoc_insertion_point(class_scope:ukex.matcheddata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::ukex::matcheddata_BuyUser* buyuser_;
  ::ukex::matcheddata_SellUser* selluser_;
  friend struct ::TableStruct_ukex_2ematcheddata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// matcheddata_BuyUser

// required uint64 userid = 1;
inline bool matcheddata_BuyUser::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool matcheddata_BuyUser::has_userid() const {
  return _internal_has_userid();
}
inline void matcheddata_BuyUser::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_BuyUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_BuyUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.userid)
  return _internal_userid();
}
inline void matcheddata_BuyUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void matcheddata_BuyUser::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.userid)
}

// required uint64 orderid = 2;
inline bool matcheddata_BuyUser::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool matcheddata_BuyUser::has_orderid() const {
  return _internal_has_orderid();
}
inline void matcheddata_BuyUser::clear_orderid() {
  orderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_BuyUser::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_BuyUser::orderid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.orderid)
  return _internal_orderid();
}
inline void matcheddata_BuyUser::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  orderid_ = value;
}
inline void matcheddata_BuyUser::set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.orderid)
}

// required string buyPrice = 3;
inline bool matcheddata_BuyUser::_internal_has_buyprice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool matcheddata_BuyUser::has_buyprice() const {
  return _internal_has_buyprice();
}
inline void matcheddata_BuyUser::clear_buyprice() {
  buyprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& matcheddata_BuyUser::buyprice() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.buyPrice)
  return _internal_buyprice();
}
inline void matcheddata_BuyUser::set_buyprice(const std::string& value) {
  _internal_set_buyprice(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.buyPrice)
}
inline std::string* matcheddata_BuyUser::mutable_buyprice() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.buyPrice)
  return _internal_mutable_buyprice();
}
inline const std::string& matcheddata_BuyUser::_internal_buyprice() const {
  return buyprice_.GetNoArena();
}
inline void matcheddata_BuyUser::_internal_set_buyprice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buyprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void matcheddata_BuyUser::set_buyprice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buyprice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.matcheddata.BuyUser.buyPrice)
}
inline void matcheddata_BuyUser::set_buyprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buyprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.buyPrice)
}
inline void matcheddata_BuyUser::set_buyprice(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buyprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.buyPrice)
}
inline std::string* matcheddata_BuyUser::_internal_mutable_buyprice() {
  _has_bits_[0] |= 0x00000001u;
  return buyprice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* matcheddata_BuyUser::release_buyprice() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.buyPrice)
  if (!has_buyprice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buyprice_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_allocated_buyprice(std::string* buyprice) {
  if (buyprice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buyprice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyprice);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.buyPrice)
}

// -------------------------------------------------------------------

// matcheddata_SellUser

// required uint64 userid = 1;
inline bool matcheddata_SellUser::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool matcheddata_SellUser::has_userid() const {
  return _internal_has_userid();
}
inline void matcheddata_SellUser::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_SellUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_SellUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.userid)
  return _internal_userid();
}
inline void matcheddata_SellUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void matcheddata_SellUser::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.userid)
}

// required uint64 orderid = 2;
inline bool matcheddata_SellUser::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool matcheddata_SellUser::has_orderid() const {
  return _internal_has_orderid();
}
inline void matcheddata_SellUser::clear_orderid() {
  orderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_SellUser::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 matcheddata_SellUser::orderid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.orderid)
  return _internal_orderid();
}
inline void matcheddata_SellUser::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  orderid_ = value;
}
inline void matcheddata_SellUser::set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.orderid)
}

// required string sellPrice = 3;
inline bool matcheddata_SellUser::_internal_has_sellprice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool matcheddata_SellUser::has_sellprice() const {
  return _internal_has_sellprice();
}
inline void matcheddata_SellUser::clear_sellprice() {
  sellprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& matcheddata_SellUser::sellprice() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.sellPrice)
  return _internal_sellprice();
}
inline void matcheddata_SellUser::set_sellprice(const std::string& value) {
  _internal_set_sellprice(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.sellPrice)
}
inline std::string* matcheddata_SellUser::mutable_sellprice() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.sellPrice)
  return _internal_mutable_sellprice();
}
inline const std::string& matcheddata_SellUser::_internal_sellprice() const {
  return sellprice_.GetNoArena();
}
inline void matcheddata_SellUser::_internal_set_sellprice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sellprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void matcheddata_SellUser::set_sellprice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sellprice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.matcheddata.SellUser.sellPrice)
}
inline void matcheddata_SellUser::set_sellprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sellprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.sellPrice)
}
inline void matcheddata_SellUser::set_sellprice(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sellprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.sellPrice)
}
inline std::string* matcheddata_SellUser::_internal_mutable_sellprice() {
  _has_bits_[0] |= 0x00000001u;
  return sellprice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* matcheddata_SellUser::release_sellprice() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.sellPrice)
  if (!has_sellprice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sellprice_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_allocated_sellprice(std::string* sellprice) {
  if (sellprice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sellprice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sellprice);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.sellPrice)
}

// -------------------------------------------------------------------

// matcheddata

// required string price = 1;
inline bool matcheddata::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool matcheddata::has_price() const {
  return _internal_has_price();
}
inline void matcheddata::clear_price() {
  price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& matcheddata::price() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.price)
  return _internal_price();
}
inline void matcheddata::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.price)
}
inline std::string* matcheddata::mutable_price() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.price)
  return _internal_mutable_price();
}
inline const std::string& matcheddata::_internal_price() const {
  return price_.GetNoArena();
}
inline void matcheddata::_internal_set_price(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void matcheddata::set_price(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.matcheddata.price)
}
inline void matcheddata::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.price)
}
inline void matcheddata::set_price(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.price)
}
inline std::string* matcheddata::_internal_mutable_price() {
  _has_bits_[0] |= 0x00000001u;
  return price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* matcheddata::release_price() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.price)
  if (!has_price()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return price_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.price)
}

// required string number = 2;
inline bool matcheddata::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool matcheddata::has_number() const {
  return _internal_has_number();
}
inline void matcheddata::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& matcheddata::number() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.number)
  return _internal_number();
}
inline void matcheddata::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.number)
}
inline std::string* matcheddata::mutable_number() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.number)
  return _internal_mutable_number();
}
inline const std::string& matcheddata::_internal_number() const {
  return number_.GetNoArena();
}
inline void matcheddata::_internal_set_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void matcheddata::set_number(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.matcheddata.number)
}
inline void matcheddata::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.number)
}
inline void matcheddata::set_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.number)
}
inline std::string* matcheddata::_internal_mutable_number() {
  _has_bits_[0] |= 0x00000002u;
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* matcheddata::release_number() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.number)
  if (!has_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.number)
}

// required .ukex.matcheddata.BuyUser buyuser = 3;
inline bool matcheddata::_internal_has_buyuser() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || buyuser_ != nullptr);
  return value;
}
inline bool matcheddata::has_buyuser() const {
  return _internal_has_buyuser();
}
inline void matcheddata::clear_buyuser() {
  if (buyuser_ != nullptr) buyuser_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ukex::matcheddata_BuyUser& matcheddata::_internal_buyuser() const {
  const ::ukex::matcheddata_BuyUser* p = buyuser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::matcheddata_BuyUser*>(
      &::ukex::_matcheddata_BuyUser_default_instance_);
}
inline const ::ukex::matcheddata_BuyUser& matcheddata::buyuser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.buyuser)
  return _internal_buyuser();
}
inline ::ukex::matcheddata_BuyUser* matcheddata::release_buyuser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.buyuser)
  _has_bits_[0] &= ~0x00000008u;
  ::ukex::matcheddata_BuyUser* temp = buyuser_;
  buyuser_ = nullptr;
  return temp;
}
inline ::ukex::matcheddata_BuyUser* matcheddata::_internal_mutable_buyuser() {
  _has_bits_[0] |= 0x00000008u;
  if (buyuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::matcheddata_BuyUser>(GetArenaNoVirtual());
    buyuser_ = p;
  }
  return buyuser_;
}
inline ::ukex::matcheddata_BuyUser* matcheddata::mutable_buyuser() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.buyuser)
  return _internal_mutable_buyuser();
}
inline void matcheddata::set_allocated_buyuser(::ukex::matcheddata_BuyUser* buyuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buyuser_;
  }
  if (buyuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buyuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyuser, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  buyuser_ = buyuser;
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.buyuser)
}

// required .ukex.matcheddata.SellUser selluser = 4;
inline bool matcheddata::_internal_has_selluser() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || selluser_ != nullptr);
  return value;
}
inline bool matcheddata::has_selluser() const {
  return _internal_has_selluser();
}
inline void matcheddata::clear_selluser() {
  if (selluser_ != nullptr) selluser_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ukex::matcheddata_SellUser& matcheddata::_internal_selluser() const {
  const ::ukex::matcheddata_SellUser* p = selluser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ukex::matcheddata_SellUser*>(
      &::ukex::_matcheddata_SellUser_default_instance_);
}
inline const ::ukex::matcheddata_SellUser& matcheddata::selluser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.selluser)
  return _internal_selluser();
}
inline ::ukex::matcheddata_SellUser* matcheddata::release_selluser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.selluser)
  _has_bits_[0] &= ~0x00000010u;
  ::ukex::matcheddata_SellUser* temp = selluser_;
  selluser_ = nullptr;
  return temp;
}
inline ::ukex::matcheddata_SellUser* matcheddata::_internal_mutable_selluser() {
  _has_bits_[0] |= 0x00000010u;
  if (selluser_ == nullptr) {
    auto* p = CreateMaybeMessage<::ukex::matcheddata_SellUser>(GetArenaNoVirtual());
    selluser_ = p;
  }
  return selluser_;
}
inline ::ukex::matcheddata_SellUser* matcheddata::mutable_selluser() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.selluser)
  return _internal_mutable_selluser();
}
inline void matcheddata::set_allocated_selluser(::ukex::matcheddata_SellUser* selluser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete selluser_;
  }
  if (selluser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selluser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selluser, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  selluser_ = selluser;
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.selluser)
}

// required string token = 5;
inline bool matcheddata::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool matcheddata::has_token() const {
  return _internal_has_token();
}
inline void matcheddata::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& matcheddata::token() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.token)
  return _internal_token();
}
inline void matcheddata::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.token)
}
inline std::string* matcheddata::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.token)
  return _internal_mutable_token();
}
inline const std::string& matcheddata::_internal_token() const {
  return token_.GetNoArena();
}
inline void matcheddata::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void matcheddata::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.matcheddata.token)
}
inline void matcheddata::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.token)
}
inline void matcheddata::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.token)
}
inline std::string* matcheddata::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000004u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* matcheddata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::matcheddata_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::matcheddata_CONST>() {
  return ::ukex::matcheddata_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2ematcheddata_2eproto
