// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.allmarketinfo.proto

#include "ukex.allmarketinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukex_2eallmarketinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2eallmarketinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto;
namespace ukex {
class allmarketinfo_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<allmarketinfo_Data> _instance;
} _allmarketinfo_Data_default_instance_;
class allmarketinfo_ExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<allmarketinfo_Exchange> _instance;
} _allmarketinfo_Exchange_default_instance_;
class allmarketinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<allmarketinfo> _instance;
} _allmarketinfo_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_allmarketinfo_default_instance_;
    new (ptr) ::ukex::allmarketinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::allmarketinfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto}, {
      &scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto.base,
      &scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto.base,}};

static void InitDefaultsscc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_allmarketinfo_Data_default_instance_;
    new (ptr) ::ukex::allmarketinfo_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::allmarketinfo_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto}, {}};

static void InitDefaultsscc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_allmarketinfo_Exchange_default_instance_;
    new (ptr) ::ukex::allmarketinfo_Exchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::allmarketinfo_Exchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2eallmarketinfo_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2eallmarketinfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2eallmarketinfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2eallmarketinfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m0_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m1_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m2_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m3_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m4_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m5_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m6_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m7_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m8_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m9_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m10_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m11_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m12_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Data, m13_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Exchange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Exchange, btc_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo_Exchange, eth_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, type_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, data_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, marketid_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, exchange_),
  PROTOBUF_FIELD_OFFSET(::ukex::allmarketinfo, token_),
  0,
  ~0u,
  3,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::ukex::allmarketinfo_Data)},
  { 33, 40, sizeof(::ukex::allmarketinfo_Exchange)},
  { 42, 52, sizeof(::ukex::allmarketinfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_allmarketinfo_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_allmarketinfo_Exchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_allmarketinfo_default_instance_),
};

const char descriptor_table_protodef_ukex_2eallmarketinfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ukex.allmarketinfo.proto\022\004ukex\"\203\003\n\rall"
  "marketinfo\022\014\n\004type\030\001 \002(\t\022&\n\004data\030\002 \003(\0132\030"
  ".ukex.allmarketinfo.Data\022\020\n\010marketid\030\003 \002"
  "(\004\022.\n\010exchange\030\004 \002(\0132\034.ukex.allmarketinf"
  "o.Exchange\022\r\n\005token\030\005 \002(\t\032\262\001\n\004Data\022\n\n\002m0"
  "\030\001 \002(\t\022\n\n\002m1\030\002 \002(\t\022\n\n\002m2\030\003 \002(\t\022\n\n\002m3\030\004 \002"
  "(\t\022\n\n\002m4\030\005 \002(\t\022\n\n\002m5\030\006 \002(\t\022\n\n\002m6\030\007 \002(\t\022\n"
  "\n\002m7\030\010 \002(\t\022\n\n\002m8\030\t \002(\t\022\n\n\002m9\030\n \002(\t\022\013\n\003m1"
  "0\030\013 \002(\t\022\013\n\003m11\030\014 \002(\t\022\013\n\003m12\030\r \002(\t\022\013\n\003m13"
  "\030\016 \002(\t\032$\n\010Exchange\022\013\n\003btc\030\001 \002(\t\022\013\n\003eth\030\002"
  " \002(\t\"\020\n\005CONST\022\007\n\003CMD\020h"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2eallmarketinfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2eallmarketinfo_2eproto_sccs[3] = {
  &scc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto.base,
  &scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto.base,
  &scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2eallmarketinfo_2eproto_once;
static bool descriptor_table_ukex_2eallmarketinfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2eallmarketinfo_2eproto = {
  &descriptor_table_ukex_2eallmarketinfo_2eproto_initialized, descriptor_table_protodef_ukex_2eallmarketinfo_2eproto, "ukex.allmarketinfo.proto", 422,
  &descriptor_table_ukex_2eallmarketinfo_2eproto_once, descriptor_table_ukex_2eallmarketinfo_2eproto_sccs, descriptor_table_ukex_2eallmarketinfo_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ukex_2eallmarketinfo_2eproto::offsets,
  file_level_metadata_ukex_2eallmarketinfo_2eproto, 3, file_level_enum_descriptors_ukex_2eallmarketinfo_2eproto, file_level_service_descriptors_ukex_2eallmarketinfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2eallmarketinfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2eallmarketinfo_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* allmarketinfo_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2eallmarketinfo_2eproto);
  return file_level_enum_descriptors_ukex_2eallmarketinfo_2eproto[0];
}
bool allmarketinfo_CONST_IsValid(int value) {
  switch (value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr allmarketinfo_CONST allmarketinfo::CMD;
constexpr allmarketinfo_CONST allmarketinfo::CONST_MIN;
constexpr allmarketinfo_CONST allmarketinfo::CONST_MAX;
constexpr int allmarketinfo::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void allmarketinfo_Data::InitAsDefaultInstance() {
}
class allmarketinfo_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<allmarketinfo_Data>()._has_bits_);
  static void set_has_m0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_m7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_m8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_m9(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_m10(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_m11(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_m12(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_m13(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

allmarketinfo_Data::allmarketinfo_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo.Data)
}
allmarketinfo_Data::allmarketinfo_Data(const allmarketinfo_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m0()) {
    m0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m0_);
  }
  m1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m1()) {
    m1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m1_);
  }
  m2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m2()) {
    m2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m2_);
  }
  m3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m3()) {
    m3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m3_);
  }
  m4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m4()) {
    m4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m4_);
  }
  m5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m5()) {
    m5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m5_);
  }
  m6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m6()) {
    m6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m6_);
  }
  m7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m7()) {
    m7_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m7_);
  }
  m8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m8()) {
    m8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m8_);
  }
  m9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m9()) {
    m9_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m9_);
  }
  m10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m10()) {
    m10_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m10_);
  }
  m11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m11()) {
    m11_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m11_);
  }
  m12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m12()) {
    m12_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m12_);
  }
  m13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m13()) {
    m13_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m13_);
  }
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo.Data)
}

void allmarketinfo_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto.base);
  m0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

allmarketinfo_Data::~allmarketinfo_Data() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo.Data)
  SharedDtor();
}

void allmarketinfo_Data::SharedDtor() {
  m0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m13_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void allmarketinfo_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allmarketinfo_Data& allmarketinfo_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_allmarketinfo_Data_ukex_2eallmarketinfo_2eproto.base);
  return *internal_default_instance();
}


void allmarketinfo_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      m0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      m1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      m2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      m3_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      m4_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      m5_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      m6_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      m7_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      m8_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      m9_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      m10_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      m11_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      m12_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      m13_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* allmarketinfo_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string m0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m0(), ptr, ctx, "ukex.allmarketinfo.Data.m0");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m1(), ptr, ctx, "ukex.allmarketinfo.Data.m1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m2(), ptr, ctx, "ukex.allmarketinfo.Data.m2");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m3(), ptr, ctx, "ukex.allmarketinfo.Data.m3");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m4(), ptr, ctx, "ukex.allmarketinfo.Data.m4");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m5(), ptr, ctx, "ukex.allmarketinfo.Data.m5");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m6(), ptr, ctx, "ukex.allmarketinfo.Data.m6");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m7(), ptr, ctx, "ukex.allmarketinfo.Data.m7");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m8(), ptr, ctx, "ukex.allmarketinfo.Data.m8");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m9(), ptr, ctx, "ukex.allmarketinfo.Data.m9");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m10(), ptr, ctx, "ukex.allmarketinfo.Data.m10");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m11 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m11(), ptr, ctx, "ukex.allmarketinfo.Data.m11");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m12 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m12(), ptr, ctx, "ukex.allmarketinfo.Data.m12");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string m13 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_m13(), ptr, ctx, "ukex.allmarketinfo.Data.m13");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* allmarketinfo_Data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string m0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m0().data(), static_cast<int>(this->_internal_m0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m0");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m0(), target);
  }

  // required string m1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m1().data(), static_cast<int>(this->_internal_m1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m1(), target);
  }

  // required string m2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m2().data(), static_cast<int>(this->_internal_m2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m2(), target);
  }

  // required string m3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m3().data(), static_cast<int>(this->_internal_m3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m3(), target);
  }

  // required string m4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m4().data(), static_cast<int>(this->_internal_m4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m4");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_m4(), target);
  }

  // required string m5 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m5().data(), static_cast<int>(this->_internal_m5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_m5(), target);
  }

  // required string m6 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m6().data(), static_cast<int>(this->_internal_m6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m6");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_m6(), target);
  }

  // required string m7 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m7().data(), static_cast<int>(this->_internal_m7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m7");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_m7(), target);
  }

  // required string m8 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m8().data(), static_cast<int>(this->_internal_m8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m8");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_m8(), target);
  }

  // required string m9 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m9().data(), static_cast<int>(this->_internal_m9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m9");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_m9(), target);
  }

  // required string m10 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m10().data(), static_cast<int>(this->_internal_m10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m10");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_m10(), target);
  }

  // required string m11 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m11().data(), static_cast<int>(this->_internal_m11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m11");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_m11(), target);
  }

  // required string m12 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m12().data(), static_cast<int>(this->_internal_m12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m12");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_m12(), target);
  }

  // required string m13 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_m13().data(), static_cast<int>(this->_internal_m13().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m13");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_m13(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo.Data)
  return target;
}

size_t allmarketinfo_Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo.Data)
  size_t total_size = 0;

  if (has_m0()) {
    // required string m0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m0());
  }

  if (has_m1()) {
    // required string m1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m1());
  }

  if (has_m2()) {
    // required string m2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m2());
  }

  if (has_m3()) {
    // required string m3 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m3());
  }

  if (has_m4()) {
    // required string m4 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m4());
  }

  if (has_m5()) {
    // required string m5 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m5());
  }

  if (has_m6()) {
    // required string m6 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m6());
  }

  if (has_m7()) {
    // required string m7 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m7());
  }

  if (has_m8()) {
    // required string m8 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m8());
  }

  if (has_m9()) {
    // required string m9 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m9());
  }

  if (has_m10()) {
    // required string m10 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m10());
  }

  if (has_m11()) {
    // required string m11 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m11());
  }

  if (has_m12()) {
    // required string m12 = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m12());
  }

  if (has_m13()) {
    // required string m13 = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m13());
  }

  return total_size;
}
size_t allmarketinfo_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo.Data)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string m0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m0());

    // required string m1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m1());

    // required string m2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m2());

    // required string m3 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m3());

    // required string m4 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m4());

    // required string m5 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m5());

    // required string m6 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m6());

    // required string m7 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m7());

    // required string m8 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m8());

    // required string m9 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m9());

    // required string m10 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m10());

    // required string m11 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m11());

    // required string m12 = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m12());

    // required string m13 = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m13());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allmarketinfo_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const allmarketinfo_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<allmarketinfo_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo.Data)
    MergeFrom(*source);
  }
}

void allmarketinfo_Data::MergeFrom(const allmarketinfo_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      m0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m0_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      m1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m1_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      m2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m2_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      m3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m3_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      m4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m4_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      m5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m5_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      m6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m6_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      m7_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m7_);
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      m8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m8_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      m9_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m9_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      m10_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m10_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      m11_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m11_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      m12_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m12_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      m13_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.m13_);
    }
  }
}

void allmarketinfo_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo_Data::CopyFrom(const allmarketinfo_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void allmarketinfo_Data::InternalSwap(allmarketinfo_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m0_.Swap(&other->m0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m1_.Swap(&other->m1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m2_.Swap(&other->m2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m3_.Swap(&other->m3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m4_.Swap(&other->m4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m5_.Swap(&other->m5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m6_.Swap(&other->m6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m7_.Swap(&other->m7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m8_.Swap(&other->m8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m9_.Swap(&other->m9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m10_.Swap(&other->m10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m11_.Swap(&other->m11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m12_.Swap(&other->m12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  m13_.Swap(&other->m13_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata allmarketinfo_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void allmarketinfo_Exchange::InitAsDefaultInstance() {
}
class allmarketinfo_Exchange::_Internal {
 public:
  using HasBits = decltype(std::declval<allmarketinfo_Exchange>()._has_bits_);
  static void set_has_btc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

allmarketinfo_Exchange::allmarketinfo_Exchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo.Exchange)
}
allmarketinfo_Exchange::allmarketinfo_Exchange(const allmarketinfo_Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  btc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_btc()) {
    btc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.btc_);
  }
  eth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_eth()) {
    eth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eth_);
  }
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo.Exchange)
}

void allmarketinfo_Exchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto.base);
  btc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

allmarketinfo_Exchange::~allmarketinfo_Exchange() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo.Exchange)
  SharedDtor();
}

void allmarketinfo_Exchange::SharedDtor() {
  btc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void allmarketinfo_Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allmarketinfo_Exchange& allmarketinfo_Exchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_allmarketinfo_Exchange_ukex_2eallmarketinfo_2eproto.base);
  return *internal_default_instance();
}


void allmarketinfo_Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      btc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      eth_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* allmarketinfo_Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string btc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_btc(), ptr, ctx, "ukex.allmarketinfo.Exchange.btc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string eth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_eth(), ptr, ctx, "ukex.allmarketinfo.Exchange.eth");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* allmarketinfo_Exchange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string btc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_btc().data(), static_cast<int>(this->_internal_btc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.btc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_btc(), target);
  }

  // required string eth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_eth().data(), static_cast<int>(this->_internal_eth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.eth");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_eth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo.Exchange)
  return target;
}

size_t allmarketinfo_Exchange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo.Exchange)
  size_t total_size = 0;

  if (has_btc()) {
    // required string btc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_btc());
  }

  if (has_eth()) {
    // required string eth = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eth());
  }

  return total_size;
}
size_t allmarketinfo_Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo.Exchange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string btc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_btc());

    // required string eth = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allmarketinfo_Exchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const allmarketinfo_Exchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<allmarketinfo_Exchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo.Exchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo.Exchange)
    MergeFrom(*source);
  }
}

void allmarketinfo_Exchange::MergeFrom(const allmarketinfo_Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      btc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.btc_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      eth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eth_);
    }
  }
}

void allmarketinfo_Exchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo_Exchange::CopyFrom(const allmarketinfo_Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo_Exchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void allmarketinfo_Exchange::InternalSwap(allmarketinfo_Exchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  btc_.Swap(&other->btc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eth_.Swap(&other->eth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata allmarketinfo_Exchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void allmarketinfo::InitAsDefaultInstance() {
  ::ukex::_allmarketinfo_default_instance_._instance.get_mutable()->exchange_ = const_cast< ::ukex::allmarketinfo_Exchange*>(
      ::ukex::allmarketinfo_Exchange::internal_default_instance());
}
class allmarketinfo::_Internal {
 public:
  using HasBits = decltype(std::declval<allmarketinfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marketid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ukex::allmarketinfo_Exchange& exchange(const allmarketinfo* msg);
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ukex::allmarketinfo_Exchange&
allmarketinfo::_Internal::exchange(const allmarketinfo* msg) {
  return *msg->exchange_;
}
allmarketinfo::allmarketinfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo)
}
allmarketinfo::allmarketinfo(const allmarketinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_exchange()) {
    exchange_ = new ::ukex::allmarketinfo_Exchange(*from.exchange_);
  } else {
    exchange_ = nullptr;
  }
  marketid_ = from.marketid_;
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo)
}

void allmarketinfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exchange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketid_) -
      reinterpret_cast<char*>(&exchange_)) + sizeof(marketid_));
}

allmarketinfo::~allmarketinfo() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo)
  SharedDtor();
}

void allmarketinfo::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exchange_;
}

void allmarketinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const allmarketinfo& allmarketinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_allmarketinfo_ukex_2eallmarketinfo_2eproto.base);
  return *internal_default_instance();
}


void allmarketinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(exchange_ != nullptr);
      exchange_->Clear();
    }
  }
  marketid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* allmarketinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_type(), ptr, ctx, "ukex.allmarketinfo.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ukex.allmarketinfo.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint64 marketid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_marketid(&has_bits);
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ukex.allmarketinfo.Exchange exchange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_token(), ptr, ctx, "ukex.allmarketinfo.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* allmarketinfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .ukex.allmarketinfo.Data data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_data(i), target, stream);
  }

  // required uint64 marketid = 3;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_marketid(), target);
  }

  // required .ukex.allmarketinfo.Exchange exchange = 4;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::exchange(this), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo)
  return target;
}

size_t allmarketinfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (has_exchange()) {
    // required .ukex.allmarketinfo.Exchange exchange = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exchange_);
  }

  if (has_marketid()) {
    // required uint64 marketid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());
  }

  return total_size;
}
size_t allmarketinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .ukex.allmarketinfo.Exchange exchange = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exchange_);

    // required uint64 marketid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_marketid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukex.allmarketinfo.Data data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void allmarketinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const allmarketinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<allmarketinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo)
    MergeFrom(*source);
  }
}

void allmarketinfo::MergeFrom(const allmarketinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_exchange()->::ukex::allmarketinfo_Exchange::MergeFrom(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000008u) {
      marketid_ = from.marketid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void allmarketinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo::CopyFrom(const allmarketinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->data())) return false;
  if (has_exchange()) {
    if (!this->exchange_->IsInitialized()) return false;
  }
  return true;
}

void allmarketinfo::InternalSwap(allmarketinfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_, other->exchange_);
  swap(marketid_, other->marketid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata allmarketinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::allmarketinfo_Data* Arena::CreateMaybeMessage< ::ukex::allmarketinfo_Data >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::allmarketinfo_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::allmarketinfo_Exchange* Arena::CreateMaybeMessage< ::ukex::allmarketinfo_Exchange >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::allmarketinfo_Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::allmarketinfo* Arena::CreateMaybeMessage< ::ukex::allmarketinfo >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::allmarketinfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
