// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.depthdata.proto

#include "ukex.depthdata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukex_2edepthdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_depthdata_Data_ukex_2edepthdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2edepthdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2edepthdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukex_2edepthdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto;
namespace ukex {
class depthdata_Data_Depth_buyActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depthdata_Data_Depth_buyAction> _instance;
} _depthdata_Data_Depth_buyAction_default_instance_;
class depthdata_Data_Depth_sellActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depthdata_Data_Depth_sellAction> _instance;
} _depthdata_Data_Depth_sellAction_default_instance_;
class depthdata_Data_DepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depthdata_Data_Depth> _instance;
} _depthdata_Data_Depth_default_instance_;
class depthdata_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depthdata_Data> _instance;
} _depthdata_Data_default_instance_;
class depthdataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<depthdata> _instance;
} _depthdata_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_depthdata_ukex_2edepthdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_depthdata_default_instance_;
    new (ptr) ::ukex::depthdata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::depthdata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_depthdata_ukex_2edepthdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_depthdata_ukex_2edepthdata_2eproto}, {
      &scc_info_depthdata_Data_ukex_2edepthdata_2eproto.base,}};

static void InitDefaultsscc_info_depthdata_Data_ukex_2edepthdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_depthdata_Data_default_instance_;
    new (ptr) ::ukex::depthdata_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::depthdata_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_depthdata_Data_ukex_2edepthdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_depthdata_Data_ukex_2edepthdata_2eproto}, {
      &scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto.base,}};

static void InitDefaultsscc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_depthdata_Data_Depth_default_instance_;
    new (ptr) ::ukex::depthdata_Data_Depth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::depthdata_Data_Depth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto}, {
      &scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto.base,
      &scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto.base,}};

static void InitDefaultsscc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_depthdata_Data_Depth_buyAction_default_instance_;
    new (ptr) ::ukex::depthdata_Data_Depth_buyAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::depthdata_Data_Depth_buyAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto}, {}};

static void InitDefaultsscc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_depthdata_Data_Depth_sellAction_default_instance_;
    new (ptr) ::ukex::depthdata_Data_Depth_sellAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::depthdata_Data_Depth_sellAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2edepthdata_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2edepthdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2edepthdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2edepthdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_buyAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_buyAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_buyAction, b0_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_buyAction, b1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_sellAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_sellAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_sellAction, s0_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth_sellAction, s1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth, buy_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data_Depth, sell_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata_Data, depth_),
  0,
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata, type_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata, data_),
  PROTOBUF_FIELD_OFFSET(::ukex::depthdata, token_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ukex::depthdata_Data_Depth_buyAction)},
  { 9, 16, sizeof(::ukex::depthdata_Data_Depth_sellAction)},
  { 18, 25, sizeof(::ukex::depthdata_Data_Depth)},
  { 27, 33, sizeof(::ukex::depthdata_Data)},
  { 34, 42, sizeof(::ukex::depthdata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_depthdata_Data_Depth_buyAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_depthdata_Data_Depth_sellAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_depthdata_Data_Depth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_depthdata_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_depthdata_default_instance_),
};

const char descriptor_table_protodef_ukex_2edepthdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ukex.depthdata.proto\022\004ukex\"\317\002\n\tdepthda"
  "ta\022\014\n\004type\030\001 \002(\t\022\"\n\004data\030\002 \002(\0132\024.ukex.de"
  "pthdata.Data\022\r\n\005token\030\003 \002(\t\032\356\001\n\004Data\022)\n\005"
  "depth\030\001 \002(\0132\032.ukex.depthdata.Data.Depth\032"
  "\272\001\n\005Depth\0221\n\003buy\030\001 \003(\0132$.ukex.depthdata."
  "Data.Depth.buyAction\0223\n\004sell\030\002 \003(\0132%.uke"
  "x.depthdata.Data.Depth.sellAction\032#\n\tbuy"
  "Action\022\n\n\002b0\030\001 \002(\t\022\n\n\002b1\030\002 \002(\t\032$\n\nsellAc"
  "tion\022\n\n\002s0\030\001 \002(\t\022\n\n\002s1\030\002 \002(\t\"\020\n\005CONST\022\007\n"
  "\003CMD\020j"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2edepthdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2edepthdata_2eproto_sccs[5] = {
  &scc_info_depthdata_ukex_2edepthdata_2eproto.base,
  &scc_info_depthdata_Data_ukex_2edepthdata_2eproto.base,
  &scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto.base,
  &scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto.base,
  &scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2edepthdata_2eproto_once;
static bool descriptor_table_ukex_2edepthdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2edepthdata_2eproto = {
  &descriptor_table_ukex_2edepthdata_2eproto_initialized, descriptor_table_protodef_ukex_2edepthdata_2eproto, "ukex.depthdata.proto", 366,
  &descriptor_table_ukex_2edepthdata_2eproto_once, descriptor_table_ukex_2edepthdata_2eproto_sccs, descriptor_table_ukex_2edepthdata_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_ukex_2edepthdata_2eproto::offsets,
  file_level_metadata_ukex_2edepthdata_2eproto, 5, file_level_enum_descriptors_ukex_2edepthdata_2eproto, file_level_service_descriptors_ukex_2edepthdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2edepthdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2edepthdata_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* depthdata_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2edepthdata_2eproto);
  return file_level_enum_descriptors_ukex_2edepthdata_2eproto[0];
}
bool depthdata_CONST_IsValid(int value) {
  switch (value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr depthdata_CONST depthdata::CMD;
constexpr depthdata_CONST depthdata::CONST_MIN;
constexpr depthdata_CONST depthdata::CONST_MAX;
constexpr int depthdata::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void depthdata_Data_Depth_buyAction::InitAsDefaultInstance() {
}
class depthdata_Data_Depth_buyAction::_Internal {
 public:
  using HasBits = decltype(std::declval<depthdata_Data_Depth_buyAction>()._has_bits_);
  static void set_has_b0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

depthdata_Data_Depth_buyAction::depthdata_Data_Depth_buyAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.depthdata.Data.Depth.buyAction)
}
depthdata_Data_Depth_buyAction::depthdata_Data_Depth_buyAction(const depthdata_Data_Depth_buyAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  b0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b0()) {
    b0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b0_);
  }
  b1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b1()) {
    b1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b1_);
  }
  // @@protoc_insertion_point(copy_constructor:ukex.depthdata.Data.Depth.buyAction)
}

void depthdata_Data_Depth_buyAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto.base);
  b0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

depthdata_Data_Depth_buyAction::~depthdata_Data_Depth_buyAction() {
  // @@protoc_insertion_point(destructor:ukex.depthdata.Data.Depth.buyAction)
  SharedDtor();
}

void depthdata_Data_Depth_buyAction::SharedDtor() {
  b0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void depthdata_Data_Depth_buyAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depthdata_Data_Depth_buyAction& depthdata_Data_Depth_buyAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depthdata_Data_Depth_buyAction_ukex_2edepthdata_2eproto.base);
  return *internal_default_instance();
}


void depthdata_Data_Depth_buyAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.depthdata.Data.Depth.buyAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      b0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      b1_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* depthdata_Data_Depth_buyAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string b0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_b0(), ptr, ctx, "ukex.depthdata.Data.Depth.buyAction.b0");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string b1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_b1(), ptr, ctx, "ukex.depthdata.Data.Depth.buyAction.b1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depthdata_Data_Depth_buyAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.depthdata.Data.Depth.buyAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string b0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b0().data(), static_cast<int>(this->_internal_b0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.Data.Depth.buyAction.b0");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_b0(), target);
  }

  // required string b1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b1().data(), static_cast<int>(this->_internal_b1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.Data.Depth.buyAction.b1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_b1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.depthdata.Data.Depth.buyAction)
  return target;
}

size_t depthdata_Data_Depth_buyAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.depthdata.Data.Depth.buyAction)
  size_t total_size = 0;

  if (has_b0()) {
    // required string b0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b0());
  }

  if (has_b1()) {
    // required string b1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b1());
  }

  return total_size;
}
size_t depthdata_Data_Depth_buyAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.depthdata.Data.Depth.buyAction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string b0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b0());

    // required string b1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depthdata_Data_Depth_buyAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.depthdata.Data.Depth.buyAction)
  GOOGLE_DCHECK_NE(&from, this);
  const depthdata_Data_Depth_buyAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depthdata_Data_Depth_buyAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.depthdata.Data.Depth.buyAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.depthdata.Data.Depth.buyAction)
    MergeFrom(*source);
  }
}

void depthdata_Data_Depth_buyAction::MergeFrom(const depthdata_Data_Depth_buyAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.depthdata.Data.Depth.buyAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      b0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b0_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      b1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b1_);
    }
  }
}

void depthdata_Data_Depth_buyAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.depthdata.Data.Depth.buyAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthdata_Data_Depth_buyAction::CopyFrom(const depthdata_Data_Depth_buyAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.depthdata.Data.Depth.buyAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthdata_Data_Depth_buyAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void depthdata_Data_Depth_buyAction::InternalSwap(depthdata_Data_Depth_buyAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  b0_.Swap(&other->b0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b1_.Swap(&other->b1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata depthdata_Data_Depth_buyAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void depthdata_Data_Depth_sellAction::InitAsDefaultInstance() {
}
class depthdata_Data_Depth_sellAction::_Internal {
 public:
  using HasBits = decltype(std::declval<depthdata_Data_Depth_sellAction>()._has_bits_);
  static void set_has_s0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

depthdata_Data_Depth_sellAction::depthdata_Data_Depth_sellAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.depthdata.Data.Depth.sellAction)
}
depthdata_Data_Depth_sellAction::depthdata_Data_Depth_sellAction(const depthdata_Data_Depth_sellAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s0()) {
    s0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s0_);
  }
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s1()) {
    s1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s1_);
  }
  // @@protoc_insertion_point(copy_constructor:ukex.depthdata.Data.Depth.sellAction)
}

void depthdata_Data_Depth_sellAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto.base);
  s0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

depthdata_Data_Depth_sellAction::~depthdata_Data_Depth_sellAction() {
  // @@protoc_insertion_point(destructor:ukex.depthdata.Data.Depth.sellAction)
  SharedDtor();
}

void depthdata_Data_Depth_sellAction::SharedDtor() {
  s0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void depthdata_Data_Depth_sellAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depthdata_Data_Depth_sellAction& depthdata_Data_Depth_sellAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depthdata_Data_Depth_sellAction_ukex_2edepthdata_2eproto.base);
  return *internal_default_instance();
}


void depthdata_Data_Depth_sellAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.depthdata.Data.Depth.sellAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      s0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      s1_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* depthdata_Data_Depth_sellAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_s0(), ptr, ctx, "ukex.depthdata.Data.Depth.sellAction.s0");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_s1(), ptr, ctx, "ukex.depthdata.Data.Depth.sellAction.s1");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depthdata_Data_Depth_sellAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.depthdata.Data.Depth.sellAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string s0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s0().data(), static_cast<int>(this->_internal_s0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.Data.Depth.sellAction.s0");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s0(), target);
  }

  // required string s1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.Data.Depth.sellAction.s1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.depthdata.Data.Depth.sellAction)
  return target;
}

size_t depthdata_Data_Depth_sellAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.depthdata.Data.Depth.sellAction)
  size_t total_size = 0;

  if (has_s0()) {
    // required string s0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s0());
  }

  if (has_s1()) {
    // required string s1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  return total_size;
}
size_t depthdata_Data_Depth_sellAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.depthdata.Data.Depth.sellAction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string s0 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s0());

    // required string s1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depthdata_Data_Depth_sellAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.depthdata.Data.Depth.sellAction)
  GOOGLE_DCHECK_NE(&from, this);
  const depthdata_Data_Depth_sellAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depthdata_Data_Depth_sellAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.depthdata.Data.Depth.sellAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.depthdata.Data.Depth.sellAction)
    MergeFrom(*source);
  }
}

void depthdata_Data_Depth_sellAction::MergeFrom(const depthdata_Data_Depth_sellAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.depthdata.Data.Depth.sellAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      s0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s0_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      s1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s1_);
    }
  }
}

void depthdata_Data_Depth_sellAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.depthdata.Data.Depth.sellAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthdata_Data_Depth_sellAction::CopyFrom(const depthdata_Data_Depth_sellAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.depthdata.Data.Depth.sellAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthdata_Data_Depth_sellAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void depthdata_Data_Depth_sellAction::InternalSwap(depthdata_Data_Depth_sellAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  s0_.Swap(&other->s0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s1_.Swap(&other->s1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata depthdata_Data_Depth_sellAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void depthdata_Data_Depth::InitAsDefaultInstance() {
}
class depthdata_Data_Depth::_Internal {
 public:
  using HasBits = decltype(std::declval<depthdata_Data_Depth>()._has_bits_);
};

depthdata_Data_Depth::depthdata_Data_Depth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.depthdata.Data.Depth)
}
depthdata_Data_Depth::depthdata_Data_Depth(const depthdata_Data_Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ukex.depthdata.Data.Depth)
}

void depthdata_Data_Depth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto.base);
}

depthdata_Data_Depth::~depthdata_Data_Depth() {
  // @@protoc_insertion_point(destructor:ukex.depthdata.Data.Depth)
  SharedDtor();
}

void depthdata_Data_Depth::SharedDtor() {
}

void depthdata_Data_Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depthdata_Data_Depth& depthdata_Data_Depth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depthdata_Data_Depth_ukex_2edepthdata_2eproto.base);
  return *internal_default_instance();
}


void depthdata_Data_Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.depthdata.Data.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* depthdata_Data_Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depthdata_Data_Depth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.depthdata.Data.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_buy(i), target, stream);
  }

  // repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_sell(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.depthdata.Data.Depth)
  return target;
}

size_t depthdata_Data_Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.depthdata.Data.Depth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depthdata_Data_Depth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.depthdata.Data.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  const depthdata_Data_Depth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depthdata_Data_Depth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.depthdata.Data.Depth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.depthdata.Data.Depth)
    MergeFrom(*source);
  }
}

void depthdata_Data_Depth::MergeFrom(const depthdata_Data_Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.depthdata.Data.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
}

void depthdata_Data_Depth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.depthdata.Data.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthdata_Data_Depth::CopyFrom(const depthdata_Data_Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.depthdata.Data.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthdata_Data_Depth::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->buy())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->sell())) return false;
  return true;
}

void depthdata_Data_Depth::InternalSwap(depthdata_Data_Depth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata depthdata_Data_Depth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void depthdata_Data::InitAsDefaultInstance() {
  ::ukex::_depthdata_Data_default_instance_._instance.get_mutable()->depth_ = const_cast< ::ukex::depthdata_Data_Depth*>(
      ::ukex::depthdata_Data_Depth::internal_default_instance());
}
class depthdata_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<depthdata_Data>()._has_bits_);
  static const ::ukex::depthdata_Data_Depth& depth(const depthdata_Data* msg);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ukex::depthdata_Data_Depth&
depthdata_Data::_Internal::depth(const depthdata_Data* msg) {
  return *msg->depth_;
}
depthdata_Data::depthdata_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.depthdata.Data)
}
depthdata_Data::depthdata_Data(const depthdata_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_depth()) {
    depth_ = new ::ukex::depthdata_Data_Depth(*from.depth_);
  } else {
    depth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ukex.depthdata.Data)
}

void depthdata_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depthdata_Data_ukex_2edepthdata_2eproto.base);
  depth_ = nullptr;
}

depthdata_Data::~depthdata_Data() {
  // @@protoc_insertion_point(destructor:ukex.depthdata.Data)
  SharedDtor();
}

void depthdata_Data::SharedDtor() {
  if (this != internal_default_instance()) delete depth_;
}

void depthdata_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depthdata_Data& depthdata_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depthdata_Data_ukex_2edepthdata_2eproto.base);
  return *internal_default_instance();
}


void depthdata_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.depthdata.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(depth_ != nullptr);
    depth_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* depthdata_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ukex.depthdata.Data.Depth depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depthdata_Data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.depthdata.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ukex.depthdata.Data.Depth depth = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::depth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.depthdata.Data)
  return target;
}

size_t depthdata_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.depthdata.Data)
  size_t total_size = 0;

  // required .ukex.depthdata.Data.Depth depth = 1;
  if (has_depth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depthdata_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.depthdata.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const depthdata_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depthdata_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.depthdata.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.depthdata.Data)
    MergeFrom(*source);
  }
}

void depthdata_Data::MergeFrom(const depthdata_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.depthdata.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_depth()) {
    _internal_mutable_depth()->::ukex::depthdata_Data_Depth::MergeFrom(from._internal_depth());
  }
}

void depthdata_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.depthdata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthdata_Data::CopyFrom(const depthdata_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.depthdata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthdata_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_depth()) {
    if (!this->depth_->IsInitialized()) return false;
  }
  return true;
}

void depthdata_Data::InternalSwap(depthdata_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata depthdata_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void depthdata::InitAsDefaultInstance() {
  ::ukex::_depthdata_default_instance_._instance.get_mutable()->data_ = const_cast< ::ukex::depthdata_Data*>(
      ::ukex::depthdata_Data::internal_default_instance());
}
class depthdata::_Internal {
 public:
  using HasBits = decltype(std::declval<depthdata>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ukex::depthdata_Data& data(const depthdata* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ukex::depthdata_Data&
depthdata::_Internal::data(const depthdata* msg) {
  return *msg->data_;
}
depthdata::depthdata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.depthdata)
}
depthdata::depthdata(const depthdata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_data()) {
    data_ = new ::ukex::depthdata_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ukex.depthdata)
}

void depthdata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_depthdata_ukex_2edepthdata_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

depthdata::~depthdata() {
  // @@protoc_insertion_point(destructor:ukex.depthdata)
  SharedDtor();
}

void depthdata::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void depthdata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const depthdata& depthdata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_depthdata_ukex_2edepthdata_2eproto.base);
  return *internal_default_instance();
}


void depthdata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.depthdata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* depthdata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_type(), ptr, ctx, "ukex.depthdata.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ukex.depthdata.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_token(), ptr, ctx, "ukex.depthdata.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* depthdata::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.depthdata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // required .ukex.depthdata.Data data = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target, stream);
  }

  // required string token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ukex.depthdata.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.depthdata)
  return target;
}

size_t depthdata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.depthdata)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (has_data()) {
    // required .ukex.depthdata.Data data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return total_size;
}
size_t depthdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.depthdata)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .ukex.depthdata.Data data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void depthdata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.depthdata)
  GOOGLE_DCHECK_NE(&from, this);
  const depthdata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<depthdata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.depthdata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.depthdata)
    MergeFrom(*source);
  }
}

void depthdata::MergeFrom(const depthdata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.depthdata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::ukex::depthdata_Data::MergeFrom(from._internal_data());
    }
  }
}

void depthdata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.depthdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthdata::CopyFrom(const depthdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.depthdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthdata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void depthdata::InternalSwap(depthdata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata depthdata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::depthdata_Data_Depth_buyAction* Arena::CreateMaybeMessage< ::ukex::depthdata_Data_Depth_buyAction >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::depthdata_Data_Depth_buyAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::depthdata_Data_Depth_sellAction* Arena::CreateMaybeMessage< ::ukex::depthdata_Data_Depth_sellAction >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::depthdata_Data_Depth_sellAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::depthdata_Data_Depth* Arena::CreateMaybeMessage< ::ukex::depthdata_Data_Depth >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::depthdata_Data_Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::depthdata_Data* Arena::CreateMaybeMessage< ::ukex::depthdata_Data >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::depthdata_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::ukex::depthdata* Arena::CreateMaybeMessage< ::ukex::depthdata >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::depthdata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
