// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.filedata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2efiledata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2efiledata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2efiledata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2efiledata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2efiledata_2eproto;
namespace ukex {
class filedata;
class filedataDefaultTypeInternal;
extern filedataDefaultTypeInternal _filedata_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::filedata* Arena::CreateMaybeMessage<::ukex::filedata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum filedata_CONST : int {
  filedata_CONST_CMD = 113
};
bool filedata_CONST_IsValid(int value);
constexpr filedata_CONST filedata_CONST_CONST_MIN = filedata_CONST_CMD;
constexpr filedata_CONST filedata_CONST_CONST_MAX = filedata_CONST_CMD;
constexpr int filedata_CONST_CONST_ARRAYSIZE = filedata_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* filedata_CONST_descriptor();
template<typename T>
inline const std::string& filedata_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, filedata_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function filedata_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    filedata_CONST_descriptor(), enum_t_value);
}
inline bool filedata_CONST_Parse(
    const std::string& name, filedata_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<filedata_CONST>(
    filedata_CONST_descriptor(), name, value);
}
// ===================================================================

class filedata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.filedata) */ {
 public:
  filedata();
  virtual ~filedata();

  filedata(const filedata& from);
  filedata(filedata&& from) noexcept
    : filedata() {
    *this = ::std::move(from);
  }

  inline filedata& operator=(const filedata& from) {
    CopyFrom(from);
    return *this;
  }
  inline filedata& operator=(filedata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const filedata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const filedata* internal_default_instance() {
    return reinterpret_cast<const filedata*>(
               &_filedata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(filedata& a, filedata& b) {
    a.Swap(&b);
  }
  inline void Swap(filedata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filedata* New() const final {
    return CreateMaybeMessage<filedata>(nullptr);
  }

  filedata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filedata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const filedata& from);
  void MergeFrom(const filedata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filedata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.filedata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2efiledata_2eproto);
    return ::descriptor_table_ukex_2efiledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef filedata_CONST CONST;
  static constexpr CONST CMD =
    filedata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return filedata_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    filedata_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    filedata_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    filedata_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return filedata_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return filedata_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return filedata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kDataFieldNumber = 6,
    kTokenFieldNumber = 7,
    kModifytimeFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // required bytes data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required string token = 7;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required uint64 modifytime = 3;
  bool has_modifytime() const;
  private:
  bool _internal_has_modifytime() const;
  public:
  void clear_modifytime();
  ::PROTOBUF_NAMESPACE_ID::uint64 modifytime() const;
  void set_modifytime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modifytime() const;
  void _internal_set_modifytime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 length = 5;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.filedata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modifytime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_ukex_2efiledata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// filedata

// required string name = 1;
inline bool filedata::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool filedata::has_name() const {
  return _internal_has_name();
}
inline void filedata::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& filedata::name() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.name)
  return _internal_name();
}
inline void filedata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.name)
}
inline std::string* filedata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ukex.filedata.name)
  return _internal_mutable_name();
}
inline const std::string& filedata::_internal_name() const {
  return name_.GetNoArena();
}
inline void filedata::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void filedata::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.filedata.name)
}
inline void filedata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filedata.name)
}
inline void filedata::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filedata.name)
}
inline std::string* filedata::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* filedata::release_name() {
  // @@protoc_insertion_point(field_release:ukex.filedata.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void filedata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ukex.filedata.name)
}

// required string path = 2;
inline bool filedata::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool filedata::has_path() const {
  return _internal_has_path();
}
inline void filedata::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& filedata::path() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.path)
  return _internal_path();
}
inline void filedata::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.path)
}
inline std::string* filedata::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ukex.filedata.path)
  return _internal_mutable_path();
}
inline const std::string& filedata::_internal_path() const {
  return path_.GetNoArena();
}
inline void filedata::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void filedata::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.filedata.path)
}
inline void filedata::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filedata.path)
}
inline void filedata::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filedata.path)
}
inline std::string* filedata::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* filedata::release_path() {
  // @@protoc_insertion_point(field_release:ukex.filedata.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void filedata::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ukex.filedata.path)
}

// required uint64 modifytime = 3;
inline bool filedata::_internal_has_modifytime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool filedata::has_modifytime() const {
  return _internal_has_modifytime();
}
inline void filedata::clear_modifytime() {
  modifytime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 filedata::_internal_modifytime() const {
  return modifytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 filedata::modifytime() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.modifytime)
  return _internal_modifytime();
}
inline void filedata::_internal_set_modifytime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  modifytime_ = value;
}
inline void filedata::set_modifytime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modifytime(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.modifytime)
}

// required uint64 offset = 4;
inline bool filedata::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool filedata::has_offset() const {
  return _internal_has_offset();
}
inline void filedata::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 filedata::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 filedata::offset() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.offset)
  return _internal_offset();
}
inline void filedata::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  offset_ = value;
}
inline void filedata::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.offset)
}

// required uint32 length = 5;
inline bool filedata::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool filedata::has_length() const {
  return _internal_has_length();
}
inline void filedata::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 filedata::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 filedata::length() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.length)
  return _internal_length();
}
inline void filedata::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  length_ = value;
}
inline void filedata::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.length)
}

// required bytes data = 6;
inline bool filedata::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool filedata::has_data() const {
  return _internal_has_data();
}
inline void filedata::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& filedata::data() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.data)
  return _internal_data();
}
inline void filedata::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.data)
}
inline std::string* filedata::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ukex.filedata.data)
  return _internal_mutable_data();
}
inline const std::string& filedata::_internal_data() const {
  return data_.GetNoArena();
}
inline void filedata::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void filedata::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.filedata.data)
}
inline void filedata::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filedata.data)
}
inline void filedata::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filedata.data)
}
inline std::string* filedata::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* filedata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.filedata.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void filedata::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ukex.filedata.data)
}

// required string token = 7;
inline bool filedata::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool filedata::has_token() const {
  return _internal_has_token();
}
inline void filedata::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& filedata::token() const {
  // @@protoc_insertion_point(field_get:ukex.filedata.token)
  return _internal_token();
}
inline void filedata::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.filedata.token)
}
inline std::string* filedata::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.filedata.token)
  return _internal_mutable_token();
}
inline const std::string& filedata::_internal_token() const {
  return token_.GetNoArena();
}
inline void filedata::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void filedata::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.filedata.token)
}
inline void filedata::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filedata.token)
}
inline void filedata::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filedata.token)
}
inline std::string* filedata::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000008u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* filedata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.filedata.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void filedata::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.filedata.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::filedata_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::filedata_CONST>() {
  return ::ukex::filedata_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2efiledata_2eproto
