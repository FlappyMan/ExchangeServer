// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.uptradebatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2euptradebatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2euptradebatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2euptradebatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2euptradebatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2euptradebatch_2eproto;
namespace ukex {
class uptradebatch;
class uptradebatchDefaultTypeInternal;
extern uptradebatchDefaultTypeInternal _uptradebatch_default_instance_;
class uptradebatch_Trades;
class uptradebatch_TradesDefaultTypeInternal;
extern uptradebatch_TradesDefaultTypeInternal _uptradebatch_Trades_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::uptradebatch* Arena::CreateMaybeMessage<::ukex::uptradebatch>(Arena*);
template<> ::ukex::uptradebatch_Trades* Arena::CreateMaybeMessage<::ukex::uptradebatch_Trades>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum uptradebatch_CONST : int {
  uptradebatch_CONST_CMD = 101
};
bool uptradebatch_CONST_IsValid(int value);
constexpr uptradebatch_CONST uptradebatch_CONST_CONST_MIN = uptradebatch_CONST_CMD;
constexpr uptradebatch_CONST uptradebatch_CONST_CONST_MAX = uptradebatch_CONST_CMD;
constexpr int uptradebatch_CONST_CONST_ARRAYSIZE = uptradebatch_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* uptradebatch_CONST_descriptor();
template<typename T>
inline const std::string& uptradebatch_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, uptradebatch_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function uptradebatch_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    uptradebatch_CONST_descriptor(), enum_t_value);
}
inline bool uptradebatch_CONST_Parse(
    const std::string& name, uptradebatch_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<uptradebatch_CONST>(
    uptradebatch_CONST_descriptor(), name, value);
}
// ===================================================================

class uptradebatch_Trades :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.uptradebatch.Trades) */ {
 public:
  uptradebatch_Trades();
  virtual ~uptradebatch_Trades();

  uptradebatch_Trades(const uptradebatch_Trades& from);
  uptradebatch_Trades(uptradebatch_Trades&& from) noexcept
    : uptradebatch_Trades() {
    *this = ::std::move(from);
  }

  inline uptradebatch_Trades& operator=(const uptradebatch_Trades& from) {
    CopyFrom(from);
    return *this;
  }
  inline uptradebatch_Trades& operator=(uptradebatch_Trades&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const uptradebatch_Trades& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const uptradebatch_Trades* internal_default_instance() {
    return reinterpret_cast<const uptradebatch_Trades*>(
               &_uptradebatch_Trades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(uptradebatch_Trades& a, uptradebatch_Trades& b) {
    a.Swap(&b);
  }
  inline void Swap(uptradebatch_Trades* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uptradebatch_Trades* New() const final {
    return CreateMaybeMessage<uptradebatch_Trades>(nullptr);
  }

  uptradebatch_Trades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uptradebatch_Trades>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const uptradebatch_Trades& from);
  void MergeFrom(const uptradebatch_Trades& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uptradebatch_Trades* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.uptradebatch.Trades";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2euptradebatch_2eproto);
    return ::descriptor_table_ukex_2euptradebatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kNumFieldNumber = 3,
    kMarketidFieldNumber = 1,
    kOrderidFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // required string price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // required string num = 3;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const std::string& num() const;
  void set_num(const std::string& value);
  void set_num(std::string&& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  std::string* mutable_num();
  std::string* release_num();
  void set_allocated_num(std::string* num);
  private:
  const std::string& _internal_num() const;
  void _internal_set_num(const std::string& value);
  std::string* _internal_mutable_num();
  public:

  // required uint64 marketid = 1;
  bool has_marketid() const;
  private:
  bool _internal_has_marketid() const;
  public:
  void clear_marketid();
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid() const;
  void set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_marketid() const;
  void _internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 orderid = 5;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.uptradebatch.Trades)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_ukex_2euptradebatch_2eproto;
};
// -------------------------------------------------------------------

class uptradebatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.uptradebatch) */ {
 public:
  uptradebatch();
  virtual ~uptradebatch();

  uptradebatch(const uptradebatch& from);
  uptradebatch(uptradebatch&& from) noexcept
    : uptradebatch() {
    *this = ::std::move(from);
  }

  inline uptradebatch& operator=(const uptradebatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline uptradebatch& operator=(uptradebatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const uptradebatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const uptradebatch* internal_default_instance() {
    return reinterpret_cast<const uptradebatch*>(
               &_uptradebatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(uptradebatch& a, uptradebatch& b) {
    a.Swap(&b);
  }
  inline void Swap(uptradebatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uptradebatch* New() const final {
    return CreateMaybeMessage<uptradebatch>(nullptr);
  }

  uptradebatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uptradebatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const uptradebatch& from);
  void MergeFrom(const uptradebatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uptradebatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.uptradebatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2euptradebatch_2eproto);
    return ::descriptor_table_ukex_2euptradebatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef uptradebatch_Trades Trades;

  typedef uptradebatch_CONST CONST;
  static constexpr CONST CMD =
    uptradebatch_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return uptradebatch_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    uptradebatch_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    uptradebatch_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    uptradebatch_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return uptradebatch_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return uptradebatch_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return uptradebatch_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 4,
    kTokenFieldNumber = 2,
    kPaypasswordFieldNumber = 3,
    kUidFieldNumber = 1,
    kUptradebatchidFieldNumber = 5,
  };
  // repeated .ukex.uptradebatch.Trades trades = 4;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::ukex::uptradebatch_Trades* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::uptradebatch_Trades >*
      mutable_trades();
  private:
  const ::ukex::uptradebatch_Trades& _internal_trades(int index) const;
  ::ukex::uptradebatch_Trades* _internal_add_trades();
  public:
  const ::ukex::uptradebatch_Trades& trades(int index) const;
  ::ukex::uptradebatch_Trades* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::uptradebatch_Trades >&
      trades() const;

  // required string token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required string paypassword = 3;
  bool has_paypassword() const;
  private:
  bool _internal_has_paypassword() const;
  public:
  void clear_paypassword();
  const std::string& paypassword() const;
  void set_paypassword(const std::string& value);
  void set_paypassword(std::string&& value);
  void set_paypassword(const char* value);
  void set_paypassword(const char* value, size_t size);
  std::string* mutable_paypassword();
  std::string* release_paypassword();
  void set_allocated_paypassword(std::string* paypassword);
  private:
  const std::string& _internal_paypassword() const;
  void _internal_set_paypassword(const std::string& value);
  std::string* _internal_mutable_paypassword();
  public:

  // required uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 uptradebatchid = 5;
  bool has_uptradebatchid() const;
  private:
  bool _internal_has_uptradebatchid() const;
  public:
  void clear_uptradebatchid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatchid() const;
  void set_uptradebatchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uptradebatchid() const;
  void _internal_set_uptradebatchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ukex.uptradebatch)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::uptradebatch_Trades > trades_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paypassword_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatchid_;
  friend struct ::TableStruct_ukex_2euptradebatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// uptradebatch_Trades

// required uint64 marketid = 1;
inline bool uptradebatch_Trades::_internal_has_marketid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool uptradebatch_Trades::has_marketid() const {
  return _internal_has_marketid();
}
inline void uptradebatch_Trades::clear_marketid() {
  marketid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch_Trades::_internal_marketid() const {
  return marketid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch_Trades::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.marketid)
  return _internal_marketid();
}
inline void uptradebatch_Trades::_internal_set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  marketid_ = value;
}
inline void uptradebatch_Trades::set_marketid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.marketid)
}

// required string price = 2;
inline bool uptradebatch_Trades::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool uptradebatch_Trades::has_price() const {
  return _internal_has_price();
}
inline void uptradebatch_Trades::clear_price() {
  price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& uptradebatch_Trades::price() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.price)
  return _internal_price();
}
inline void uptradebatch_Trades::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.price)
}
inline std::string* uptradebatch_Trades::mutable_price() {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.Trades.price)
  return _internal_mutable_price();
}
inline const std::string& uptradebatch_Trades::_internal_price() const {
  return price_.GetNoArena();
}
inline void uptradebatch_Trades::_internal_set_price(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptradebatch_Trades::set_price(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptradebatch.Trades.price)
}
inline void uptradebatch_Trades::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.Trades.price)
}
inline void uptradebatch_Trades::set_price(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.Trades.price)
}
inline std::string* uptradebatch_Trades::_internal_mutable_price() {
  _has_bits_[0] |= 0x00000001u;
  return price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptradebatch_Trades::release_price() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.Trades.price)
  if (!has_price()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return price_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch_Trades::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.Trades.price)
}

// required string num = 3;
inline bool uptradebatch_Trades::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool uptradebatch_Trades::has_num() const {
  return _internal_has_num();
}
inline void uptradebatch_Trades::clear_num() {
  num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& uptradebatch_Trades::num() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.num)
  return _internal_num();
}
inline void uptradebatch_Trades::set_num(const std::string& value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.num)
}
inline std::string* uptradebatch_Trades::mutable_num() {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.Trades.num)
  return _internal_mutable_num();
}
inline const std::string& uptradebatch_Trades::_internal_num() const {
  return num_.GetNoArena();
}
inline void uptradebatch_Trades::_internal_set_num(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptradebatch_Trades::set_num(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  num_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptradebatch.Trades.num)
}
inline void uptradebatch_Trades::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.Trades.num)
}
inline void uptradebatch_Trades::set_num(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.Trades.num)
}
inline std::string* uptradebatch_Trades::_internal_mutable_num() {
  _has_bits_[0] |= 0x00000002u;
  return num_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptradebatch_Trades::release_num() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.Trades.num)
  if (!has_num()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return num_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch_Trades::set_allocated_num(std::string* num) {
  if (num != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  num_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.Trades.num)
}

// required uint32 type = 4;
inline bool uptradebatch_Trades::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool uptradebatch_Trades::has_type() const {
  return _internal_has_type();
}
inline void uptradebatch_Trades::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uptradebatch_Trades::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uptradebatch_Trades::type() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.type)
  return _internal_type();
}
inline void uptradebatch_Trades::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void uptradebatch_Trades::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.type)
}

// required uint64 orderid = 5;
inline bool uptradebatch_Trades::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool uptradebatch_Trades::has_orderid() const {
  return _internal_has_orderid();
}
inline void uptradebatch_Trades::clear_orderid() {
  orderid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch_Trades::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch_Trades::orderid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.orderid)
  return _internal_orderid();
}
inline void uptradebatch_Trades::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  orderid_ = value;
}
inline void uptradebatch_Trades::set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.orderid)
}

// -------------------------------------------------------------------

// uptradebatch

// required uint64 uid = 1;
inline bool uptradebatch::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool uptradebatch::has_uid() const {
  return _internal_has_uid();
}
inline void uptradebatch::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch::uid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.uid)
  return _internal_uid();
}
inline void uptradebatch::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void uptradebatch::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.uid)
}

// required string token = 2;
inline bool uptradebatch::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool uptradebatch::has_token() const {
  return _internal_has_token();
}
inline void uptradebatch::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& uptradebatch::token() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.token)
  return _internal_token();
}
inline void uptradebatch::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.token)
}
inline std::string* uptradebatch::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.token)
  return _internal_mutable_token();
}
inline const std::string& uptradebatch::_internal_token() const {
  return token_.GetNoArena();
}
inline void uptradebatch::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptradebatch::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptradebatch.token)
}
inline void uptradebatch::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.token)
}
inline void uptradebatch::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.token)
}
inline std::string* uptradebatch::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptradebatch::release_token() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.token)
}

// required string paypassword = 3;
inline bool uptradebatch::_internal_has_paypassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool uptradebatch::has_paypassword() const {
  return _internal_has_paypassword();
}
inline void uptradebatch::clear_paypassword() {
  paypassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& uptradebatch::paypassword() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.paypassword)
  return _internal_paypassword();
}
inline void uptradebatch::set_paypassword(const std::string& value) {
  _internal_set_paypassword(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.paypassword)
}
inline std::string* uptradebatch::mutable_paypassword() {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.paypassword)
  return _internal_mutable_paypassword();
}
inline const std::string& uptradebatch::_internal_paypassword() const {
  return paypassword_.GetNoArena();
}
inline void uptradebatch::_internal_set_paypassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void uptradebatch::set_paypassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukex.uptradebatch.paypassword)
}
inline void uptradebatch::set_paypassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.paypassword)
}
inline void uptradebatch::set_paypassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  paypassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.paypassword)
}
inline std::string* uptradebatch::_internal_mutable_paypassword() {
  _has_bits_[0] |= 0x00000002u;
  return paypassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* uptradebatch::release_paypassword() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.paypassword)
  if (!has_paypassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return paypassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_allocated_paypassword(std::string* paypassword) {
  if (paypassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  paypassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paypassword);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.paypassword)
}

// repeated .ukex.uptradebatch.Trades trades = 4;
inline int uptradebatch::_internal_trades_size() const {
  return trades_.size();
}
inline int uptradebatch::trades_size() const {
  return _internal_trades_size();
}
inline void uptradebatch::clear_trades() {
  trades_.Clear();
}
inline ::ukex::uptradebatch_Trades* uptradebatch::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::uptradebatch_Trades >*
uptradebatch::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:ukex.uptradebatch.trades)
  return &trades_;
}
inline const ::ukex::uptradebatch_Trades& uptradebatch::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::ukex::uptradebatch_Trades& uptradebatch::trades(int index) const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.trades)
  return _internal_trades(index);
}
inline ::ukex::uptradebatch_Trades* uptradebatch::_internal_add_trades() {
  return trades_.Add();
}
inline ::ukex::uptradebatch_Trades* uptradebatch::add_trades() {
  // @@protoc_insertion_point(field_add:ukex.uptradebatch.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ukex::uptradebatch_Trades >&
uptradebatch::trades() const {
  // @@protoc_insertion_point(field_list:ukex.uptradebatch.trades)
  return trades_;
}

// required uint64 uptradebatchid = 5;
inline bool uptradebatch::_internal_has_uptradebatchid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool uptradebatch::has_uptradebatchid() const {
  return _internal_has_uptradebatchid();
}
inline void uptradebatch::clear_uptradebatchid() {
  uptradebatchid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch::_internal_uptradebatchid() const {
  return uptradebatchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uptradebatch::uptradebatchid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.uptradebatchid)
  return _internal_uptradebatchid();
}
inline void uptradebatch::_internal_set_uptradebatchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  uptradebatchid_ = value;
}
inline void uptradebatch::set_uptradebatchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uptradebatchid(value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.uptradebatchid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::uptradebatch_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::uptradebatch_CONST>() {
  return ::ukex::uptradebatch_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2euptradebatch_2eproto
